Directory structure:
└── karthiknitt-ai-saas-starter-kit/
    ├── README.md
    ├── commitlint.config.mjs
    ├── components.json
    ├── drizzle.config.ts
    ├── eslint.config.mjs
    ├── generate-commit-msg.js
    ├── middleware.ts
    ├── next.config.ts
    ├── package.json
    ├── postcss.config.mjs
    ├── prettier.config.mjs
    ├── TEST_SUMMARY.md
    ├── TESTING_GUIDE.md
    ├── tsconfig.json
    ├── vitest.config.ts
    ├── .env.example
    ├── .prettierignore
    ├── public/
    │   └── sw.js
    ├── server/
    │   └── users.ts
    ├── src/
    │   ├── app/
    │   │   ├── globals.css
    │   │   ├── layout.tsx
    │   │   ├── page.tsx
    │   │   ├── (auth)/
    │   │   │   ├── forgot-password/
    │   │   │   │   └── page.tsx
    │   │   │   ├── login/
    │   │   │   │   └── page.tsx
    │   │   │   ├── reset-password/
    │   │   │   │   └── page.tsx
    │   │   │   └── signup/
    │   │   │       └── page.tsx
    │   │   ├── aichat/
    │   │   │   └── page.tsx
    │   │   ├── api/
    │   │   │   ├── auth/
    │   │   │   │   └── [...all]/
    │   │   │   │       └── route.ts
    │   │   │   ├── chat/
    │   │   │   │   └── route.ts
    │   │   │   ├── models/
    │   │   │   │   └── route.ts
    │   │   │   ├── user/
    │   │   │   │   └── api-keys/
    │   │   │   │       └── route.ts
    │   │   │   └── webhooks/
    │   │   │       └── polar/
    │   │   │           └── route.ts
    │   │   ├── billing/
    │   │   │   ├── page.tsx
    │   │   │   └── success/
    │   │   │       └── page.tsx
    │   │   └── dashboard/
    │   │       ├── data.json
    │   │       ├── page.tsx
    │   │       └── subscriptions/
    │   │           └── page.tsx
    │   ├── components/
    │   │   ├── active-theme.tsx
    │   │   ├── app-sidebar.tsx
    │   │   ├── chart-area-interactive.tsx
    │   │   ├── content-5.tsx
    │   │   ├── data-table.tsx
    │   │   ├── features-4.tsx
    │   │   ├── footer.tsx
    │   │   ├── header.tsx
    │   │   ├── hero-section.tsx
    │   │   ├── home-page-wrapper.tsx
    │   │   ├── logo.tsx
    │   │   ├── nav-documents.tsx
    │   │   ├── nav-main.tsx
    │   │   ├── nav-secondary.tsx
    │   │   ├── nav-user.tsx
    │   │   ├── performance-monitor.tsx
    │   │   ├── pricing.tsx
    │   │   ├── section-cards.tsx
    │   │   ├── site-header.tsx
    │   │   ├── stats-2.tsx
    │   │   ├── testimonials.tsx
    │   │   ├── theme-provider.tsx
    │   │   ├── theme-selector.tsx
    │   │   ├── ai-elements/
    │   │   │   ├── actions.tsx
    │   │   │   ├── artifact.tsx
    │   │   │   ├── branch.tsx
    │   │   │   ├── chain-of-thought.tsx
    │   │   │   ├── code-block.tsx
    │   │   │   ├── context.tsx
    │   │   │   ├── conversation.tsx
    │   │   │   ├── image.tsx
    │   │   │   ├── inline-citation.tsx
    │   │   │   ├── loader.tsx
    │   │   │   ├── message.tsx
    │   │   │   ├── open-in-chat.tsx
    │   │   │   ├── prompt-input.tsx
    │   │   │   ├── reasoning.tsx
    │   │   │   ├── response.tsx
    │   │   │   ├── sources.tsx
    │   │   │   ├── suggestion.tsx
    │   │   │   ├── task.tsx
    │   │   │   ├── tool.tsx
    │   │   │   └── web-preview.tsx
    │   │   ├── forms/
    │   │   │   ├── forgot-password-form.tsx
    │   │   │   ├── login-form.tsx
    │   │   │   ├── reset-password-form.tsx
    │   │   │   ├── reset-password.tsx
    │   │   │   ├── signout.tsx
    │   │   │   ├── signup-form.tsx
    │   │   │   └── verify-email.tsx
    │   │   └── ui/
    │   │       ├── accordion.tsx
    │   │       ├── alert-dialog.tsx
    │   │       ├── alert.tsx
    │   │       ├── aspect-ratio.tsx
    │   │       ├── avatar.tsx
    │   │       ├── badge.tsx
    │   │       ├── breadcrumb.tsx
    │   │       ├── button-group.tsx
    │   │       ├── button.tsx
    │   │       ├── calendar.tsx
    │   │       ├── card.tsx
    │   │       ├── carousel.tsx
    │   │       ├── chart.tsx
    │   │       ├── checkbox.tsx
    │   │       ├── collapsible.tsx
    │   │       ├── command.tsx
    │   │       ├── context-menu.tsx
    │   │       ├── dialog.tsx
    │   │       ├── drawer.tsx
    │   │       ├── dropdown-menu.tsx
    │   │       ├── empty.tsx
    │   │       ├── field.tsx
    │   │       ├── form.tsx
    │   │       ├── hover-card.tsx
    │   │       ├── infinite-slider.tsx
    │   │       ├── input-group.tsx
    │   │       ├── input-otp.tsx
    │   │       ├── input.tsx
    │   │       ├── item.tsx
    │   │       ├── kbd.tsx
    │   │       ├── label.tsx
    │   │       ├── menubar.tsx
    │   │       ├── modetoggle.tsx
    │   │       ├── navigation-menu.tsx
    │   │       ├── pagination.tsx
    │   │       ├── popover.tsx
    │   │       ├── progress.tsx
    │   │       ├── progressive-blur.tsx
    │   │       ├── radio-group.tsx
    │   │       ├── resizable.tsx
    │   │       ├── scroll-area.tsx
    │   │       ├── select.tsx
    │   │       ├── separator.tsx
    │   │       ├── sheet.tsx
    │   │       ├── sidebar.tsx
    │   │       ├── skeleton.tsx
    │   │       ├── slider.tsx
    │   │       ├── sonner.tsx
    │   │       ├── spinner.tsx
    │   │       ├── switch.tsx
    │   │       ├── table.tsx
    │   │       ├── tabs.tsx
    │   │       ├── textarea.tsx
    │   │       ├── toggle-group.tsx
    │   │       ├── toggle.tsx
    │   │       └── tooltip.tsx
    │   ├── db/
    │   │   ├── drizzle.ts
    │   │   └── schema.ts
    │   ├── hooks/
    │   │   ├── use-mobile.ts
    │   │   └── use-performance.ts
    │   └── lib/
    │       ├── arcjet.ts
    │       ├── auth-client.ts
    │       ├── auth.ts
    │       ├── crypto.ts
    │       ├── logger.ts
    │       ├── plan-map.ts
    │       ├── rate-limit.ts
    │       └── utils.ts
    ├── unit-tests/
    │   ├── middleware.test.ts
    │   ├── next.config.test.ts
    │   ├── setup.ts
    │   ├── sw.test.ts
    │   ├── components/
    │   │   ├── data-table.test.ts
    │   │   ├── performance-monitor.test.tsx
    │   │   └── theme-provider.test.tsx
    │   ├── db/
    │   │   └── schema.test.ts
    │   ├── hooks/
    │   │   ├── use-mobile.test.ts
    │   │   └── use-performance.test.ts
    │   ├── integration/
    │   │   ├── api-chat.test.ts
    │   │   ├── api-user-keys.test.ts
    │   │   ├── database-operations.test.ts
    │   │   ├── error-scenarios.test.ts
    │   │   └── components/
    │   │       ├── login-form.test.tsx
    │   │       └── theme-provider.test.tsx
    │   ├── lib/
    │   │   ├── arcjet.test.ts
    │   │   ├── auth-client.test.ts
    │   │   ├── crypto.test.ts
    │   │   ├── logger.test.ts
    │   │   ├── plan-map.test.ts
    │   │   ├── rate-limit.test.ts
    │   │   └── utils.test.ts
    │   └── performance/
    │       ├── data-table-performance.test.tsx
    │       └── general-performance.test.ts
    ├── .github/
    │   └── workflows/
    │       └── ci.yml
    └── .husky/
        ├── commit-msg
        ├── pre-commit
        ├── pre-push
        └── prepare-commit-msg

================================================
FILE: README.md
================================================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.



================================================
FILE: commitlint.config.mjs
================================================
// commitlint.config.mjs
const config = {
  extends: ['@commitlint/config-conventional'],
  rules: {
    'references-empty': [0, 'never'],
    'footer-max-line-length': [0, 'always'],
    'body-max-line-length': [0, 'always'],
  },
};

export default config;



================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "registries": {
    "@tailark": "https://tailark.com/r/{name}.json"
  }
}



================================================
FILE: drizzle.config.ts
================================================
import { config } from 'dotenv';
import { defineConfig } from 'drizzle-kit';

config({ path: '.env' });

export default defineConfig({
  schema: './src/db/schema.ts',
  out: './migrations',
  dialect: 'postgresql',
  dbCredentials: {
    url: process.env.DATABASE_URL!,
  },
});



================================================
FILE: eslint.config.mjs
================================================
// eslint.config.mjs

import js from '@eslint/js';
import tseslint from 'typescript-eslint';
//import unicorn from 'eslint-plugin-unicorn';
import prettier from 'eslint-config-prettier';
import importPlugin from 'eslint-plugin-import';
import react from 'eslint-plugin-react';
import reactHooks from 'eslint-plugin-react-hooks';
// import simpleImportSort from 'eslint-plugin-simple-import-sort';
import playwright from 'eslint-plugin-playwright';
import nextPlugin from '@next/eslint-plugin-next';

export default [
  {
    ignores: [
      'next-env.d.ts',
      '.next/*',
      'node_modules',
      'src/components/ui/*',
      'src/components/ai-elements/*',
    ],
  },
  // Base ESLint recommended rules
  js.configs.recommended,

  // TypeScript recommended rules
  ...tseslint.configs.recommended,

  // React support
  {
    plugins: {
      react,
      'react-hooks': reactHooks,
    },
    languageOptions: {
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
    rules: {
      'react/react-in-jsx-scope': 'off',
    },
  },

  // Next.js plugin
  {
    plugins: {
      '@next/next': nextPlugin,
    },
    rules: {
      '@next/next/no-html-link-for-pages': 'warn',
      '@next/next/no-img-element': 'warn',
      '@next/next/no-sync-scripts': 'warn',
    },
  },

  /*
  // Unicorn plugin settings
  {
    plugins: {
      unicorn,
    },
    rules: {
      'unicorn/no-array-callback-reference': 'off',
      'unicorn/no-array-for-each': 'off',
      'unicorn/no-array-reduce': 'off',
      'unicorn/prevent-abbreviations': [
        'error',
        {
          allowList: {
            e2e: true,
          },
          replacements: {
            props: false,
            ref: false,
            params: false,
          },
        },
      ],
    },
  },*/

  // Import plugin (optional: add import/resolver support if needed)
  {
    plugins: {
      import: importPlugin,
    },
  },

  // Simple import sort plugin
  /*
  {
    plugins: {
      'simple-import-sort': simpleImportSort,
    },
    rules: {
      'simple-import-sort/imports': 'error',
      'simple-import-sort/exports': 'error',
    },
  },
  */

  // Prettier (disables formatting conflicts)
  prettier,

  // Playwright plugin for tests
  {
    files: ['**/tests/**/*.ts', '**/tests/**/*.tsx'],
    plugins: {
      playwright,
    },
    rules: {
      ...(playwright.configs?.recommended?.rules ?? {}),
    },
  },
];



================================================
FILE: generate-commit-msg.js
================================================
/* eslint-disable no-undef */

import { execSync } from 'child_process';
import { openai } from '@ai-sdk/openai';
import { generateText } from 'ai';
import 'dotenv/config';

if (!process.env.OPENAI_API_KEY) {
  console.error('Error: OPENAI_API_KEY environment variable is required');
  process.exit(1);
}

async function generateCommitMessage() {
  try {
    // Get git diff
    const diff = execSync('git diff --staged --no-color', { encoding: 'utf8' });

    if (!diff.trim()) {
      console.error('No staged changes');
      process.exit(1);
    }

    const prompt = `Generate a single conventional commit message for the following git diff. Follow the format: type(scope): description

Types: feat, fix, docs, style, refactor, test, chore
Keep it concise and lowercase. Output only the commit message, no code blocks or extra text.

Diff:
${diff}`;

    const { text } = await generateText({
      model: openai('gpt-4o-mini'),
      prompt,
    });

    console.log(text.trim());
  } catch (error) {
    console.error('Error generating commit message:', error.message);
    process.exit(1);
  }
}

await generateCommitMessage();


================================================
FILE: middleware.ts
================================================
import { NextRequest, NextResponse } from 'next/server';
import { getSessionCookie } from 'better-auth/cookies';

/**
 * Apply Arcjet protection, enforce session-based access for protected routes, and attach security headers to the response.
 *
 * @returns A NextResponse that is either:
 * - a 403 JSON response with `{ error: 'Access denied' }` when Arcjet denies the request,
 * - a redirect to `/` for unauthenticated requests to protected routes (paths starting with `/dashboard`),
 * - or a forwarded response (`NextResponse.next()`) with security headers set (`X-Frame-Options`, `X-Content-Type-Options`, `Referrer-Policy`, `Permissions-Policy`).
 */
export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // Only apply protection to sensitive routes to reduce bundle size
  const isProtectedRoute = pathname === '/dashboard' || pathname.startsWith('/dashboard/');
  const isApiRoute = pathname.startsWith('/api/');

  // For API routes, use minimal protection
  if (isApiRoute && !isProtectedRoute) {
    // Add basic security headers without heavy Arcjet protection
    const response = NextResponse.next();
    response.headers.set('X-Content-Type-Options', 'nosniff');
    response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
    return response;
  }

  // For protected routes, we need authentication but can optimize
  if (isProtectedRoute) {
    const sessionCookie = getSessionCookie(request);

    if (!sessionCookie) {
      return NextResponse.redirect(new URL('/', request.url));
    }
  }

  // Add security headers for all responses
  const response = NextResponse.next();
  response.headers.set('X-Frame-Options', 'DENY');
  response.headers.set('X-Content-Type-Options', 'nosniff');
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
  response.headers.set('Permissions-Policy', 'geolocation=(), microphone=(), camera=()');

  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};


================================================
FILE: next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'images.unsplash.com',
      },
      {
        protocol: 'https',
        hostname: 'html.tailus.io',
        pathname: '/blocks/customers/**',
      },
      {
        protocol: 'https',
        hostname: 'ik.imagekit.io',
      },
    ],
    formats: ['image/webp', 'image/avif'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
  },

  // Enable compression
  compress: true,

  // Performance optimizations
  experimental: {
    optimizeCss: true,
    optimizePackageImports: ['lucide-react', '@radix-ui/react-icons'],
  },

  // Comprehensive security headers
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          // Basic security headers
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
          {
            key: 'Permissions-Policy',
            value: 'geolocation=(), microphone=(), camera=(), payment=(), usb=()',
          },
          // Content Security Policy - basic policy
          {
            key: 'Content-Security-Policy',
            value: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https: wss:; frame-ancestors 'none';",
          },
          // Strict Transport Security (only for HTTPS)
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=31536000; includeSubDomains; preload',
          },
        ],
      },
      // API routes - stricter security
      {
        source: '/api/:path*',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
          {
            key: 'Content-Security-Policy',
            value: "default-src 'none'; frame-ancestors 'none';",
          },
        ],
      },
    ];
  },
};

export default nextConfig;



================================================
FILE: package.json
================================================
{
  "type": "module",
  "name": "starterkit",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "build:analyze": "next build --turbopack && npx vite-bundle-analyzer dist",
    "start": "next start",
    "lint": "eslint . --config eslint.config.mjs  src --ext ts,tsx,js,jsx,mjs --report-unused-disable-directives --max-warnings=-1 --no-warn-ignored",
    "lint:fix": "eslint src --ext ts,tsx,js,jsx,mjs --fix ",
    "type-check": "tsc --noEmit",
    "test": "vitest",
    "test:run": "vitest run",
    "test:coverage": "vitest run --coverage",
    "db:studio": "drizzle-kit studio",
    "db:push": "drizzle-kit push",
    "db:migrate": "drizzle-kit migrate",
    "format": "prettier --write 'src/**/*.{js,jsx,ts,tsx,json,css,scss,sql,md,html,mjs}'",
    "analyze": "npx vite-bundle-analyzer .next/static",
    "prepare": "husky"
  },
  "dependencies": {
    "@ai-sdk/openai": "^2.0.42",
    "@ai-sdk/react": "^2.0.60",
    "@arcjet/next": "^1.0.0-beta.12",
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/modifiers": "^9.0.0",
    "@dnd-kit/sortable": "^10.0.0",
    "@dnd-kit/utilities": "^3.2.2",
    "@hookform/resolvers": "^5.2.2",
    "@neondatabase/serverless": "^1.0.2",
    "@openrouter/ai-sdk-provider": "^1.2.0",
    "@polar-sh/better-auth": "^1.1.7",
    "@polar-sh/sdk": "^0.35.4",
    "@radix-ui/react-accordion": "^1.2.12",
    "@radix-ui/react-alert-dialog": "^1.1.15",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.3",
    "@radix-ui/react-collapsible": "^1.1.12",
    "@radix-ui/react-context-menu": "^2.2.16",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-hover-card": "^1.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.16",
    "@radix-ui/react-navigation-menu": "^1.2.14",
    "@radix-ui/react-popover": "^1.1.15",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.8",
    "@radix-ui/react-scroll-area": "^1.2.10",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.6",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.6",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-toggle": "^1.1.10",
    "@radix-ui/react-toggle-group": "^1.1.11",
    "@radix-ui/react-tooltip": "^1.2.8",
    "@radix-ui/react-use-controllable-state": "^1.2.2",
    "@react-email/components": "^0.5.5",
    "@tabler/icons-react": "^3.35.0",
    "@tanstack/react-table": "^8.21.3",
    "@tanstack/react-virtual": "^3.13.12",
    "@types/express-rate-limit": "^5.1.3",
    "@vercel/analytics": "^1.5.0",
    "@vercel/speed-insights": "^1.2.0",
    "ai": "^5.0.60",
    "better-auth": "^1.3.26",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "critters": "^0.0.23",
    "date-fns": "^4.1.0",
    "dotenv": "^17.2.3",
    "drizzle-orm": "^0.44.6",
    "embla-carousel-react": "^8.6.0",
    "express-rate-limit": "^8.1.0",
    "helmet": "^8.1.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.544.0",
    "motion": "^12.23.22",
    "nanoid": "^5.1.6",
    "next": "15.5.4",
    "next-themes": "^0.4.6",
    "react": "19.2.0",
    "react-day-picker": "^9.11.0",
    "react-dom": "19.2.0",
    "react-hook-form": "^7.64.0",
    "react-markdown": "^10.1.0",
    "react-resizable-panels": "^3.0.6",
    "react-syntax-highlighter": "^15.6.6",
    "react-use-measure": "^2.1.7",
    "recharts": "^3.2.1",
    "remark-gfm": "^4.0.1",
    "resend": "^6.1.2",
    "sonner": "^2.0.7",
    "streamdown": "^1.3.0",
    "tailwind-merge": "^3.3.1",
    "tokenlens": "^1.3.1",
    "use-stick-to-bottom": "^1.1.1",
    "vaul": "^1.1.2",
    "winston": "^3.18.3",
    "winston-daily-rotate-file": "^5.0.0",
    "zod": "^4.1.11"
  },
  "devDependencies": {
    "@commitlint/cli": "^20.1.0",
    "@commitlint/config-conventional": "^20.0.0",
    "@commitlint/cz-commitlint": "^20.1.0",
    "@eslint/eslintrc": "^3.3.1",
    "@next/eslint-plugin-next": "^15.5.4",
    "@tailwindcss/postcss": "^4",
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.9.1",
    "@testing-library/react": "^16.3.0",
    "@types/node": "^24",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@typescript-eslint/parser": "^8.45.0",
    "@vitest/coverage-v8": "^3.2.4",
    "aicommits": "^1.11.0",
    "autoprefixer": "^10.4.21",
    "commitizen": "^4.3.1",
    "cz-conventional-changelog": "^3.3.0",
    "drizzle-kit": "^0.31.5",
    "eslint": "^9.37.0",
    "eslint-config-next": "15.5.4",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-playwright": "^2.2.2",
    "eslint-plugin-prettier": "^5.5.4",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^6.1.1",
    "husky": "^9.1.7",
    "jsdom": "^27.0.0",
    "lint-staged": "^16.2.3",
    "postcss": "^8.5.6",
    "prettier": "^3.6.2",
    "prettier-plugin-tailwindcss": "^0.6.14",
    "tailwindcss": "^4.1.14",
    "tw-animate-css": "^1.4.0",
    "typescript": "^5.9.3",
    "typescript-eslint": "^8.45.0",
    "vitest": "^3.2.4"
  },
  "lint-staged": {
    "src/**/*.{js,jsx,ts,tsx}": [
      "npm run format",
      "npm run lint",
      "bash -c tsc --noEmit"
    ]
  },
  "config": {
    "commitizen": {
      "path": "@commitlint/cz-commitlint"
    }
  },
  "optionalDependencies": {
    "@tailwindcss/oxide-linux-x64-gnu": "^4.0.14",
    "lightningcss-linux-x64-gnu": "^1.29"
  }
}



================================================
FILE: postcss.config.mjs
================================================
const config = {
  plugins: {
    "@tailwindcss/postcss": {},
  },
};

export default config;



================================================
FILE: prettier.config.mjs
================================================
// prettier.config.mjs or .prettierrc.mjs

/** 
 * @type {import("prettier").Config} 
 */
const config = {
  arrowParens: 'avoid',
  bracketSameLine: false,
  bracketSpacing: true,
  htmlWhitespaceSensitivity: 'css',
  insertPragma: false,
  jsxSingleQuote: false,
  plugins: ['prettier-plugin-tailwindcss'], // include if using Tailwind CSS
  printWidth: 80,
  proseWrap: 'always',
  quoteProps: 'as-needed',
  requirePragma: false,
  semi: true,
  singleQuote: true,
  tabWidth: 2,
  trailingComma: 'all',
  useTabs: false,
};

export default config;



================================================
FILE: TEST_SUMMARY.md
================================================
# Unit Test Generation Summary

## Overview

Comprehensive unit tests have been generated for all key files in the current git diff (compared to `main` branch). The tests follow the project's existing testing patterns using Vitest, @testing-library/react, and other established testing tools.

## Test Coverage Summary

### New Test Files Created

| Source File | Test File | Test Count | Lines |
|------------|-----------|------------|-------|
| `src/lib/logger.ts` | `unit-tests/lib/logger.test.ts` | 46 tests | 565 lines |
| `src/lib/rate-limit.ts` | `unit-tests/lib/rate-limit.test.ts` | 24 tests | 497 lines |
| `src/hooks/use-performance.ts` | `unit-tests/hooks/use-performance.test.ts` | 19 tests | 537 lines |
| `middleware.ts` | `unit-tests/middleware.test.ts` | Multiple | 344 lines |
| `next.config.ts` | `unit-tests/next.config.test.ts` | Multiple | 205 lines |
| `public/sw.js` | `unit-tests/sw.test.ts` | Multiple | 210 lines |
| `src/lib/arcjet.ts` | `unit-tests/lib/arcjet.test.ts` | 8 tests | 107 lines |

#### Total: 163+ test cases across 7 new test files

## Test Categories

### 1. Logger Tests (`logger.test.ts`)

**Test Coverage:**
- ✅ Debug, Info, Warn, Error logging levels
- ✅ Environment-based behavior (development vs production)
- ✅ Sensitive data sanitization (passwords, tokens, API keys, etc.)
- ✅ Nested object sanitization
- ✅ Array size limiting
- ✅ String truncation for long values
- ✅ Security event logging
- ✅ Authentication event logging
- ✅ API access logging
- ✅ Convenience function wrappers
- ✅ Edge cases (null, undefined, circular references)
- ✅ Performance testing (high-frequency logging)

**Key Features Tested:**
- Redaction of 15+ sensitive field patterns
- Case-insensitive field matching
- Recursive sanitization (max depth 3)
- Context preservation while protecting sensitive data
- Stack trace inclusion based on environment
- Timestamp formatting (ISO 8601)

### 2. Rate Limiting Tests (`rate-limit.test.ts`)

**Test Coverage:**
- ✅ Request counting and limiting
- ✅ Rate limit header inclusion
- ✅ Window expiration and reset
- ✅ IP address extraction (x-forwarded-for, x-real-ip)
- ✅ Multiple IP handling
- ✅ Anonymous request handling
- ✅ Pre-configured limiters (API, Auth, Chat)
- ✅ Concurrent request handling
- ✅ Response body structure
- ✅ Retry-After calculation
- ✅ Edge cases (very short windows, high limits, limit of 1)

**Pre-configured Rate Limiters Tested:**
- `apiRateLimit`: 100 requests/minute
- `authRateLimit`: 5 requests/15 minutes
- `chatRateLimit`: 20 requests/minute

### 3. Performance Hook Tests (`use-performance.test.ts`)

**Test Coverage:**
- ✅ LCP (Largest Contentful Paint) collection
- ✅ FCP (First Contentful Paint) collection
- ✅ TTFB (Time to First Byte) calculation
- ✅ Load time calculation
- ✅ Performance rating system
- ✅ Analytics integration (gtag)
- ✅ Loading state management
- ✅ Missing metrics handling
- ✅ Boundary value testing
- ✅ Zero value handling

**Web Vitals Thresholds Tested:**
- **LCP**: Good (≤2500ms), Needs Improvement (≤4000ms), Poor (>4000ms)
- **FCP**: Good (≤1800ms), Needs Improvement (≤3000ms), Poor (>3000ms)
- **TTFB**: Good (≤800ms), Needs Improvement (≤1800ms), Poor (>1800ms)

### 4. Middleware Tests (`middleware.test.ts`)

**Test Coverage:**
- ✅ Arcjet security protection
- ✅ Request blocking (403 responses)
- ✅ Protected route authentication
- ✅ Session cookie validation
- ✅ Dashboard route protection
- ✅ Public route access
- ✅ Security headers application
- ✅ Middleware execution order
- ✅ Edge cases (empty paths, trailing slashes, long paths)
- ✅ Error handling

**Security Headers Verified:**
- X-Frame-Options: DENY
- X-Content-Type-Options: nosniff
- Referrer-Policy: strict-origin-when-cross-origin
- Permissions-Policy: geolocation=(), microphone=(), camera=()

### 5. Next.js Configuration Tests (`next.config.test.ts`)

**Test Coverage:**
- ✅ Image configuration (remote patterns, formats, sizes)
- ✅ Compression settings
- ✅ Experimental features
- ✅ Security headers configuration
- ✅ CSP (Content Security Policy) rules
- ✅ HSTS configuration
- ✅ API route security headers
- ✅ Configuration structure validation

**Image Hosts Validated:**
- images.unsplash.com
- html.tailus.io
- ik.imagekit.io

### 6. Service Worker Tests (`sw.test.ts`)

**Test Coverage:**
- ✅ Cache name and versioning
- ✅ Static assets definition
- ✅ Install event handling
- ✅ Activate event handling
- ✅ Fetch event handling
- ✅ Cache management operations
- ✅ Network handling strategies
- ✅ Error handling
- ✅ Logging functionality
- ✅ Best practices compliance

### 7. Arcjet Tests (`arcjet.test.ts`)

**Test Coverage:**
- ✅ Environment variable validation
- ✅ Initialization with valid keys
- ✅ Error handling for missing keys
- ✅ Default export verification
- ✅ Multiple key format support
- ✅ Configuration validation

## Testing Frameworks & Tools

- **Vitest**: Main testing framework (configured in `vitest.config.ts`)
- **@testing-library/react**: For React component and hook testing
- **@testing-library/jest-dom**: DOM matchers
- **vi (Vitest mocking)**: For mocking dependencies
- **jsdom**: DOM environment for Node.js

## Test Execution

### Run all tests:
```bash
npm run test
```

### Run tests once (CI mode):
```bash
npm run test:run
```

### Run with coverage:
```bash
npm run test:coverage
```

## Key Testing Patterns

### 1. Proper Setup/Teardown
```typescript
beforeEach(() => {
  // Mock setup
})

afterEach(() => {
  vi.restoreAllMocks()
})
```

### 2. Comprehensive Mocking
- Environment variables
- External dependencies (Arcjet, better-auth)
- Browser APIs (Performance, Window)
- Console methods

### 3. Edge Case Coverage
- Null/undefined inputs
- Empty values
- Boundary conditions
- Error states
- Performance considerations

### 4. Security Testing
- Sensitive data redaction
- Security header verification
- Rate limiting behavior
- Authentication flows
- Error message safety

## Files NOT Tested (Rationale)

The following files from the diff were intentionally not tested with unit tests:

### Configuration Files
- `.env.example` - Environment template, no logic
- `.gitignore` - Git configuration
- `package.json`, `package-lock.json` - Dependency manifests
- `.kilocode/mcp.json` - Tool configuration

### Build Outputs
- `build.log` - Generated build output

### UI Components
- `src/app/layout.tsx` - React component (requires integration tests)
- `src/app/page.tsx` - React component
- `src/components/*.tsx` - UI components (better suited for integration/E2E tests)
- `src/app/globals.css` - Styling

### API Routes
- `src/app/api/chat/route.ts` - API endpoint (requires integration tests)
- `src/app/api/user/api-keys/route.ts` - API endpoint

**Note**: UI components and API routes are better tested with integration tests or E2E tests using tools like Playwright. These test pure business logic and utility functions.

## Test Quality Metrics

### Coverage Highlights:
- **Logger**: 46 test cases covering all logging levels, sanitization, and edge cases
- **Rate Limiter**: 24 test cases covering limits, resets, and multiple scenarios
- **Performance Hook**: 19 test cases covering all Web Vitals metrics
- **Middleware**: Comprehensive security and routing tests
- **Configuration**: Validation of all security headers and settings

### Test Characteristics:
- ✅ Clear, descriptive test names
- ✅ Isolated test cases (no interdependencies)
- ✅ Proper mocking of external dependencies
- ✅ Both positive and negative test cases
- ✅ Edge case coverage
- ✅ Performance considerations
- ✅ Security validation

## Running the Tests

All tests can be executed using the project's existing test commands:

```bash
# Run all tests in watch mode
npm run test

# Run tests once (for CI)
npm run test:run

# Run tests with coverage report
npm run test:coverage
```

## Maintenance Notes

1. **Update tests when**:
   - Changing sensitive field patterns in logger
   - Modifying rate limit configurations
   - Adjusting security headers
   - Updating Web Vitals thresholds

2. **Add new tests for**:
   - New utility functions
   - New security features
   - New performance metrics
   - New configuration options

3. **Mock updates**:
   - Keep mocks in sync with actual API changes
   - Update environment variable mocks as needed
   - Maintain browser API mocks for new features

## Summary

This test suite provides comprehensive coverage of the core utility functions, security features, and configuration files added in this branch. The tests follow established patterns, include proper documentation, and cover happy paths, edge cases, and error conditions.

**Total Impact:**
- 163+ new test cases
- 7 new test files
- ~2,465 lines of test code
- Coverage of critical security, logging, and performance features

All tests are designed to be maintainable, readable, and provide genuine value in preventing regressions and validating expected behavior.


================================================
FILE: TESTING_GUIDE.md
================================================
# Quick Testing Guide

## Test Structure

All unit tests are located in the `unit-tests/` directory.

## Running Tests

- `npm run test` - Run all tests in watch mode
- `npm run test:run` - Run tests once (CI mode)
- `npm run test:coverage` - Run with coverage report

## Key Patterns

1. Use proper setup/teardown with beforeEach/afterEach
2. Mock external dependencies with vi.mock()
3. Test edge cases and error conditions
4. Follow AAA pattern: Arrange, Act, Assert

## Resources

- Vitest: <https://vitest.dev/>
- Testing Library: <https://testing-library.com/>


================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": [
    "node_modules",
    ".next",
    "dist",
    "build",
    "src/components/ui/*",
    "src/components/ai-elements/*"
  ]
}



================================================
FILE: vitest.config.ts
================================================
import { defineConfig } from 'vitest/config'
import path from 'path'

export default defineConfig({
  test: {
    environment: 'jsdom',
    setupFiles: ['./unit-tests/setup.ts'],
    globals: true,
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
})


================================================
FILE: .env.example
================================================
BETTER_AUTH_SECRET=your-better-auth-secret
# Base URL of your app
BETTER_AUTH_URL=http://localhost:3000

DATABASE_URL='GET-ONE-FROM-NEON-PROJECT-DASHBOARD'

GOOGLE_CLIENT_ID="gcid"
GOOGLE_CLIENT_SECRET="gcsecret"

POLAR_ACCESS_TOKEN=XXX
POLAR_SUCCESS_URL=https://my-app.com/success?checkout_id={CHECKOUT_ID}
POLAR_WEBHOOK_SECRET=polar_wh_sec_XXX

POLAR_PRODUCT_FREE='polar-free-plan-product-id'
POLAR_PRODUCT_PRO='polar-pro-plan-product-id'
POLAR_PRODUCT_STARTUP='polar-startup-plan-product-id'

RESEND_API_KEY='my-resend-api-key'
RESEND_SENDER_EMAIL='Resend sender email id goes here'

OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

ENCRYPTION_KEY=your-32-byte-encryption-key-here

ARCJET_KEY=ajkey_your-arcjet-key-here



================================================
FILE: .prettierignore
================================================
next/
package-lock.json


================================================
FILE: public/sw.js
================================================
// Basic Service Worker for caching static assets
/* eslint-disable no-undef */
const CACHE_NAME = 'nextjs-starterkit-v1';
const STATIC_ASSETS = [
  '/',
  '/favicon.ico',
  '/static/css/',
  '/static/js/',
  '/static/media/',
];

// Install event - cache static assets
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('Service Worker: Caching static assets');
      return cache.addAll(STATIC_ASSETS);
    })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('Service Worker: Deleting old cache', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

// Fetch event - serve from cache, fallback to network
self.addEventListener('fetch', (event) => {
  // Only handle GET requests
  if (event.request.method !== 'GET') return;

  // Skip cross-origin requests
  if (!event.request.url.startsWith(self.location.origin)) return;

  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      if (cachedResponse) {
        // Serve from cache
        return cachedResponse;
      }

      // Fetch from network
      return fetch(event.request).then((response) => {
        // Don't cache non-successful responses
        if (!response || response.status !== 200 || response.type !== 'basic') {
          return response;
        }

        // Clone the response before caching
        const responseToCache = response.clone();

        caches.open(CACHE_NAME).then((cache) => {
          cache.put(event.request, responseToCache);
        });

        return response;
      });
    })
  );
});


================================================
FILE: server/users.ts
================================================
'use server';
import { auth } from '@/lib/auth';
import { headers } from 'next/headers';

export const signIn = async (email: string, password: string) => {
  try {
    const headersList = await headers();

    const res = await auth.api.signInEmail({
      body: {
        email,
        password,
      },
      asResponse: true,
      headers: headersList,
    });

    if (res.status === 200) {
      return {
        success: true,
        message: 'Sign In Successful',
      };
    } else {
      return {
        success: false,
        message: 'Invalid email or password',
      };
    }
  } catch (error) {
    console.error('Sign in error:', error);
    const e = error as Error;
    return {
      success: false,
      message: e.message || 'An unknown error occurred.',
    };
  }
};

export const signUp = async (
  username: string,
  email: string,
  password: string,
) => {
  try {
    const headersList = await headers();

    const res = await auth.api.signUpEmail({
      body: {
        name: username,
        email,
        password,
      },
      asResponse: true,
      headers: headersList,
    });

    if (res.status === 200 || res.status === 201) {
      return {
        success: true,
        message: 'Sign Up Successful',
      };
    } else {
      const errorData = await res.json().catch(() => ({}));
      console.log('Signup response:', res.status, errorData);

      return {
        success: false,
        message: errorData.message || 'Failed to create account',
      };
    }
  } catch (error) {
    console.error('Sign up error:', error);
    const e = error as Error;
    return {
      success: false,
      message: e.message || 'An unknown error occurred.',
    };
  }
};



================================================
FILE: src/app/globals.css
================================================
@import 'tailwindcss';

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);

  /* Navigation & Interactive Elements */
  --nav-hover: oklch(from var(--accent) calc(l + 0.05) c h);
  --nav-active: oklch(from var(--accent) calc(l + 0.1) c h);
  --interactive-hover: oklch(from var(--muted) calc(l + 0.03) c h);

  /* Form Components */
  --input-hover: oklch(from var(--input) calc(l + 0.02) c h);
  --input-focus: var(--ring);
  --input-error: oklch(0.577 0.245 27.325);
  --input-success: oklch(0.546 0.168 142.496);

  /* Content Components */
  --card-hover: oklch(from var(--card) calc(l + 0.02) c h);
  --table-row-hover: oklch(from var(--muted) calc(l + 0.02) c h);
  --popover-border: var(--border);

  /* AI Chat Components */
  --message-user-bg: var(--primary);
  --message-user-fg: var(--primary-foreground);
  --message-assistant-bg: oklch(from var(--muted) calc(l + 0.05) c h);
  --message-assistant-fg: var(--foreground);
  --code-block-bg: oklch(from var(--muted) calc(l + 0.02) c h);

  /* Status & Feedback */
  --status-success: oklch(0.7 0.15 142);
  --status-success-fg: oklch(0.1 0 0);
  --status-warning: oklch(0.8 0.15 85);
  --status-warning-fg: oklch(0.1 0 0);
  --status-error: var(--destructive);
  --status-error-fg: oklch(0.985 0 0);
  --status-info: oklch(0.6 0.15 240);
  --status-info-fg: oklch(0.1 0 0);

  /* Specialized Components */
  --calendar-day-hover: oklch(from var(--muted) calc(l + 0.03) c h);
  --calendar-day-selected: var(--primary);
  --calendar-day-selected-fg: var(--primary-foreground);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);

  /* Navigation & Interactive Elements */
  --nav-hover: oklch(from var(--accent) calc(l + 0.08) c h);
  --nav-active: oklch(from var(--accent) calc(l + 0.15) c h);
  --interactive-hover: oklch(from var(--muted) calc(l + 0.08) c h);

  /* Form Components */
  --input-hover: oklch(from var(--input) calc(l + 0.1) c h);
  --input-focus: var(--ring);
  --input-error: oklch(0.704 0.191 22.216);
  --input-success: oklch(0.6 0.2 142);

  /* Content Components */
  --card-hover: oklch(from var(--card) calc(l + 0.08) c h);
  --table-row-hover: oklch(from var(--muted) calc(l + 0.08) c h);
  --popover-border: oklch(1 0 0 / 15%);

  /* AI Chat Components */
  --message-user-bg: var(--primary);
  --message-user-fg: var(--primary-foreground);
  --message-assistant-bg: oklch(from var(--muted) calc(l + 0.1) c h);
  --message-assistant-fg: var(--foreground);
  --code-block-bg: oklch(from var(--muted) calc(l + 0.08) c h);

  /* Status & Feedback */
  --status-success: oklch(0.65 0.18 142);
  --status-success-fg: oklch(0.95 0 0);
  --status-warning: oklch(0.75 0.18 85);
  --status-warning-fg: oklch(0.95 0 0);
  --status-error: var(--destructive);
  --status-error-fg: oklch(0.95 0 0);
  --status-info: oklch(0.55 0.18 240);
  --status-info-fg: oklch(0.95 0 0);

  /* Specialized Components */
  --calendar-day-hover: oklch(from var(--muted) calc(l + 0.08) c h);
  --calendar-day-selected: var(--primary);
  --calendar-day-selected-fg: var(--primary-foreground);
}

@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  :root {
    --border: oklch(0.4 0 0);
    --ring: oklch(0.4 0 0);
  }

  .dark {
    --border: oklch(0.6 0 0);
    --ring: oklch(0.6 0 0);
  }
}

/* Color blindness accessibility improvements */
@media (prefers-color-scheme: dark) {
  .deuteranopia {
    --chart-1: oklch(0.6 0.15 240);
    --chart-2: oklch(0.5 0.12 300);
    --chart-3: oklch(0.7 0.18 180);
    --chart-4: oklch(0.4 0.1 60);
    --chart-5: oklch(0.8 0.2 120);
  }
}

@media (prefers-color-scheme: light) {
  .deuteranopia {
    --chart-1: oklch(0.5 0.18 240);
    --chart-2: oklch(0.4 0.15 300);
    --chart-3: oklch(0.6 0.2 180);
    --chart-4: oklch(0.3 0.12 60);
    --chart-5: oklch(0.7 0.22 120);
  }
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }

  /* Enhanced focus indicators for better accessibility */
  *:focus-visible {
    outline: 3px solid var(--ring);
    outline-offset: 2px;
  }

  /* Ensure interactive elements have minimum touch target size */
  button,
  a,
  input,
  select,
  textarea,
  [role='button'],
  [tabindex]:not([tabindex='-1']) {
    min-height: 44px;
    min-width: 44px;
  }

  /* Improve hover states for better visual feedback */
  a:hover,
  button:hover,
  [role='button']:hover {
    transform: translateY(-1px);
    transition: transform 0.2s ease-out;
  }
}

.theme-scaled {
  @media (min-width: 1024px) {
    --radius: 0.6rem;
    --text-lg: 1.05rem;
    --text-base: 0.85rem;
    --text-sm: 0.8rem;
    --spacing: 0.222222rem;
  }

  [data-slot='card'] {
    --spacing: 0.16rem;
  }

  [data-slot='select-trigger'],
  [data-slot='toggle-group-item'] {
    --spacing: 0.222222rem;
  }
}

.theme-default,
.theme-default-scaled {
  --primary: var(--color-neutral-600);
  --primary-foreground: var(--color-neutral-50);

  @variant dark {
    --primary: var(--color-neutral-500);
    --primary-foreground: var(--color-neutral-50);
  }
}

.theme-blue,
.theme-blue-scaled {
  --primary: var(--color-blue-600);
  --primary-foreground: var(--color-blue-50);

  /* Theme-specific overrides */
  --nav-hover: oklch(from var(--color-blue-100) calc(l + 0.05) c h);
  --nav-active: oklch(from var(--color-blue-200) calc(l + 0.1) c h);
  --interactive-hover: oklch(from var(--color-blue-50) calc(l + 0.03) c h);
  --card-hover: oklch(from var(--color-blue-50) calc(l + 0.02) c h);
  --message-assistant-bg: oklch(from var(--color-blue-50) calc(l + 0.05) c h);
  --status-info: var(--color-blue-500);
  --status-info-fg: var(--color-blue-50);

  @variant dark {
    --primary: var(--color-blue-500);
    --primary-foreground: var(--color-blue-50);

    --nav-hover: oklch(from var(--color-blue-900) calc(l + 0.08) c h);
    --nav-active: oklch(from var(--color-blue-800) calc(l + 0.15) c h);
    --interactive-hover: oklch(from var(--color-blue-900) calc(l + 0.08) c h);
    --card-hover: oklch(from var(--color-blue-900) calc(l + 0.08) c h);
    --message-assistant-bg: oklch(from var(--color-blue-900) calc(l + 0.1) c h);
    --status-info: var(--color-blue-400);
    --status-info-fg: var(--color-blue-900);
  }
}

.theme-green,
.theme-green-scaled {
  --primary: var(--color-lime-600);
  --primary-foreground: var(--color-lime-50);

  /* Theme-specific overrides */
  --nav-hover: oklch(from var(--color-lime-100) calc(l + 0.05) c h);
  --nav-active: oklch(from var(--color-lime-200) calc(l + 0.1) c h);
  --interactive-hover: oklch(from var(--color-lime-50) calc(l + 0.03) c h);
  --card-hover: oklch(from var(--color-lime-50) calc(l + 0.02) c h);
  --message-assistant-bg: oklch(from var(--color-lime-50) calc(l + 0.05) c h);
  --status-success: var(--color-lime-500);
  --status-success-fg: var(--color-lime-900);

  @variant dark {
    --primary: var(--color-lime-600);
    --primary-foreground: var(--color-lime-50);

    --nav-hover: oklch(from var(--color-lime-900) calc(l + 0.08) c h);
    --nav-active: oklch(from var(--color-lime-800) calc(l + 0.15) c h);
    --interactive-hover: oklch(from var(--color-lime-900) calc(l + 0.08) c h);
    --card-hover: oklch(from var(--color-lime-900) calc(l + 0.08) c h);
    --message-assistant-bg: oklch(from var(--color-lime-900) calc(l + 0.1) c h);
    --status-success: var(--color-lime-400);
    --status-success-fg: var(--color-lime-900);
  }
}

.theme-amber,
.theme-amber-scaled {
  --primary: var(--color-amber-600);
  --primary-foreground: var(--color-amber-50);

  /* Theme-specific overrides */
  --nav-hover: oklch(from var(--color-amber-100) calc(l + 0.05) c h);
  --nav-active: oklch(from var(--color-amber-200) calc(l + 0.1) c h);
  --interactive-hover: oklch(from var(--color-amber-50) calc(l + 0.03) c h);
  --card-hover: oklch(from var(--color-amber-50) calc(l + 0.02) c h);
  --message-assistant-bg: oklch(from var(--color-amber-50) calc(l + 0.05) c h);
  --status-warning: var(--color-amber-500);
  --status-warning-fg: var(--color-amber-900);

  @variant dark {
    --primary: var(--color-amber-500);
    --primary-foreground: var(--color-amber-50);

    --nav-hover: oklch(from var(--color-amber-900) calc(l + 0.08) c h);
    --nav-active: oklch(from var(--color-amber-800) calc(l + 0.15) c h);
    --interactive-hover: oklch(from var(--color-amber-900) calc(l + 0.08) c h);
    --card-hover: oklch(from var(--color-amber-900) calc(l + 0.08) c h);
    --message-assistant-bg: oklch(
      from var(--color-amber-900) calc(l + 0.1) c h
    );
    --status-warning: var(--color-amber-400);
    --status-warning-fg: var(--color-amber-900);
  }
}

.theme-red,
.theme-red-scaled {
  --primary: var(--color-red-600);
  --primary-foreground: var(--color-red-50);

  /* Theme-specific overrides */
  --nav-hover: oklch(from var(--color-red-100) calc(l + 0.05) c h);
  --nav-active: oklch(from var(--color-red-200) calc(l + 0.1) c h);
  --interactive-hover: oklch(from var(--color-red-50) calc(l + 0.03) c h);
  --card-hover: oklch(from var(--color-red-50) calc(l + 0.02) c h);
  --message-assistant-bg: oklch(from var(--color-red-50) calc(l + 0.05) c h);
  --status-error: var(--color-red-500);
  --status-error-fg: var(--color-red-50);

  @variant dark {
    --primary: var(--color-red-500);
    --primary-foreground: var(--color-red-50);

    --nav-hover: oklch(from var(--color-red-900) calc(l + 0.08) c h);
    --nav-active: oklch(from var(--color-red-800) calc(l + 0.15) c h);
    --interactive-hover: oklch(from var(--color-red-900) calc(l + 0.08) c h);
    --card-hover: oklch(from var(--color-red-900) calc(l + 0.08) c h);
    --message-assistant-bg: oklch(from var(--color-red-900) calc(l + 0.1) c h);
    --status-error: var(--color-red-400);
    --status-error-fg: var(--color-red-900);
  }
}

.theme-purple,
.theme-purple-scaled {
  --primary: var(--color-purple-600);
  --primary-foreground: var(--color-purple-50);

  /* Theme-specific overrides */
  --nav-hover: oklch(from var(--color-purple-100) calc(l + 0.05) c h);
  --nav-active: oklch(from var(--color-purple-200) calc(l + 0.1) c h);
  --interactive-hover: oklch(from var(--color-purple-50) calc(l + 0.03) c h);
  --card-hover: oklch(from var(--color-purple-50) calc(l + 0.02) c h);
  --message-assistant-bg: oklch(from var(--color-purple-50) calc(l + 0.05) c h);

  @variant dark {
    --primary: var(--color-purple-500);
    --primary-foreground: var(--color-purple-50);

    --nav-hover: oklch(from var(--color-purple-900) calc(l + 0.08) c h);
    --nav-active: oklch(from var(--color-purple-800) calc(l + 0.15) c h);
    --interactive-hover: oklch(from var(--color-purple-900) calc(l + 0.08) c h);
    --card-hover: oklch(from var(--color-purple-900) calc(l + 0.08) c h);
    --message-assistant-bg: oklch(
      from var(--color-purple-900) calc(l + 0.1) c h
    );
  }
}

.theme-pink,
.theme-pink-scaled {
  --primary: var(--color-pink-600);
  --primary-foreground: var(--color-pink-50);

  /* Theme-specific overrides */
  --nav-hover: oklch(from var(--color-pink-100) calc(l + 0.05) c h);
  --nav-active: oklch(from var(--color-pink-200) calc(l + 0.1) c h);
  --interactive-hover: oklch(from var(--color-pink-50) calc(l + 0.03) c h);
  --card-hover: oklch(from var(--color-pink-50) calc(l + 0.02) c h);
  --message-assistant-bg: oklch(from var(--color-pink-50) calc(l + 0.05) c h);

  @variant dark {
    --primary: var(--color-pink-500);
    --primary-foreground: var(--color-pink-50);

    --nav-hover: oklch(from var(--color-pink-900) calc(l + 0.08) c h);
    --nav-active: oklch(from var(--color-pink-800) calc(l + 0.15) c h);
    --interactive-hover: oklch(from var(--color-pink-900) calc(l + 0.08) c h);
    --card-hover: oklch(from var(--color-pink-900) calc(l + 0.08) c h);
    --message-assistant-bg: oklch(from var(--color-pink-900) calc(l + 0.1) c h);
  }
}

.theme-violet,
.theme-violet-scaled {
  --primary: var(--color-violet-600);
  --primary-foreground: var(--color-violet-50);

  /* Theme-specific overrides */
  --nav-hover: oklch(from var(--color-violet-100) calc(l + 0.05) c h);
  --nav-active: oklch(from var(--color-violet-200) calc(l + 0.1) c h);
  --interactive-hover: oklch(from var(--color-violet-50) calc(l + 0.03) c h);
  --card-hover: oklch(from var(--color-violet-50) calc(l + 0.02) c h);
  --message-assistant-bg: oklch(from var(--color-violet-50) calc(l + 0.05) c h);

  @variant dark {
    --primary: var(--color-violet-500);
    --primary-foreground: var(--color-violet-50);

    --nav-hover: oklch(from var(--color-violet-900) calc(l + 0.08) c h);
    --nav-active: oklch(from var(--color-violet-800) calc(l + 0.15) c h);
    --interactive-hover: oklch(from var(--color-violet-900) calc(l + 0.08) c h);
    --card-hover: oklch(from var(--color-violet-900) calc(l + 0.08) c h);
    --message-assistant-bg: oklch(
      from var(--color-violet-900) calc(l + 0.1) c h
    );
  }
}

.theme-indigo,
.theme-indigo-scaled {
  --primary: var(--color-indigo-600);
  --primary-foreground: var(--color-indigo-50);

  /* Theme-specific overrides */
  --nav-hover: oklch(from var(--color-indigo-100) calc(l + 0.05) c h);
  --nav-active: oklch(from var(--color-indigo-200) calc(l + 0.1) c h);
  --interactive-hover: oklch(from var(--color-indigo-50) calc(l + 0.03) c h);
  --card-hover: oklch(from var(--color-indigo-50) calc(l + 0.02) c h);
  --message-assistant-bg: oklch(from var(--color-indigo-50) calc(l + 0.05) c h);

  @variant dark {
    --primary: var(--color-indigo-500);
    --primary-foreground: var(--color-indigo-50);

    --nav-hover: oklch(from var(--color-indigo-900) calc(l + 0.08) c h);
    --nav-active: oklch(from var(--color-indigo-800) calc(l + 0.15) c h);
    --interactive-hover: oklch(from var(--color-indigo-900) calc(l + 0.08) c h);
    --card-hover: oklch(from var(--color-indigo-900) calc(l + 0.08) c h);
    --message-assistant-bg: oklch(
      from var(--color-indigo-900) calc(l + 0.1) c h
    );
  }
}

.theme-emerald,
.theme-emerald-scaled {
  --primary: var(--color-emerald-600);
  --primary-foreground: var(--color-emerald-50);

  /* Theme-specific overrides */
  --nav-hover: oklch(from var(--color-emerald-100) calc(l + 0.05) c h);
  --nav-active: oklch(from var(--color-emerald-200) calc(l + 0.1) c h);
  --interactive-hover: oklch(from var(--color-emerald-50) calc(l + 0.03) c h);
  --card-hover: oklch(from var(--color-emerald-50) calc(l + 0.02) c h);
  --message-assistant-bg: oklch(
    from var(--color-emerald-50) calc(l + 0.05) c h
  );
  --status-success: var(--color-emerald-500);
  --status-success-fg: var(--color-emerald-900);

  @variant dark {
    --primary: var(--color-emerald-500);
    --primary-foreground: var(--color-emerald-50);

    --nav-hover: oklch(from var(--color-emerald-900) calc(l + 0.08) c h);
    --nav-active: oklch(from var(--color-emerald-800) calc(l + 0.15) c h);
    --interactive-hover: oklch(
      from var(--color-emerald-900) calc(l + 0.08) c h
    );
    --card-hover: oklch(from var(--color-emerald-900) calc(l + 0.08) c h);
    --message-assistant-bg: oklch(
      from var(--color-emerald-900) calc(l + 0.1) c h
    );
    --status-success: var(--color-emerald-400);
    --status-success-fg: var(--color-emerald-900);
  }
}

.theme-mono,
.theme-mono-scaled {
  --font-sans: var(--font-mono);
  --primary: var(--color-neutral-600);
  --primary-foreground: var(--color-neutral-50);

  /* Theme-specific overrides */
  --nav-hover: oklch(from var(--color-neutral-100) calc(l + 0.05) c h);
  --nav-active: oklch(from var(--color-neutral-200) calc(l + 0.1) c h);
  --interactive-hover: oklch(from var(--color-neutral-50) calc(l + 0.03) c h);
  --card-hover: oklch(from var(--color-neutral-50) calc(l + 0.02) c h);
  --message-assistant-bg: oklch(
    from var(--color-neutral-50) calc(l + 0.05) c h
  );

  @variant dark {
    --primary: var(--color-neutral-500);
    --primary-foreground: var(--color-neutral-50);

    --nav-hover: oklch(from var(--color-neutral-900) calc(l + 0.08) c h);
    --nav-active: oklch(from var(--color-neutral-800) calc(l + 0.15) c h);
    --interactive-hover: oklch(
      from var(--color-neutral-900) calc(l + 0.08) c h
    );
    --card-hover: oklch(from var(--color-neutral-900) calc(l + 0.08) c h);
    --message-assistant-bg: oklch(
      from var(--color-neutral-900) calc(l + 0.1) c h
    );
  }

  .rounded-xs,
  .rounded-sm,
  .rounded-md,
  .rounded-lg,
  .rounded-xl {
    @apply !rounded-none;
    border-radius: 0;
  }

  .shadow-xs,
  .shadow-sm,
  .shadow-md,
  .shadow-lg,
  .shadow-xl {
    @apply !shadow-none;
  }

  [data-slot='toggle-group'],
  [data-slot='toggle-group-item'] {
    @apply !rounded-none !shadow-none;
  }
}

/* Home Page Independent Styling - Not affected by theme selection */
@layer base {
  .home-page-wrapper[data-theme='light'] {
    /* Force light mode colors with proper contrast */
    --background: oklch(0.99 0 0);
    --foreground: oklch(0.09 0 0);
    --card: oklch(0.98 0 0);
    --card-foreground: oklch(0.09 0 0);
    --popover: oklch(0.99 0 0);
    --popover-foreground: oklch(0.09 0 0);
    --primary: oklch(0.15 0 0);
    --primary-foreground: oklch(0.99 0 0);
    --secondary: oklch(0.95 0 0);
    --secondary-foreground: oklch(0.09 0 0);
    --muted: oklch(0.96 0 0);
    --muted-foreground: oklch(0.45 0 0);
    --accent: oklch(0.95 0 0);
    --accent-foreground: oklch(0.09 0 0);
    --destructive: oklch(0.577 0.245 27.325);
    --border: oklch(0.88 0 0);
    --input: oklch(0.88 0 0);
    --ring: oklch(0.65 0 0);

    /* Navigation & Interactive Elements */
    --nav-hover: oklch(0.92 0 0);
    --nav-active: oklch(0.88 0 0);
    --interactive-hover: oklch(0.93 0 0);

    /* Form Components */
    --input-hover: oklch(0.85 0 0);
    --input-focus: oklch(0.65 0 0);

    /* Content Components - Improved visibility */
    --card-hover: oklch(0.96 0 0);
    --table-row-hover: oklch(0.94 0 0);

    /* Status colors for light mode */
    --status-success: oklch(0.5 0.15 142);
    --status-success-fg: oklch(0.99 0 0);
    --status-warning: oklch(0.6 0.15 85);
    --status-warning-fg: oklch(0.09 0 0);
    --status-error: oklch(0.5 0.2 27);
    --status-error-fg: oklch(0.99 0 0);
    --status-info: oklch(0.45 0.15 240);
    --status-info-fg: oklch(0.99 0 0);

    /* Header specific overrides for light mode */
    --header-bg: oklch(0.99 0 0 / 0.95);
    --header-border: oklch(0.88 0 0);
    --header-text: oklch(0.09 0 0);
    --header-text-muted: oklch(0.45 0 0);
  }

  /* Enhanced card and border visibility in light mode */
  .home-page-wrapper[data-theme='light'] [class*='bg-card/'],
  .home-page-wrapper[data-theme='light'] [class*='border-border/'] {
    --tw-bg-opacity: 0.7;
    --tw-border-opacity: 0.8;
  }

  /* Ensure text has proper contrast in light mode */
  .home-page-wrapper[data-theme='light'] h1,
  .home-page-wrapper[data-theme='light'] h2,
  .home-page-wrapper[data-theme='light'] h3,
  .home-page-wrapper[data-theme='light'] h4,
  .home-page-wrapper[data-theme='light'] h5,
  .home-page-wrapper[data-theme='light'] h6 {
    color: oklch(0.09 0 0);
  }

  /* Improve link visibility in light mode */
  .home-page-wrapper[data-theme='light'] a {
    color: oklch(0.15 0 0);
  }

  .home-page-wrapper[data-theme='light'] a:hover {
    color: oklch(0.09 0 0);
  }

  /* Header visibility fixes for light mode */
  .home-page-wrapper[data-theme='light'] header {
    background-color: var(--header-bg) !important;
    border-color: var(--header-border) !important;
    color: var(--header-text) !important;
  }

  .home-page-wrapper[data-theme='light'] header .text-foreground\/80 {
    color: var(--header-text) !important;
  }

  .home-page-wrapper[data-theme='light'] header .text-muted-foreground {
    color: var(--header-text-muted) !important;
  }

  /* Scrolled header background override */
  .home-page-wrapper[data-theme='light'] .bg-background\/50 {
    background-color: var(--header-bg) !important;
  }

  /* Link text visibility in header */
  .home-page-wrapper[data-theme='light'] header a:not(.header-auth-button) {
    color: var(--header-text) !important;
  }

  /* Mode toggle button visibility */
  .home-page-wrapper[data-theme='light'] .bg-background {
    background-color: var(--header-bg) !important;
  }

  .home-page-wrapper[data-theme='dark'] {
    /* Force dark mode colors */
    --background: oklch(0.145 0 0);
    --foreground: oklch(0.985 0 0);
    --card: oklch(0.205 0 0);
    --card-foreground: oklch(0.985 0 0);
    --popover: oklch(0.205 0 0);
    --popover-foreground: oklch(0.985 0 0);
    --primary: oklch(0.922 0 0);
    --primary-foreground: oklch(0.205 0 0);
    --secondary: oklch(0.269 0 0);
    --secondary-foreground: oklch(0.985 0 0);
    --muted: oklch(0.269 0 0);
    --muted-foreground: oklch(0.708 0 0);
    --accent: oklch(0.269 0 0);
    --accent-foreground: oklch(0.985 0 0);
    --destructive: oklch(0.704 0.191 22.216);
    --border: oklch(1 0 0 / 10%);
    --input: oklch(1 0 0 / 15%);
    --ring: oklch(0.556 0 0);

    /* Navigation & Interactive Elements */
    --nav-hover: oklch(from var(--accent) calc(l + 0.08) c h);
    --nav-active: oklch(from var(--accent) calc(l + 0.15) c h);
    --interactive-hover: oklch(from var(--muted) calc(l + 0.08) c h);
  }

  /* Improve card backgrounds in light mode - override opacity */
  .home-page-wrapper[data-theme='light'] .backdrop-blur-sm {
    background-color: oklch(0.98 0 0 / 0.85) !important;
  }

  .home-page-wrapper[data-theme='light'] [class*='bg-card/30'] {
    background-color: oklch(0.98 0 0 / 0.75) !important;
  }

  .home-page-wrapper[data-theme='light'] [class*='border-border/50'] {
    border-color: oklch(0.88 0 0 / 0.85) !important;
  }

  /* Ensure proper contrast for muted text in light mode */
  .home-page-wrapper[data-theme='light'] .text-muted-foreground {
    color: oklch(0.45 0 0) !important;
  }

  /* Fix scrolled header background in light mode */
  .home-page-wrapper[data-theme='light'] .bg-background\/50 {
    background-color: var(--header-bg) !important;
  }

  /* Hero section text contrast improvements */
  .home-page-wrapper[data-theme='light'] .text-balance {
    color: oklch(0.09 0 0) !important;
  }

  /* Button visibility in light mode */
  .home-page-wrapper[data-theme='light'] .bg-card {
    background-color: oklch(0.98 0 0) !important;
    border-color: oklch(0.88 0 0) !important;
  }

  .home-page-wrapper[data-theme='light'] .border-2 {
    border-color: oklch(0.88 0 0) !important;
  }

  /* Logo and brand text visibility */
  .home-page-wrapper[data-theme='light'] .text-foreground {
    color: oklch(0.09 0 0) !important;
  }

  /* High contrast support */
  @media (prefers-contrast: high) {
    .home-page-wrapper[data-theme='light'] {
      --border: oklch(0.4 0 0);
      --ring: oklch(0.4 0 0);
    }

    .home-page-wrapper[data-theme='dark'] {
      --border: oklch(0.6 0 0);
      --ring: oklch(0.6 0 0);
    }
  }
}



================================================
FILE: src/app/layout.tsx
================================================
import type { Metadata } from 'next';
import { Analytics } from '@vercel/analytics/next';
import { SpeedInsights } from '@vercel/speed-insights/next';
import './globals.css';
import { ThemeProvider } from '@/components/theme-provider';
import { Toaster } from '@/components/ui/sonner';
import { ActiveThemeProvider } from '@/components/active-theme';
import { cookies } from 'next/headers';
import { cn } from '@/lib/utils';
import { PerformanceMonitor } from '@/components/performance-monitor';

export const metadata: Metadata = {
  title: 'NextJS Starter Kit',
  description: 'Starter AI Saas Template',
  // Preload critical fonts
  other: {
    'font-preload':
      'https://cdn.jsdelivr.net/npm/geist@1.3.0/dist/fonts/geist-sans/Geist-Sans.woff2',
  },
};

/**
 * App root layout that renders the top-level HTML structure for every page.
 *
 * Reads the `active_theme` cookie to apply theme-related classes to the body, preconnects to CDN/image hosts, preloads a font and a video asset, and registers a service worker on window load. Wraps the application `children` with theme providers and global UI/monitoring components (PerformanceMonitor, Toaster, Analytics, SpeedInsights).
 *
 * @returns The root HTML element containing the document head and body with theme providers and application children.
 */
export default async function RootLayout({
  children,
}: React.PropsWithChildren) {
  const cookieStore = await cookies();
  const activeThemeValue = cookieStore.get('active_theme')?.value;
  const isScaled = activeThemeValue?.endsWith('-scaled');

  return (
    <>
      <html lang="en" suppressHydrationWarning>
        <head>
          <link
            rel="preconnect"
            href="https://cdn.jsdelivr.net"
            crossOrigin="anonymous"
          />
          <link
            rel="preconnect"
            href="https://ik.imagekit.io"
            crossOrigin="anonymous"
          />
          <link
            rel="preload"
            href="https://cdn.jsdelivr.net/npm/geist@1.3.0/dist/fonts/geist-sans/Geist-Sans.woff2"
            as="font"
            type="font/woff2"
            crossOrigin="anonymous"
          />
          <link
            rel="preload"
            href="https://ik.imagekit.io/lrigu76hy/tailark/dna-video.mp4?updatedAt=1745736251477"
            as="video"
            crossOrigin="anonymous"
          />
          <script
            dangerouslySetInnerHTML={{
              __html: `
                if ('serviceWorker' in navigator) {
                  window.addEventListener('load', () => {
                    navigator.serviceWorker.register('/sw.js')
                      .then((registration) => {
                        console.log('Service Worker registered successfully:', registration);
                      })
                      .catch((error) => {
                        console.log('Service Worker registration failed:', error);
                      });
                  });
                }
              `,
            }}
          />
        </head>
        <body
          className={cn(
            'bg-background overscroll-none font-sans antialiased',
            activeThemeValue ? `theme-${activeThemeValue}` : '',
            isScaled ? 'theme-scaled' : '',
          )}
        >
          <ThemeProvider
            attribute="class"
            defaultTheme="dark"
            enableSystem
            disableTransitionOnChange
            enableColorScheme
          >
            <ActiveThemeProvider initialTheme={activeThemeValue}>
              <PerformanceMonitor />
              {children}
              <Toaster />
              <Analytics />
              <SpeedInsights />
            </ActiveThemeProvider>
          </ThemeProvider>
        </body>
      </html>
    </>
  );
}



================================================
FILE: src/app/page.tsx
================================================
import dynamic from 'next/dynamic';
import { HeroHeader } from '@/components/header';
import HeroSection from '@/components/hero-section';
import { HomePageWrapper } from '@/components/home-page-wrapper';

// Lazy load heavy components that don't need to be immediately visible
const Features = dynamic(() => import('@/components/features-4'), {
  loading: () => <div className="bg-muted/20 h-96 animate-pulse" />,
});

const ContentSection = dynamic(() => import('@/components/content-5'), {
  loading: () => <div className="bg-muted/20 h-96 animate-pulse" />,
});

const StatsSection = dynamic(() => import('@/components/stats-2'), {
  loading: () => <div className="bg-muted/20 h-64 animate-pulse" />,
});

const Testimonials = dynamic(() => import('@/components/testimonials'), {
  loading: () => <div className="bg-muted/20 h-96 animate-pulse" />,
});

const Pricing = dynamic(() => import('@/components/pricing'), {
  loading: () => <div className="bg-muted/20 h-96 animate-pulse" />,
});

const FooterSection = dynamic(() => import('@/components/footer'));

/**
 * Renders the landing page composed of header, hero, features, content, stats, testimonials, pricing, and footer sections.
 * The page uses independent styling that adapts to system color scheme but is not affected by user theme selection.
 *
 * @returns The React fragment containing the assembled landing page sections wrapped in HomePageWrapper.
 */
export default function LandingPage() {
  console.log('[DEBUG] Home page component rendering');
  return (
    <HomePageWrapper>
      <HeroHeader />
      <HeroSection />
      <Features />
      <ContentSection />
      <StatsSection />
      <Testimonials />
      <Pricing />
      <FooterSection />
    </HomePageWrapper>
  );
}



================================================
FILE: src/app/(auth)/forgot-password/page.tsx
================================================
import { GalleryVerticalEnd } from 'lucide-react';

import { ForgotPasswordForm } from '@/components/forms/forgot-password-form';

export default function ForgotPasswordPage() {
  return (
    <div className="bg-muted flex min-h-svh flex-col items-center justify-center gap-6 p-6 md:p-10">
      <div className="flex w-full max-w-sm flex-col gap-6">
        <a href="#" className="flex items-center gap-2 self-center font-medium">
          <div className="bg-primary text-primary-foreground flex size-6 items-center justify-center rounded-md">
            <GalleryVerticalEnd className="size-4" />
          </div>
          Starter Kit.
        </a>
        <ForgotPasswordForm />
      </div>
    </div>
  );
}



================================================
FILE: src/app/(auth)/login/page.tsx
================================================
import { GalleryVerticalEnd } from 'lucide-react';

import { LoginForm } from '@/components/forms/login-form';

export default function LoginPage() {
  return (
    <div className="bg-muted flex min-h-svh flex-col items-center justify-center gap-6 p-6 md:p-10">
      <div className="flex w-full max-w-sm flex-col gap-6">
        <a href="#" className="flex items-center gap-2 self-center font-medium">
          <div className="bg-primary text-primary-foreground flex size-6 items-center justify-center rounded-md">
            <GalleryVerticalEnd className="size-4" />
          </div>
          Starter Kit.
        </a>
        <LoginForm />
      </div>
    </div>
  );
}



================================================
FILE: src/app/(auth)/reset-password/page.tsx
================================================
import { GalleryVerticalEnd } from 'lucide-react';

import { ResetPasswordForm } from '@/components/forms/reset-password-form';

export default function ResetPasswordPage() {
  return (
    <div className="bg-muted flex min-h-svh flex-col items-center justify-center gap-6 p-6 md:p-10">
      <div className="flex w-full max-w-sm flex-col gap-6">
        <a href="#" className="flex items-center gap-2 self-center font-medium">
          <div className="bg-primary text-primary-foreground flex size-6 items-center justify-center rounded-md">
            <GalleryVerticalEnd className="size-4" />
          </div>
          Starter Kit.
        </a>
        <ResetPasswordForm />
      </div>
    </div>
  );
}



================================================
FILE: src/app/(auth)/signup/page.tsx
================================================
import { GalleryVerticalEnd } from 'lucide-react';

import { SignUpForm } from '@/components/forms/signup-form';

export default function SignUpPage() {
  return (
    <div className="bg-muted flex min-h-svh flex-col items-center justify-center gap-6 p-6 md:p-10">
      <div className="flex w-full max-w-sm flex-col gap-6">
        <a href="#" className="flex items-center gap-2 self-center font-medium">
          <div className="bg-primary text-primary-foreground flex size-6 items-center justify-center rounded-md">
            <GalleryVerticalEnd className="size-4" />
          </div>
          Starter Kit.
        </a>
        <SignUpForm />
      </div>
    </div>
  );
}



================================================
FILE: src/app/aichat/page.tsx
================================================
'use client';

import { useEffect, useState } from 'react';
import { AppSidebar } from '@/components/app-sidebar';
import { SiteHeader } from '@/components/site-header';
import { SidebarInset, SidebarProvider } from '@/components/ui/sidebar';
import { authClient } from '@/lib/auth-client';
import { useChat } from '@ai-sdk/react';
import { DefaultChatTransport } from 'ai';
import {
  Conversation,
  ConversationContent,
  ConversationEmptyState,
  ConversationScrollButton,
} from '@/components/ai-elements/conversation';
import {
  Message,
  MessageContent,
  MessageAvatar,
} from '@/components/ai-elements/message';
import { Response } from '@/components/ai-elements/response';
import {
  PromptInput,
  PromptInputBody,
  PromptInputTextarea,
  PromptInputToolbar,
  PromptInputTools,
  PromptInputSubmit,
  PromptInputModelSelect,
} from '@/components/ai-elements/prompt-input';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { toast } from 'sonner';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import {
  Key,
  Zap,
  Shield,
  ExternalLink,
  Copy,
  CheckCheck,
  MessageSquare,
  Bot,
} from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

const setupFormSchema = z
  .object({
    provider: z.string().min(1, 'Please select an AI provider'),
    apiKey: z.string().min(1, 'API key is required'),
  })
  .refine(
    data => {
      if (data.provider === 'openai') {
        return /^sk(?:-proj|-svcacct)?-[a-zA-Z0-9_-]{20,}$/.test(data.apiKey);
      } else if (data.provider === 'openrouter') {
        return /^sk-or-v1-[a-f0-9]{64}$/.test(data.apiKey);
      }
      return false;
    },
    {
      message: 'Please enter a valid API key for the selected provider',
      path: ['apiKey'],
    },
  );

type SetupFormValues = z.infer<typeof setupFormSchema>;

interface User {
  id: string;
  name: string;
  email: string;
  image?: string | null | undefined;
}

interface ApiConfig {
  provider: string | null;
  apiKey: string | null;
}

interface Model {
  id: string;
  name: string;
  provider: string;
  contextLength?: number;
  description?: string;
}

export default function AichatPage() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [apiConfig, setApiConfig] = useState<ApiConfig>({
    provider: null,
    apiKey: null,
  });
  const [showSetup, setShowSetup] = useState(false);
  const [selectedModel, setSelectedModel] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [copiedMessageId, setCopiedMessageId] = useState<string | null>(null);
  const [input, setInput] = useState('');
  const [models, setModels] = useState<Model[]>([]);

  const form = useForm<SetupFormValues>({
    resolver: zodResolver(setupFormSchema),
    defaultValues: {
      provider: '',
      apiKey: '',
    },
  });

  const { messages, sendMessage, status, setMessages } = useChat({
    transport: new DefaultChatTransport({
      api: '/api/chat',
      prepareSendMessagesRequest: ({ messages }) => {
        // Convert messages to the format expected by the API
        const payload = {
          messages: messages.map(msg => ({
            role: msg.role,
            content:
              msg.parts?.map(p => (p.type === 'text' ? p.text : '')).join('') ||
              '',
          })),
          model: selectedModel,
        };

        return {
          body: payload,
          headers: { 'Content-Type': 'application/json' },
        };
      },
    }),
  });

  useEffect(() => {
    const checkSession = async () => {
      try {
        const session = await authClient.getSession();
        if (session.data?.user) {
          setUser(session.data.user);
        } else {
          setUser(null);
        }
      } catch (_error) {
        console.error('Session check failed:', _error);
        setUser(null);
      } finally {
        setLoading(false);
      }
    };

    checkSession();
  }, []);

  useEffect(() => {
    if (user) {
      fetchApiConfig();
    }
  }, [user]);

  useEffect(() => {
    if (selectedModel) {
      document.cookie = `selectedModel=${selectedModel}; path=/; max-age=86400`;
    }
  }, [selectedModel]);

  useEffect(() => {
    if (status === 'streaming') {
      toast.info('AI is thinking...', {
        duration: Infinity,
        id: 'ai-responding',
      });
    } else {
      toast.dismiss('ai-responding');
    }
  }, [status]);

  const fetchModels = async () => {
    try {
      const res = await fetch('/api/models');
      if (res.ok) {
        const data = await res.json();
        setModels(data.models || []);

        // Set default model if none selected
        if (!selectedModel && data.models.length > 0) {
          setSelectedModel(data.models[0].id);
        }
      } else {
        toast.error('Failed to load models');
      }
    } catch (_error) {
      console.error('Failed to fetch models:', _error);
      toast.error('Failed to load models');
    }
  };

  const fetchApiConfig = async () => {
    try {
      const res = await fetch('/api/user/api-keys');
      if (res.ok) {
        const data = await res.json();
        setApiConfig(data);
        setShowSetup(!data.apiKey);
        if (data.apiKey) {
          // Fetch available models
          await fetchModels();
        }
      } else {
        setShowSetup(true);
      }
    } catch (_error) {
      console.error('Failed to fetch API config:', _error);
      setShowSetup(true);
    }
  };

  const handleSetupSubmit = async (values: SetupFormValues) => {
    setIsSubmitting(true);
    try {
      const res = await fetch('/api/user/api-keys', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(values),
      });

      if (res.ok) {
        toast.success('AI provider configured successfully!');
        await fetchApiConfig();
        form.reset();
        setShowSetup(false);
      } else {
        const errorData = await res.json().catch(() => ({}));
        toast.error(errorData.message || 'Failed to save API configuration');
      }
    } catch (_error) {
      console.error('Failed to save API config:', _error);
      toast.error('Network error. Please check your connection');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClearChat = () => {
    setMessages([]);
    toast.success('Chat cleared');
  };

  const handleCopyMessage = async (content: string, messageId: string) => {
    try {
      await navigator.clipboard.writeText(content);
      setCopiedMessageId(messageId);
      toast.success('Message copied to clipboard');
      setTimeout(() => setCopiedMessageId(null), 2000);
    } catch {
      toast.error('Failed to copy message');
    }
  };

  const handleSendMessage = (message: { text?: string }) => {
    if (!selectedModel) {
      toast.error('Please select a model first');
      return;
    }
    if (!message.text?.trim()) {
      toast.error('Please enter a message');
      return;
    }
    sendMessage({ text: message.text });
    // Clear input after sending
    setInput('');
  };

  if (loading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="flex flex-col items-center gap-3">
          <div className="border-primary h-8 w-8 animate-spin rounded-full border-4 border-t-transparent" />
          <p className="text-muted-foreground text-sm">Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <SidebarProvider
      style={
        {
          '--sidebar-width': 'calc(var(--spacing) * 72)',
          '--header-height': 'calc(var(--spacing) * 12)',
        } as React.CSSProperties
      }
    >
      <AppSidebar variant="inset" user={user} />
      <SidebarInset>
        <SiteHeader user={user} pageTitle="AI Chat" />
        <div className="flex flex-1 flex-col">
          <div className="@container/main flex flex-1 flex-col gap-2">
            <div className="flex flex-col gap-4 py-4 md:gap-6 md:py-6">
              {showSetup ? (
                <Card className="mx-auto w-full max-w-lg">
                  <CardHeader className="text-center">
                    <div className="bg-primary/10 mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full">
                      <Zap className="text-primary h-8 w-8" />
                    </div>
                    <CardTitle className="text-2xl">Setup AI Chat</CardTitle>
                    <CardDescription className="text-base">
                      Connect your AI provider to start having intelligent
                      conversations. Your API keys are securely encrypted and
                      stored.
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Form {...form}>
                      <form
                        onSubmit={form.handleSubmit(handleSetupSubmit)}
                        className="space-y-6"
                      >
                        <FormField
                          control={form.control}
                          name="provider"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-base font-medium">
                                AI Provider
                              </FormLabel>
                              <FormDescription>
                                Choose your preferred AI service provider
                              </FormDescription>
                              <Select
                                onValueChange={field.onChange}
                                value={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger className="h-12">
                                    <SelectValue placeholder="Select your AI provider" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="openai">
                                    <div className="flex items-center gap-2">
                                      <div className="flex h-6 w-6 items-center justify-center rounded bg-green-100 dark:bg-green-900">
                                        <span className="text-xs font-bold text-green-700 dark:text-green-300">
                                          O
                                        </span>
                                      </div>
                                      OpenAI
                                    </div>
                                  </SelectItem>
                                  <SelectItem value="openrouter">
                                    <div className="flex items-center gap-2">
                                      <div className="flex h-6 w-6 items-center justify-center rounded bg-blue-100 dark:bg-blue-900">
                                        <span className="text-xs font-bold text-blue-700 dark:text-blue-300">
                                          OR
                                        </span>
                                      </div>
                                      OpenRouter
                                    </div>
                                  </SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="apiKey"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="flex items-center gap-2 text-base font-medium">
                                <Key className="h-4 w-4" />
                                API Key
                              </FormLabel>
                              <FormDescription>
                                Your API key is required to access AI services.{' '}
                                <a
                                  href={
                                    form.watch('provider') === 'openai'
                                      ? 'https://platform.openai.com/api-keys'
                                      : 'https://openrouter.ai/keys'
                                  }
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="text-primary inline-flex items-center gap-1 hover:underline"
                                >
                                  Get your key here{' '}
                                  <ExternalLink className="h-3 w-3" />
                                </a>
                              </FormDescription>
                              <FormControl>
                                <Input
                                  type="password"
                                  placeholder="sk-... or sk-or-v1-..."
                                  className="h-12 font-mono text-sm"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <div className="bg-muted/50 rounded-lg p-4">
                          <div className="flex items-start gap-3">
                            <Shield className="text-muted-foreground mt-0.5 h-5 w-5 flex-shrink-0" />
                            <div className="space-y-1">
                              <p className="text-sm font-medium">
                                Security Notice
                              </p>
                              <p className="text-muted-foreground text-xs">
                                Your API key is encrypted and stored securely.
                                We never share your keys with third parties.
                              </p>
                            </div>
                          </div>
                        </div>

                        <Button
                          type="submit"
                          className="h-12 w-full text-base font-medium"
                          disabled={isSubmitting}
                        >
                          {isSubmitting ? (
                            <>
                              <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
                              Setting up...
                            </>
                          ) : (
                            <>
                              <Zap className="mr-2 h-4 w-4" />
                              Connect AI Provider
                            </>
                          )}
                        </Button>
                      </form>
                    </Form>
                  </CardContent>
                </Card>
              ) : (
                <div className="mx-auto w-full max-w-5xl space-y-4 px-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className="bg-primary/10 flex h-10 w-10 items-center justify-center rounded-lg">
                        <MessageSquare className="text-primary h-5 w-5" />
                      </div>
                      <div>
                        <h1 className="text-2xl font-bold">AI Chat</h1>
                        <p className="text-muted-foreground text-sm">
                          {apiConfig.provider === 'openai'
                            ? 'OpenAI'
                            : 'OpenRouter'}{' '}
                          • {selectedModel || 'No model selected'}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setShowSetup(true)}
                      >
                        <Key className="mr-2 h-4 w-4" />
                        Change Provider
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleClearChat}
                        disabled={messages.length === 0}
                      >
                        Clear Chat
                      </Button>
                    </div>
                  </div>

                  <div className="bg-background flex min-h-[calc(100vh-16rem)] flex-col rounded-lg border shadow-sm">
                    <Conversation className="flex-1">
                      <ConversationContent>
                        {messages.length === 0 ? (
                          <ConversationEmptyState
                            icon={<Bot className="h-12 w-12" />}
                            title="Start a conversation"
                            description="Send a message to begin chatting with AI"
                          />
                        ) : (
                          messages.map(message => {
                            const content = message.parts?.length
                              ? message.parts
                                  .map(
                                    (part: { type: string; text?: string }) =>
                                      part.type === 'text' ? part.text : '',
                                  )
                                  .join('')
                              : '';

                            return (
                              <Message key={message.id} from={message.role}>
                                {message.role === 'assistant' ? (
                                  <div className="bg-primary/10 ring-border flex h-8 w-8 items-center justify-center rounded-full ring-1">
                                    <Bot className="text-primary h-5 w-5" />
                                  </div>
                                ) : (
                                  <MessageAvatar
                                    src={
                                      user?.image || '/api/placeholder/32/32'
                                    }
                                    name={user?.name || 'User'}
                                  />
                                )}
                                <MessageContent variant="flat">
                                  <div className="group relative">
                                    {message.role === 'assistant' ? (
                                      <div className="prose prose-sm dark:prose-invert max-w-none">
                                        <ReactMarkdown
                                          remarkPlugins={[remarkGfm]}
                                          components={
                                            {
                                              /* … */
                                            }
                                          }
                                        >
                                          {content}
                                        </ReactMarkdown>
                                      </div>
                                    ) : (
                                      <Response>{content}</Response>
                                    )}
                                    <Button
                                      variant="ghost"
                                      size="icon"
                                      className="absolute -top-2 -right-2 h-7 w-7 opacity-0 transition-opacity group-hover:opacity-100"
                                      onClick={() =>
                                        handleCopyMessage(content, message.id)
                                      }
                                    >
                                      {copiedMessageId === message.id ? (
                                        <CheckCheck className="h-4 w-4 text-green-500" />
                                      ) : (
                                        <Copy className="h-4 w-4" />
                                      )}
                                    </Button>
                                  </div>
                                </MessageContent>
                              </Message>
                            );
                          })
                        )}
                      </ConversationContent>
                      <ConversationScrollButton />
                    </Conversation>

                    <div className="bg-muted/30 border-t p-4">
                      <PromptInput onSubmit={handleSendMessage}>
                        <PromptInputBody>
                          <PromptInputTextarea
                            value={input}
                            onChange={(e: { target: { value: string } }) =>
                              setInput(e.target.value)
                            }
                            placeholder="Type your message..."
                            disabled={status === 'streaming' || !selectedModel}
                          />
                          <PromptInputToolbar>
                            <PromptInputTools>
                              <PromptInputModelSelect
                                value={selectedModel}
                                onValueChange={setSelectedModel}
                                models={models}
                                placeholder="Select model"
                              />
                            </PromptInputTools>
                            <PromptInputSubmit status={status} />
                          </PromptInputToolbar>
                        </PromptInputBody>
                      </PromptInput>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </SidebarInset>
    </SidebarProvider>
  );
}



================================================
FILE: src/app/api/auth/[...all]/route.ts
================================================
import { auth } from '@/lib/auth'; // path to your auth file
import { toNextJsHandler } from 'better-auth/next-js';

export const { POST, GET } = toNextJsHandler(auth);



================================================
FILE: src/app/api/chat/route.ts
================================================
import { auth } from '@/lib/auth';
import { db } from '@/db/drizzle';
import { user } from '@/db/schema';
import { eq } from 'drizzle-orm';
import { decrypt } from '@/lib/crypto';
import { streamText } from 'ai';
import { createOpenAI } from '@ai-sdk/openai';
import { createOpenRouter } from '@openrouter/ai-sdk-provider';
import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { z } from 'zod';
import { logApiRequest, logError } from '@/lib/logger';
import { aj } from '@/lib/arcjet';

// Zod schema for validating chat requests
const chatRequestSchema = z.object({
  messages: z
    .array(
      z
        .object({
          role: z.enum(['user', 'assistant', 'system']),
          content: z.string().trim().min(1).max(50000).optional(),
          text: z.string().trim().min(1).max(50000).optional(),
        })
        .refine(
          data =>
            (data.content && data.content.trim().length > 0) ||
            (data.text && data.text.trim().length > 0),
          {
            message: 'Either content or text is required',
            path: ['content'],
          },
        ),
    )
    .min(1)
    .max(100), // 1-100 messages
  model: z.string().optional(),
});

/**
 * Handle POST /api/chat: authenticate the requester, validate and normalize the chat payload, select the user's AI provider and model, and stream the model-generated messages back to the client.
 *
 * @returns An HTTP Response containing a streaming AI-generated message stream on success, or a JSON error payload with an appropriate status code on failure.
 */
export async function POST(request: Request) {
  // Get client IP for logging and Arcjet
  const clientIP =
    request.headers.get('x-forwarded-for')?.split(',')[0] ||
    request.headers.get('x-real-ip') ||
    'unknown';

  try {
    // Apply Arcjet protection to chat API requests
    const decision = await aj.protect(request);
    if (decision.isDenied()) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 });
    }

    // Log API access
    logApiRequest('POST', '/api/chat', {
      ip: clientIP,
      userAgent: request.headers.get('user-agent') || 'unknown',
    });

    const session = await auth.api.getSession({
      headers: request.headers,
    });
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const userData = await db
      .select()
      .from(user)
      .where(eq(user.id, session.user.id))
      .limit(1);
    if (!userData.length) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    const u = userData[0];
    if (!u.apiKeys || !u.provider) {
      return NextResponse.json(
        { error: 'API key not configured' },
        { status: 400 },
      );
    }

    let apiKey: string;
    try {
      apiKey = decrypt(u.apiKeys);
    } catch (error) {
      console.error('Failed to decrypt API key:', error);
      return NextResponse.json(
        { error: 'Failed to decrypt API key' },
        { status: 500 },
      );
    }

    let requestBody;
    try {
      requestBody = await request.json();
    } catch {
      return NextResponse.json(
        { error: 'Invalid JSON in request body' },
        { status: 400 },
      );
    }

    // Validate request body with Zod
    const validationResult = chatRequestSchema.safeParse(requestBody);
    if (!validationResult.success) {
      return NextResponse.json(
        {
          error: 'Invalid request format',
          details: validationResult.error.issues.map(issue => ({
            field: issue.path.join('.'),
            message: issue.message,
          })),
        },
        { status: 400 },
      );
    }

    const { messages, model: requestedModel } = validationResult.data;

    // Use model from request body, fallback to cookie, then default
    let modelToUse = requestedModel;
    if (!modelToUse) {
      const cookieStore = await cookies();
      modelToUse = cookieStore.get('selectedModel')?.value || undefined;
    }
    if (!modelToUse) {
      modelToUse =
        u.provider === 'openai' ? 'gpt-4o' : 'anthropic/claude-3.5-sonnet';
    }

    let aiModel;
    if (u.provider === 'openai') {
      const openaiClient = createOpenAI({ apiKey });
      aiModel = openaiClient(modelToUse);
    } else if (u.provider === 'openrouter') {
      const openrouterClient = createOpenRouter({ apiKey });
      aiModel = openrouterClient(modelToUse);
    } else {
      return NextResponse.json(
        { error: 'Unsupported provider' },
        { status: 400 },
      );
    }

    const messagesForModel = messages.map(({ role, content, text }) => ({
      role: role as 'user' | 'assistant' | 'system',
      content: content || text || '',
    }));

    const result = streamText({
      model: aiModel,
      messages: messagesForModel,
    });

    return result.toUIMessageStreamResponse();
  } catch (err) {
    // Secure error handling with proper logging
    const errorMessage = err instanceof Error ? err.message : 'Unknown error';
    logError(
      'Chat API error',
      err instanceof Error ? err : new Error(errorMessage),
      {
        ip: clientIP,
        endpoint: '/api/chat',
        userAgent: request.headers.get('user-agent') || 'unknown',
      },
    );

    return NextResponse.json(
      {
        error: 'An error occurred while processing your request',
        code: 'INTERNAL_ERROR',
      },
      { status: 500 },
    );
  }
}



================================================
FILE: src/app/api/models/route.ts
================================================
import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/db/drizzle';
import { user } from '@/db/schema';
import { eq } from 'drizzle-orm';
import { auth } from '@/lib/auth';
import { decrypt } from '@/lib/crypto';
import { aj } from '@/lib/arcjet';

interface OpenAIModel {
  id: string;
  object: string;
  created: number;
  owned_by: string;
}

interface OpenRouterModel {
  id: string;
  name: string;
  created: number;
  description?: string;
  context_length: number;
  architecture?: {
    modality?: string;
    tokenizer?: string;
    instruct_type?: string;
  };
  pricing: {
    prompt: string;
    completion: string;
    request?: string;
    image?: string;
  };
  top_provider?: {
    max_completion_tokens?: number;
    is_moderated?: boolean;
  };
}

export async function GET(request: NextRequest) {
  try {
    // Apply Arcjet protection to models API requests
    const decision = await aj.protect(request);
    if (decision.isDenied()) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 });
    }

    const session = await auth.api.getSession({
      headers: request.headers,
    });

    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Get user's API configuration
    const [userData] = await db
      .select()
      .from(user)
      .where(eq(user.id, session.user.id))
      .limit(1);

    if (!userData?.provider || !userData?.apiKeys) {
      return NextResponse.json(
        { error: 'No API configuration found' },
        { status: 404 },
      );
    }

    const apiKey = decrypt(userData.apiKeys);

    if (userData.provider === 'openai') {
      // Fetch OpenAI models
      const response = await fetch('https://api.openai.com/v1/models', {
        headers: {
          Authorization: `Bearer ${apiKey}`,
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch OpenAI models');
      }

      const data = await response.json();
      const models = (data.data as OpenAIModel[])
        .filter(model => model.id.includes('gpt'))
        .sort((a, b) => b.created - a.created)
        .map(model => ({
          id: model.id,
          name: model.id
            .split('-')
            .map(part => part.charAt(0).toUpperCase() + part.slice(1))
            .join(' '),
          provider: 'openai',
        }));

      return NextResponse.json({ models });
    } else if (userData.provider === 'openrouter') {
      // Fetch OpenRouter models
      const response = await fetch('https://openrouter.ai/api/v1/models', {
        headers: {
          Authorization: `Bearer ${apiKey}`,
          'HTTP-Referer': request.headers.get('referer') || '',
          'X-Title': 'AI Chat',
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch OpenRouter models');
      }

      const data = await response.json();
      const models = (data.data as OpenRouterModel[])
        .filter(model => {
          // Filter out models that are unavailable or have issues
          const isAvailable =
            model.pricing && parseFloat(model.pricing.prompt) > 0;
          return isAvailable;
        })
        .sort((a, b) => {
          // Sort by popularity/creation date
          return b.created - a.created;
        })
        .map(model => ({
          id: model.id,
          name: model.name,
          provider: 'openrouter',
          contextLength: model.context_length,
          description: model.description,
        }));

      return NextResponse.json({ models });
    }

    return NextResponse.json({ error: 'Invalid provider' }, { status: 400 });
  } catch (error) {
    console.error('Error fetching models:', error);
    return NextResponse.json(
      { error: 'Failed to fetch models' },
      { status: 500 },
    );
  }
}



================================================
FILE: src/app/api/user/api-keys/route.ts
================================================
import { auth } from '@/lib/auth';
import { db } from '@/db/drizzle';
import { user } from '@/db/schema';
import { eq } from 'drizzle-orm';
import { encrypt, decrypt } from '@/lib/crypto';
import { NextResponse } from 'next/server';
import { logApiRequest, logError } from '@/lib/logger';
import { aj } from '@/lib/arcjet';

/**
 * Retrieve the authenticated user's API provider and decrypted API key.
 *
 * On success returns a JSON object containing `provider` and `apiKey` (the decrypted key or `null`).
 * If the request is unauthenticated the response is 401; if the user record is missing the response is 404.
 * If stored key decryption fails, the error is hidden and `apiKey` is returned as `null`.
 * On unexpected errors returns a 500 response with `{ error: 'An error occurred while retrieving API keys', code: 'INTERNAL_ERROR' }`.
 *
 * @returns A JSON response with `{ provider, apiKey }` on success or an error payload and appropriate HTTP status on failure.
 */
export async function GET(request: Request) {
  const clientIP =
    request.headers.get('x-forwarded-for')?.split(',')[0] ||
    request.headers.get('x-real-ip') ||
    'unknown';

  try {
    // Apply Arcjet protection to API key requests
    const decision = await aj.protect(request);
    if (decision.isDenied()) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 });
    }

    // Log API access
    logApiRequest('GET', '/api/user/api-keys', {
      ip: clientIP,
      userAgent: request.headers.get('user-agent') || 'unknown',
    });

    const session = await auth.api.getSession({
      headers: request.headers,
    });
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const userData = await db
      .select()
      .from(user)
      .where(eq(user.id, session.user.id))
      .limit(1);
    if (!userData.length) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    const u = userData[0];
    let apiKey = null;
    if (u.apiKeys) {
      try {
        apiKey = decrypt(u.apiKeys);
      } catch {
        console.error('Failed to decrypt API key for user');
        // Don't expose decryption errors to the client
        apiKey = null;
      }
    }

    return NextResponse.json({
      provider: u.provider,
      apiKey,
    });
  } catch (err) {
    logError(
      'API keys GET error',
      err instanceof Error ? err : new Error(String(err)),
      {
        ip: clientIP,
        endpoint: '/api/user/api-keys',
        userAgent: request.headers.get('user-agent') || 'unknown',
      },
    );

    return NextResponse.json(
      {
        error: 'An error occurred while retrieving API keys',
        code: 'INTERNAL_ERROR',
      },
      { status: 500 },
    );
  }
}

/**
 * Handles POST requests to create, update, or clear a user's API provider and encrypted API key.
 *
 * Accepts a JSON body with `provider` and `apiKey`. If both `provider` and `apiKey` are falsy, the stored provider and API key are cleared. Otherwise the function validates the provider and API key format, encrypts the API key, and persists the provider and encrypted key for the authenticated user.
 *
 * @returns A JSON `NextResponse` with one of the following outcomes:
 * - `{ success: true }` with status `200` on successful create/update/clear.
 * - `{ error: 'Unauthorized' }` with status `401` if the request is not authenticated.
 * - `{ error: 'Missing required fields' }` or provider/key validation errors with status `400` when inputs are invalid.
 * - `{ error: 'An error occurred while updating API keys', code: 'INTERNAL_ERROR' }` with status `500` on unexpected server errors.
 */
export async function POST(request: Request) {
  const clientIP =
    request.headers.get('x-forwarded-for')?.split(',')[0] ||
    request.headers.get('x-real-ip') ||
    'unknown';

  try {
    // Apply Arcjet protection to API key requests
    const decision = await aj.protect(request);
    if (decision.isDenied()) {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 });
    }

    // Log API access
    logApiRequest('POST', '/api/user/api-keys', {
      ip: clientIP,
      userAgent: request.headers.get('user-agent') || 'unknown',
    });

    const session = await auth.api.getSession({
      headers: request.headers,
    });
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { provider, apiKey } = await request.json();

    // Allow clearing keys by sending empty values
    if (!provider && !apiKey) {
      // Clear API keys
      await db
        .update(user)
        .set({
          provider: null,
          apiKeys: null,
        })
        .where(eq(user.id, session.user.id));

      return NextResponse.json({ success: true });
    }

    if (!provider || !apiKey) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 },
      );
    }

    // Validate provider
    if (!['openai', 'openrouter'].includes(provider)) {
      return NextResponse.json(
        { error: 'Invalid provider. Must be "openai" or "openrouter"' },
        { status: 400 },
      );
    }

    // Validate API key format (basic length check)
    if (typeof apiKey !== 'string' || apiKey.length < 20) {
      return NextResponse.json(
        { error: 'Invalid API key format' },
        { status: 400 },
      );
    }

    const encryptedApiKey = encrypt(apiKey);

    await db
      .update(user)
      .set({
        provider,
        apiKeys: encryptedApiKey,
      })
      .where(eq(user.id, session.user.id));

    return NextResponse.json({ success: true });
  } catch (err) {
    logError(
      'API keys POST error',
      err instanceof Error ? err : new Error(String(err)),
      {
        ip: clientIP,
        endpoint: '/api/user/api-keys',
        userAgent: request.headers.get('user-agent') || 'unknown',
      },
    );

    return NextResponse.json(
      {
        error: 'An error occurred while updating API keys',
        code: 'INTERNAL_ERROR',
      },
      { status: 500 },
    );
  }
}



================================================
FILE: src/app/api/webhooks/polar/route.ts
================================================
import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';
import { db } from '@/db/drizzle';
import { subscription } from '@/db/schema';
import { getPlanName } from '@/lib/plan-map';
import { eq } from 'drizzle-orm';

// TypeScript interfaces for webhook data
interface PolarSubscription {
  id: string;
  product_id: string;
  status: string;
  current_period_start?: string | null;
  current_period_end?: string | null;
  cancel_at_period_end?: boolean;
}

interface PolarCustomer {
  id: string;
  email: string;
}

interface WebhookEventData {
  subscription?: PolarSubscription;
  customer?: PolarCustomer;
  [key: string]: unknown;
}

function verifyWebhookSignature(
  body: string,
  signature: string,
  secret: string,
): boolean {
  try {
    // Strip the "v1," prefix and get the base64 signature
    const signatureWithoutPrefix = signature.replace('v1,', '');

    // Decode the base64 signature into a Buffer
    const receivedSignature = Buffer.from(signatureWithoutPrefix, 'base64');

    // Create HMAC using the secret
    const hmac = crypto.createHmac('sha256', secret);

    // Calculate signature over the raw body as bytes
    const computedSignature = hmac.update(body, 'utf8').digest();

    // Compare the signatures using timing-safe comparison
    return crypto.timingSafeEqual(computedSignature, receivedSignature);
  } catch (error) {
    console.error('Error verifying webhook signature:', error);
    return false;
  }
}

async function handleSubscriptionCreated(data: WebhookEventData) {
  try {
    const subscriptionData = data.subscription;
    const customerData = data.customer;

    if (!subscriptionData || !customerData) {
      console.error('Missing subscription or customer data in webhook');
      return;
    }

    const plan = getPlanName(subscriptionData.product_id);

    console.log('Creating subscription for user:', customerData.email);
    console.log('Product ID from webhook:', subscriptionData.product_id);
    console.log('Resolved plan from getPlanName:', plan);

    await db.insert(subscription).values({
      id: subscriptionData.id,
      userId: customerData.id, // Assuming customer.id maps to user.id
      polarSubscriptionId: subscriptionData.id,
      polarCustomerId: customerData.id,
      status: subscriptionData.status,
      plan: plan,
      currentPeriodStart: subscriptionData.current_period_start
        ? new Date(subscriptionData.current_period_start)
        : null,
      currentPeriodEnd: subscriptionData.current_period_end
        ? new Date(subscriptionData.current_period_end)
        : null,
      cancelAtPeriodEnd: subscriptionData.cancel_at_period_end || false,
    });

    console.log('Subscription created successfully');
  } catch (error) {
    console.error('Error handling subscription created:', error);
  }
}

async function handleSubscriptionUpdated(data: WebhookEventData) {
  try {
    const subscriptionData = data.subscription;

    if (!subscriptionData) {
      console.error('Missing subscription data in webhook');
      return;
    }

    const plan = getPlanName(subscriptionData.product_id);

    console.log('Updating subscription:', subscriptionData.id);
    console.log('Product ID from webhook:', subscriptionData.product_id);
    console.log('Resolved plan from getPlanName:', plan);

    await db
      .update(subscription)
      .set({
        status: subscriptionData.status,
        plan: plan,
        currentPeriodStart: subscriptionData.current_period_start
          ? new Date(subscriptionData.current_period_start)
          : null,
        currentPeriodEnd: subscriptionData.current_period_end
          ? new Date(subscriptionData.current_period_end)
          : null,
        cancelAtPeriodEnd: subscriptionData.cancel_at_period_end || false,
        updatedAt: new Date(),
      })
      .where(eq(subscription.polarSubscriptionId, subscriptionData.id));

    console.log('Subscription updated successfully');
  } catch (error) {
    console.error('Error handling subscription updated:', error);
  }
}

async function handleSubscriptionCanceled(data: WebhookEventData) {
  try {
    const subscriptionData = data.subscription;

    if (!subscriptionData) {
      console.error('Missing subscription data in webhook');
      return;
    }

    console.log('Canceling subscription:', subscriptionData.id);

    await db
      .update(subscription)
      .set({
        status: 'canceled',
        cancelAtPeriodEnd: true,
        updatedAt: new Date(),
      })
      .where(eq(subscription.polarSubscriptionId, subscriptionData.id));

    console.log('Subscription canceled successfully');
  } catch (error) {
    console.error('Error handling subscription canceled:', error);
  }
}

export async function POST(req: NextRequest) {
  console.log('=== POLAR WEBHOOK RECEIVED ===');
  console.log('Headers:', Object.fromEntries(req.headers.entries()));

  try {
    const body = await req.text();
    console.log('Raw body length:', body.length);
    console.log('Raw body preview:', body.substring(0, 500));

    const signature = req.headers.get('polar-signature-256');
    console.log('Signature present:', !!signature);

    if (!signature) {
      console.error('Missing signature header');
      return new NextResponse('Missing signature', { status: 400 });
    }

    const secret = process.env.POLAR_WEBHOOK_SECRET;
    console.log('Webhook secret configured:', !!secret);

    if (!secret) {
      console.error('POLAR_WEBHOOK_SECRET not configured');
      return new NextResponse('Server configuration error', { status: 500 });
    }

    // Verify webhook signature
    const isValid = verifyWebhookSignature(body, signature, secret);
    console.log('Signature verification result:', isValid);

    if (!isValid) {
      console.error('Invalid signature - verification failed');
      return new NextResponse('Invalid signature', { status: 401 });
    }

    const event = JSON.parse(body);
    console.log('Parsed event type:', event.type);
    console.log('Event data keys:', Object.keys(event.data || {}));

    // Handle different event types
    switch (event.type) {
      case 'subscription.created':
        console.log(
          'Subscription created:',
          JSON.stringify(event.data, null, 2),
        );
        await handleSubscriptionCreated(event.data);
        break;
      case 'subscription.updated':
        console.log(
          'Subscription updated:',
          JSON.stringify(event.data, null, 2),
        );
        await handleSubscriptionUpdated(event.data);
        break;
      case 'subscription.canceled':
        console.log(
          'Subscription canceled:',
          JSON.stringify(event.data, null, 2),
        );
        await handleSubscriptionCanceled(event.data);
        break;
      case 'order.created':
        console.log('Order created:', JSON.stringify(event.data, null, 2));
        // Order handling can be added later if needed
        break;
      default:
        console.log('Unhandled event type:', event.type);
        console.log('Full event data:', JSON.stringify(event, null, 2));
    }

    console.log('=== WEBHOOK PROCESSING COMPLETE ===');
    return new NextResponse('OK', { status: 200 });
  } catch (error) {
    console.error('Webhook processing error:', error);
    console.error(
      'Error stack:',
      error instanceof Error ? error.stack : 'No stack trace',
    );
    return new NextResponse('Internal server error', { status: 500 });
  }
}



================================================
FILE: src/app/billing/page.tsx
================================================
'use client';
import { useEffect, useState } from 'react';
import { authClient } from '@/lib/auth-client';
import { getPlanName } from '@/lib/plan-map';
import { Button } from '@/components/ui/button';

export default function BillingPage() {
  const [plan, setPlan] = useState<string>('Loading...');
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    async function fetchPlan() {
      try {
        const res = await authClient.customer.state();
        const state = res.data;
        if (
          state?.activeSubscriptions &&
          state.activeSubscriptions.length > 0
        ) {
          const active = state.activeSubscriptions.find(
            (s: { status: string; productId?: string }) =>
              s.status === 'active',
          );
          if (active) {
            const pid = active.productId; // Use camelCase property name
            console.log('Found active subscription:', active);
            console.log('Product ID from subscription:', pid);

            const planName = getPlanName(pid);
            console.log('Resolved plan name:', planName);
            setPlan(planName);
          } else {
            setPlan('Free');
          }
        } else {
          setPlan('Free');
        }
      } catch (error) {
        console.error('Error fetching subscription state:', error);
        setPlan('Free');
      } finally {
        setLoading(false);
      }
    }
    fetchPlan();
  }, []);

  if (loading) return <p>Loading...</p>;

  return (
    <div className="p-10">
      <h1 className="mb-4 text-2xl font-bold">Billing Dashboard</h1>
      <p>Current Plan: {plan}</p>
      <Button onClick={() => authClient.customer.portal()} className="mt-4">
        Manage Subscription
      </Button>
    </div>
  );
}



================================================
FILE: src/app/billing/success/page.tsx
================================================
'use client';
import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';

export default function SuccessPage() {
  const searchParams = useSearchParams();
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>(
    'loading',
  );
  const [message, setMessage] = useState('');

  const checkoutId = searchParams.get('checkout_id');

  useEffect(() => {
    const verifyCheckout = async () => {
      if (checkoutId) {
        try {
          const response = await fetch(`/api/verify-checkout/${checkoutId}`);
          if (response.ok) {
            setStatus('success');
            setMessage('Your subscription has been activated successfully!');
          } else {
            setStatus('error');
            setMessage(
              'Unable to verify your payment. Please contact support.',
            );
          }
        } catch {
          setStatus('error');
          setMessage(
            'Verification failed. Please try again or contact support.',
          );
        }
      } else {
        setStatus('error');
        setMessage('Missing checkout information');
      }
    };
    verifyCheckout();
  }, [checkoutId]);

  if (status === 'loading') {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="text-center">
          <div className="mx-auto mb-4 h-12 w-12 animate-spin rounded-full border-b-2 border-blue-600"></div>
          <p>Processing your subscription...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50">
      <div className="w-full max-w-md rounded-lg bg-white p-8 text-center shadow-lg">
        {status === 'success' ? (
          <>
            <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-green-100">
              <svg
                className="h-8 w-8 text-green-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M5 13l4 4L19 7"
                />
              </svg>
            </div>
            <h1 className="mb-2 text-2xl font-bold text-gray-900">
              Payment Successful!
            </h1>
            <p className="mb-6 text-gray-600">{message}</p>
            <div className="space-y-3">
              <p className="text-sm text-gray-500">
                Checkout ID:{' '}
                <code className="rounded bg-gray-100 px-2 py-1 text-xs">
                  {checkoutId}
                </code>
              </p>
              <Link href="/billing">
                <Button className="w-full">View Subscription Details</Button>
              </Link>
              <Link href="/dashboard">
                <Button variant="outline" className="w-full">
                  Go to Dashboard
                </Button>
              </Link>
            </div>
          </>
        ) : (
          <>
            <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-red-100">
              <svg
                className="h-8 w-8 text-red-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </div>
            <h1 className="mb-2 text-2xl font-bold text-gray-900">
              Payment Error
            </h1>
            <p className="mb-6 text-gray-600">{message}</p>
            <Link href="/dashboard/subscriptions">
              <Button className="w-full">Try Again</Button>
            </Link>
          </>
        )}
      </div>
    </div>
  );
}



================================================
FILE: src/app/dashboard/data.json
================================================
[
  {
    "id": 1,
    "header": "Cover page",
    "type": "Cover page",
    "status": "In Process",
    "target": "18",
    "limit": "5",
    "reviewer": "Eddie Lake"
  },
  {
    "id": 2,
    "header": "Table of contents",
    "type": "Table of contents",
    "status": "Done",
    "target": "29",
    "limit": "24",
    "reviewer": "Eddie Lake"
  },
  {
    "id": 3,
    "header": "Executive summary",
    "type": "Narrative",
    "status": "Done",
    "target": "10",
    "limit": "13",
    "reviewer": "Eddie Lake"
  },
  {
    "id": 4,
    "header": "Technical approach",
    "type": "Narrative",
    "status": "Done",
    "target": "27",
    "limit": "23",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 5,
    "header": "Design",
    "type": "Narrative",
    "status": "In Process",
    "target": "2",
    "limit": "16",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 6,
    "header": "Capabilities",
    "type": "Narrative",
    "status": "In Process",
    "target": "20",
    "limit": "8",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 7,
    "header": "Integration with existing systems",
    "type": "Narrative",
    "status": "In Process",
    "target": "19",
    "limit": "21",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 8,
    "header": "Innovation and Advantages",
    "type": "Narrative",
    "status": "Done",
    "target": "25",
    "limit": "26",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 9,
    "header": "Overview of EMR's Innovative Solutions",
    "type": "Technical content",
    "status": "Done",
    "target": "7",
    "limit": "23",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 10,
    "header": "Advanced Algorithms and Machine Learning",
    "type": "Narrative",
    "status": "Done",
    "target": "30",
    "limit": "28",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 11,
    "header": "Adaptive Communication Protocols",
    "type": "Narrative",
    "status": "Done",
    "target": "9",
    "limit": "31",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 12,
    "header": "Advantages Over Current Technologies",
    "type": "Narrative",
    "status": "Done",
    "target": "12",
    "limit": "0",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 13,
    "header": "Past Performance",
    "type": "Narrative",
    "status": "Done",
    "target": "22",
    "limit": "33",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 14,
    "header": "Customer Feedback and Satisfaction Levels",
    "type": "Narrative",
    "status": "Done",
    "target": "15",
    "limit": "34",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 15,
    "header": "Implementation Challenges and Solutions",
    "type": "Narrative",
    "status": "Done",
    "target": "3",
    "limit": "35",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 16,
    "header": "Security Measures and Data Protection Policies",
    "type": "Narrative",
    "status": "In Process",
    "target": "6",
    "limit": "36",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 17,
    "header": "Scalability and Future Proofing",
    "type": "Narrative",
    "status": "Done",
    "target": "4",
    "limit": "37",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 18,
    "header": "Cost-Benefit Analysis",
    "type": "Plain language",
    "status": "Done",
    "target": "14",
    "limit": "38",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 19,
    "header": "User Training and Onboarding Experience",
    "type": "Narrative",
    "status": "Done",
    "target": "17",
    "limit": "39",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 20,
    "header": "Future Development Roadmap",
    "type": "Narrative",
    "status": "Done",
    "target": "11",
    "limit": "40",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 21,
    "header": "System Architecture Overview",
    "type": "Technical content",
    "status": "In Process",
    "target": "24",
    "limit": "18",
    "reviewer": "Maya Johnson"
  },
  {
    "id": 22,
    "header": "Risk Management Plan",
    "type": "Narrative",
    "status": "Done",
    "target": "15",
    "limit": "22",
    "reviewer": "Carlos Rodriguez"
  },
  {
    "id": 23,
    "header": "Compliance Documentation",
    "type": "Legal",
    "status": "In Process",
    "target": "31",
    "limit": "27",
    "reviewer": "Sarah Chen"
  },
  {
    "id": 24,
    "header": "API Documentation",
    "type": "Technical content",
    "status": "Done",
    "target": "8",
    "limit": "12",
    "reviewer": "Raj Patel"
  },
  {
    "id": 25,
    "header": "User Interface Mockups",
    "type": "Visual",
    "status": "In Process",
    "target": "19",
    "limit": "25",
    "reviewer": "Leila Ahmadi"
  },
  {
    "id": 26,
    "header": "Database Schema",
    "type": "Technical content",
    "status": "Done",
    "target": "22",
    "limit": "20",
    "reviewer": "Thomas Wilson"
  },
  {
    "id": 27,
    "header": "Testing Methodology",
    "type": "Technical content",
    "status": "In Process",
    "target": "17",
    "limit": "14",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 28,
    "header": "Deployment Strategy",
    "type": "Narrative",
    "status": "Done",
    "target": "26",
    "limit": "30",
    "reviewer": "Eddie Lake"
  },
  {
    "id": 29,
    "header": "Budget Breakdown",
    "type": "Financial",
    "status": "In Process",
    "target": "13",
    "limit": "16",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 30,
    "header": "Market Analysis",
    "type": "Research",
    "status": "Done",
    "target": "29",
    "limit": "32",
    "reviewer": "Sophia Martinez"
  },
  {
    "id": 31,
    "header": "Competitor Comparison",
    "type": "Research",
    "status": "In Process",
    "target": "21",
    "limit": "19",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 32,
    "header": "Maintenance Plan",
    "type": "Technical content",
    "status": "Done",
    "target": "16",
    "limit": "23",
    "reviewer": "Alex Thompson"
  },
  {
    "id": 33,
    "header": "User Personas",
    "type": "Research",
    "status": "In Process",
    "target": "27",
    "limit": "24",
    "reviewer": "Nina Patel"
  },
  {
    "id": 34,
    "header": "Accessibility Compliance",
    "type": "Legal",
    "status": "Done",
    "target": "18",
    "limit": "21",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 35,
    "header": "Performance Metrics",
    "type": "Technical content",
    "status": "In Process",
    "target": "23",
    "limit": "26",
    "reviewer": "David Kim"
  },
  {
    "id": 36,
    "header": "Disaster Recovery Plan",
    "type": "Technical content",
    "status": "Done",
    "target": "14",
    "limit": "17",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 37,
    "header": "Third-party Integrations",
    "type": "Technical content",
    "status": "In Process",
    "target": "25",
    "limit": "28",
    "reviewer": "Eddie Lake"
  },
  {
    "id": 38,
    "header": "User Feedback Summary",
    "type": "Research",
    "status": "Done",
    "target": "20",
    "limit": "15",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 39,
    "header": "Localization Strategy",
    "type": "Narrative",
    "status": "In Process",
    "target": "12",
    "limit": "19",
    "reviewer": "Maria Garcia"
  },
  {
    "id": 40,
    "header": "Mobile Compatibility",
    "type": "Technical content",
    "status": "Done",
    "target": "28",
    "limit": "31",
    "reviewer": "James Wilson"
  },
  {
    "id": 41,
    "header": "Data Migration Plan",
    "type": "Technical content",
    "status": "In Process",
    "target": "19",
    "limit": "22",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 42,
    "header": "Quality Assurance Protocols",
    "type": "Technical content",
    "status": "Done",
    "target": "30",
    "limit": "33",
    "reviewer": "Priya Singh"
  },
  {
    "id": 43,
    "header": "Stakeholder Analysis",
    "type": "Research",
    "status": "In Process",
    "target": "11",
    "limit": "14",
    "reviewer": "Eddie Lake"
  },
  {
    "id": 44,
    "header": "Environmental Impact Assessment",
    "type": "Research",
    "status": "Done",
    "target": "24",
    "limit": "27",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 45,
    "header": "Intellectual Property Rights",
    "type": "Legal",
    "status": "In Process",
    "target": "17",
    "limit": "20",
    "reviewer": "Sarah Johnson"
  },
  {
    "id": 46,
    "header": "Customer Support Framework",
    "type": "Narrative",
    "status": "Done",
    "target": "22",
    "limit": "25",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 47,
    "header": "Version Control Strategy",
    "type": "Technical content",
    "status": "In Process",
    "target": "15",
    "limit": "18",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 48,
    "header": "Continuous Integration Pipeline",
    "type": "Technical content",
    "status": "Done",
    "target": "26",
    "limit": "29",
    "reviewer": "Michael Chen"
  },
  {
    "id": 49,
    "header": "Regulatory Compliance",
    "type": "Legal",
    "status": "In Process",
    "target": "13",
    "limit": "16",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 50,
    "header": "User Authentication System",
    "type": "Technical content",
    "status": "Done",
    "target": "28",
    "limit": "31",
    "reviewer": "Eddie Lake"
  },
  {
    "id": 51,
    "header": "Data Analytics Framework",
    "type": "Technical content",
    "status": "In Process",
    "target": "21",
    "limit": "24",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 52,
    "header": "Cloud Infrastructure",
    "type": "Technical content",
    "status": "Done",
    "target": "16",
    "limit": "19",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 53,
    "header": "Network Security Measures",
    "type": "Technical content",
    "status": "In Process",
    "target": "29",
    "limit": "32",
    "reviewer": "Lisa Wong"
  },
  {
    "id": 54,
    "header": "Project Timeline",
    "type": "Planning",
    "status": "Done",
    "target": "14",
    "limit": "17",
    "reviewer": "Eddie Lake"
  },
  {
    "id": 55,
    "header": "Resource Allocation",
    "type": "Planning",
    "status": "In Process",
    "target": "27",
    "limit": "30",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 56,
    "header": "Team Structure and Roles",
    "type": "Planning",
    "status": "Done",
    "target": "20",
    "limit": "23",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 57,
    "header": "Communication Protocols",
    "type": "Planning",
    "status": "In Process",
    "target": "15",
    "limit": "18",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 58,
    "header": "Success Metrics",
    "type": "Planning",
    "status": "Done",
    "target": "30",
    "limit": "33",
    "reviewer": "Eddie Lake"
  },
  {
    "id": 59,
    "header": "Internationalization Support",
    "type": "Technical content",
    "status": "In Process",
    "target": "23",
    "limit": "26",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 60,
    "header": "Backup and Recovery Procedures",
    "type": "Technical content",
    "status": "Done",
    "target": "18",
    "limit": "21",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 61,
    "header": "Monitoring and Alerting System",
    "type": "Technical content",
    "status": "In Process",
    "target": "25",
    "limit": "28",
    "reviewer": "Daniel Park"
  },
  {
    "id": 62,
    "header": "Code Review Guidelines",
    "type": "Technical content",
    "status": "Done",
    "target": "12",
    "limit": "15",
    "reviewer": "Eddie Lake"
  },
  {
    "id": 63,
    "header": "Documentation Standards",
    "type": "Technical content",
    "status": "In Process",
    "target": "27",
    "limit": "30",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 64,
    "header": "Release Management Process",
    "type": "Planning",
    "status": "Done",
    "target": "22",
    "limit": "25",
    "reviewer": "Assign reviewer"
  },
  {
    "id": 65,
    "header": "Feature Prioritization Matrix",
    "type": "Planning",
    "status": "In Process",
    "target": "19",
    "limit": "22",
    "reviewer": "Emma Davis"
  },
  {
    "id": 66,
    "header": "Technical Debt Assessment",
    "type": "Technical content",
    "status": "Done",
    "target": "24",
    "limit": "27",
    "reviewer": "Eddie Lake"
  },
  {
    "id": 67,
    "header": "Capacity Planning",
    "type": "Planning",
    "status": "In Process",
    "target": "21",
    "limit": "24",
    "reviewer": "Jamik Tashpulatov"
  },
  {
    "id": 68,
    "header": "Service Level Agreements",
    "type": "Legal",
    "status": "Done",
    "target": "26",
    "limit": "29",
    "reviewer": "Assign reviewer"
  }
]



================================================
FILE: src/app/dashboard/page.tsx
================================================
'use client';

import { useEffect, useState } from 'react';
import { AppSidebar } from '@/components/app-sidebar';
import { ChartAreaInteractive } from '@/components/chart-area-interactive';
import { DataTable } from '@/components/data-table';
import { SectionCards } from '@/components/section-cards';
import { SiteHeader } from '@/components/site-header';
import { SidebarInset, SidebarProvider } from '@/components/ui/sidebar';
import { authClient } from '@/lib/auth-client';

import data from './data.json';

interface User {
  id: string;
  name: string;
  email: string;
  image?: string | null | undefined;
}

export default function Page() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkSession = async () => {
      try {
        console.log('[DEBUG] Checking user session...');
        const session = await authClient.getSession();
        console.log('[DEBUG] Session data:', session);
        if (session.data?.user) {
          console.log('[DEBUG] User authenticated:', session.data.user);
          setUser(session.data.user);
        } else {
          console.log('[DEBUG] No authenticated user found');
          setUser(null);
        }
      } catch (error) {
        console.error('[DEBUG] Session check failed:', error);
        setUser(null);
      } finally {
        setLoading(false);
      }
    };

    checkSession();
  }, []);

  if (loading) {
    return <div className="p-10 text-center">Loading dashboard...</div>;
  }

  return (
    <SidebarProvider
      style={
        {
          '--sidebar-width': 'calc(var(--spacing) * 72)',
          '--header-height': 'calc(var(--spacing) * 12)',
        } as React.CSSProperties
      }
    >
      <AppSidebar variant="inset" user={user} />
      <SidebarInset>
        <SiteHeader user={user} pageTitle="Dashboard" />
        <div className="flex flex-1 flex-col">
          <div className="@container/main flex flex-1 flex-col gap-2">
            <div className="flex flex-col gap-4 py-4 md:gap-6 md:py-6">
              <SectionCards />
              <div className="px-4 lg:px-6">
                <ChartAreaInteractive />
              </div>
              <DataTable data={data} />
            </div>
          </div>
        </div>
      </SidebarInset>
    </SidebarProvider>
  );
}



================================================
FILE: src/app/dashboard/subscriptions/page.tsx
================================================
'use client';

import { useEffect, useState } from 'react';
import { authClient } from '@/lib/auth-client';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

interface Plan {
  name: string;
  price: string;
  features: string[];
}

export default function SubscriptionsPage() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const session = await authClient.getSession();
        setIsAuthenticated(!!session.data?.user);
      } catch (error) {
        console.error('Auth check failed:', error);
        setIsAuthenticated(false);
      } finally {
        setLoading(false);
      }
    };
    checkAuth();
  }, []);

  const handlePlanSelection = async (planName: string) => {
    if (!isAuthenticated) {
      alert('Please sign in to purchase a plan');
      return;
    }

    try {
      console.log('Starting checkout for plan:', planName);
      // Use the slug directly as configured in server
      const slug = planName.toLowerCase();
      if (!['free', 'pro', 'startup'].includes(slug)) {
        console.error('Invalid plan name:', planName);
        return;
      }

      const result = await authClient.checkout({ slug });
      console.log('Checkout result:', result);
    } catch (error) {
      console.error('Checkout failed:', error);
      // Show user-friendly error message
      alert(
        `Checkout failed: ${error instanceof Error ? error.message : 'Unknown error'}`,
      );
    }
  };
  const plans: Plan[] = [
    {
      name: 'Free',
      price: '$0/mo',
      features: [
        'Basic Analytics Dashboard',
        '5GB Cloud Storage',
        'Email and Chat Support',
      ],
    },
    {
      name: 'Pro',
      price: '$19/mo',
      features: [
        'Everything in Free',
        'Access to Community Forum',
        'Single User Access',
        'Access to Basic Templates',
        'Mobile App Access',
        '1 Custom Report Per Month',
        'Monthly Product Updates',
        'Standard Security Features',
      ],
    },
    {
      name: 'Startup',
      price: '$29/mo',
      features: [
        'Everything in Pro Plan',
        '5GB Cloud Storage',
        'Email and Chat Support',
      ],
    },
  ];

  if (loading) {
    return <div className="p-10 text-center">Loading...</div>;
  }

  return (
    <div className="container mx-auto space-y-8 px-6 py-8">
      <div>
        <h1 className="text-3xl font-bold">Subscription Management</h1>
        <p className="mt-2 text-gray-600">
          Manage your subscription, upgrade or downgrade plans.
        </p>
      </div>

      {/* Current Subscription */}
      <Card>
        <CardHeader>
          <CardTitle>Current Subscription</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Subscription status will be displayed here.</p>
        </CardContent>
      </Card>

      {/* Plans */}
      <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
        {plans.map(plan => (
          <Card
            key={plan.name}
            className={plan.name === 'Pro' ? 'border-purple-500' : ''}
          >
            <CardHeader>
              <CardTitle>{plan.name}</CardTitle>
              <p className="text-2xl font-semibold">{plan.price}</p>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {plan.features.map((feature, index) => (
                  <li key={index} className="flex items-center gap-2">
                    <span>✓</span> {feature}
                  </li>
                ))}
              </ul>
              <Button
                className="mt-4 w-full"
                onClick={() => handlePlanSelection(plan.name)}
                disabled={plan.name !== 'Free' && !isAuthenticated}
              >
                {plan.name === 'Free'
                  ? 'Current Plan'
                  : isAuthenticated
                    ? 'Upgrade'
                    : 'Sign in to purchase'}
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Payment History */}
      <Card>
        <CardHeader>
          <CardTitle>Payment History</CardTitle>
        </CardHeader>
        <CardContent>
          <p>No payment history available.</p>
        </CardContent>
      </Card>
    </div>
  );
}



================================================
FILE: src/components/active-theme.tsx
================================================
'use client';

import {
  ReactNode,
  createContext,
  useContext,
  useEffect,
  useState,
} from 'react';

const COOKIE_NAME = 'active_theme';
const DEFAULT_THEME = 'amber';

function setThemeCookie(theme: string) {
  if (typeof window === 'undefined') return;

  document.cookie = `${COOKIE_NAME}=${theme}; path=/; max-age=31536000; SameSite=Lax; ${
    window.location.protocol === 'https:' ? 'Secure;' : ''
  }`;
}

type ThemeContextType = {
  activeTheme: string;
  setActiveTheme: (theme: string) => void;
};

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ActiveThemeProvider({
  children,
  initialTheme,
}: {
  children: ReactNode;
  initialTheme?: string;
}) {
  const [activeTheme, setActiveTheme] = useState<string>(
    () => initialTheme || DEFAULT_THEME,
  );

  useEffect(() => {
    setThemeCookie(activeTheme);

    Array.from(document.body.classList)
      .filter(className => className.startsWith('theme-'))
      .forEach(className => {
        document.body.classList.remove(className);
      });
    document.body.classList.add(`theme-${activeTheme}`);
    if (activeTheme.endsWith('-scaled')) {
      document.body.classList.add('theme-scaled');
    }
  }, [activeTheme]);

  return (
    <ThemeContext.Provider value={{ activeTheme, setActiveTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useThemeConfig() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error(
      'useThemeConfig must be used within an ActiveThemeProvider',
    );
  }
  return context;
}



================================================
FILE: src/components/app-sidebar.tsx
================================================
'use client';

import * as React from 'react';
import {
  IconCamera,
  IconChartBar,
  IconDashboard,
  IconDatabase,
  IconFileAi,
  IconFileDescription,
  IconFileWord,
  IconFolder,
  IconHelp,
  IconInnerShadowTop,
  IconListDetails,
  IconReport,
  IconSearch,
  IconSettings,
  IconUsers,
} from '@tabler/icons-react';

import { NavDocuments } from '@/components/nav-documents';
import { NavMain } from '@/components/nav-main';
import { NavSecondary } from '@/components/nav-secondary';
import { NavUser } from '@/components/nav-user';
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from '@/components/ui/sidebar';

interface User {
  id: string;
  name: string;
  email: string;
  image?: string | null | undefined;
}

const defaultUser = {
  name: 'Guest',
  email: 'guest@example.com',
  avatar: '/avatars/guest.jpg',
};

const data = {
  navMain: [
    {
      title: 'Dashboard',
      url: '/dashboard',
      icon: IconDashboard,
    },
    {
      title: 'AI Chat',
      url: '/aichat',
      icon: IconFileAi,
    },
    {
      title: 'Lifecycle',
      url: '#',
      icon: IconListDetails,
    },
    {
      title: 'Analytics',
      url: '#',
      icon: IconChartBar,
    },
    {
      title: 'Projects',
      url: '#',
      icon: IconFolder,
    },
    {
      title: 'Team',
      url: '#',
      icon: IconUsers,
    },
  ],
  navClouds: [
    {
      title: 'Capture',
      icon: IconCamera,
      isActive: true,
      url: '#',
      items: [
        {
          title: 'Active Proposals',
          url: '#',
        },
        {
          title: 'Archived',
          url: '#',
        },
      ],
    },
    {
      title: 'Proposal',
      icon: IconFileDescription,
      url: '#',
      items: [
        {
          title: 'Active Proposals',
          url: '#',
        },
        {
          title: 'Archived',
          url: '#',
        },
      ],
    },
    {
      title: 'Prompts',
      icon: IconFileAi,
      url: '#',
      items: [
        {
          title: 'Active Proposals',
          url: '#',
        },
        {
          title: 'Archived',
          url: '#',
        },
      ],
    },
  ],
  navSecondary: [
    {
      title: 'Settings',
      url: '#',
      icon: IconSettings,
    },
    {
      title: 'Get Help',
      url: '#',
      icon: IconHelp,
    },
    {
      title: 'Search',
      url: '#',
      icon: IconSearch,
    },
  ],
  documents: [
    {
      name: 'Data Library',
      url: '#',
      icon: IconDatabase,
    },
    {
      name: 'Reports',
      url: '#',
      icon: IconReport,
    },
    {
      name: 'Word Assistant',
      url: '#',
      icon: IconFileWord,
    },
  ],
};

interface AppSidebarProps extends React.ComponentProps<typeof Sidebar> {
  user?: User | null;
}

export function AppSidebar({ user, ...props }: AppSidebarProps) {
  const currentUser = user
    ? {
        name: user.name,
        email: user.email,
        avatar: user.image || '/avatars/default.jpg',
      }
    : defaultUser;

  console.log('[DEBUG] AppSidebar user:', currentUser);

  return (
    <Sidebar collapsible="offcanvas" {...props}>
      <SidebarHeader>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton
              asChild
              className="data-[slot=sidebar-menu-button]:!p-1.5"
            >
              <a href="#">
                <IconInnerShadowTop className="!size-5" />
                <span className="text-base font-semibold">Acme Inc.</span>
              </a>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarHeader>
      <SidebarContent>
        <NavMain items={data.navMain} />
        <NavDocuments items={data.documents} />
        <NavSecondary items={data.navSecondary} className="mt-auto" />
      </SidebarContent>
      <SidebarFooter>
        <NavUser user={currentUser} />
      </SidebarFooter>
    </Sidebar>
  );
}



================================================
FILE: src/components/chart-area-interactive.tsx
================================================
'use client';

import * as React from 'react';
import { Area, AreaChart, CartesianGrid, XAxis } from 'recharts';

import { useIsMobile } from '@/hooks/use-mobile';
import {
  Card,
  CardAction,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { ChartConfig, ChartContainer } from '@/components/ui/chart';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';

export const description = 'An interactive area chart';

const chartData = [
  { date: '2024-04-01', desktop: 222, mobile: 150 },
  { date: '2024-04-02', desktop: 97, mobile: 180 },
  { date: '2024-04-03', desktop: 167, mobile: 120 },
  { date: '2024-04-04', desktop: 242, mobile: 260 },
  { date: '2024-04-05', desktop: 373, mobile: 290 },
  { date: '2024-04-06', desktop: 301, mobile: 340 },
  { date: '2024-04-07', desktop: 245, mobile: 180 },
  { date: '2024-04-08', desktop: 409, mobile: 320 },
  { date: '2024-04-09', desktop: 59, mobile: 110 },
  { date: '2024-04-10', desktop: 261, mobile: 190 },
  { date: '2024-04-11', desktop: 327, mobile: 350 },
  { date: '2024-04-12', desktop: 292, mobile: 210 },
  { date: '2024-04-13', desktop: 342, mobile: 380 },
  { date: '2024-04-14', desktop: 137, mobile: 220 },
  { date: '2024-04-15', desktop: 120, mobile: 170 },
  { date: '2024-04-16', desktop: 138, mobile: 190 },
  { date: '2024-04-17', desktop: 446, mobile: 360 },
  { date: '2024-04-18', desktop: 364, mobile: 410 },
  { date: '2024-04-19', desktop: 243, mobile: 180 },
  { date: '2024-04-20', desktop: 89, mobile: 150 },
  { date: '2024-04-21', desktop: 137, mobile: 200 },
  { date: '2024-04-22', desktop: 224, mobile: 170 },
  { date: '2024-04-23', desktop: 138, mobile: 230 },
  { date: '2024-04-24', desktop: 387, mobile: 290 },
  { date: '2024-04-25', desktop: 215, mobile: 250 },
  { date: '2024-04-26', desktop: 75, mobile: 130 },
  { date: '2024-04-27', desktop: 383, mobile: 420 },
  { date: '2024-04-28', desktop: 122, mobile: 180 },
  { date: '2024-04-29', desktop: 315, mobile: 240 },
  { date: '2024-04-30', desktop: 454, mobile: 380 },
  { date: '2024-05-01', desktop: 165, mobile: 220 },
  { date: '2024-05-02', desktop: 293, mobile: 310 },
  { date: '2024-05-03', desktop: 247, mobile: 190 },
  { date: '2024-05-04', desktop: 385, mobile: 420 },
  { date: '2024-05-05', desktop: 481, mobile: 390 },
  { date: '2024-05-06', desktop: 498, mobile: 520 },
  { date: '2024-05-07', desktop: 388, mobile: 300 },
  { date: '2024-05-08', desktop: 149, mobile: 210 },
  { date: '2024-05-09', desktop: 227, mobile: 180 },
  { date: '2024-05-10', desktop: 293, mobile: 330 },
  { date: '2024-05-11', desktop: 335, mobile: 270 },
  { date: '2024-05-12', desktop: 197, mobile: 240 },
  { date: '2024-05-13', desktop: 197, mobile: 160 },
  { date: '2024-05-14', desktop: 448, mobile: 490 },
  { date: '2024-05-15', desktop: 473, mobile: 380 },
  { date: '2024-05-16', desktop: 338, mobile: 400 },
  { date: '2024-05-17', desktop: 499, mobile: 420 },
  { date: '2024-05-18', desktop: 315, mobile: 350 },
  { date: '2024-05-19', desktop: 235, mobile: 180 },
  { date: '2024-05-20', desktop: 177, mobile: 230 },
  { date: '2024-05-21', desktop: 82, mobile: 140 },
  { date: '2024-05-22', desktop: 81, mobile: 120 },
  { date: '2024-05-23', desktop: 252, mobile: 290 },
  { date: '2024-05-24', desktop: 294, mobile: 220 },
  { date: '2024-05-25', desktop: 201, mobile: 250 },
  { date: '2024-05-26', desktop: 213, mobile: 170 },
  { date: '2024-05-27', desktop: 420, mobile: 460 },
  { date: '2024-05-28', desktop: 233, mobile: 190 },
  { date: '2024-05-29', desktop: 78, mobile: 130 },
  { date: '2024-05-30', desktop: 340, mobile: 280 },
  { date: '2024-05-31', desktop: 178, mobile: 230 },
  { date: '2024-06-01', desktop: 178, mobile: 200 },
  { date: '2024-06-02', desktop: 470, mobile: 410 },
  { date: '2024-06-03', desktop: 103, mobile: 160 },
  { date: '2024-06-04', desktop: 439, mobile: 380 },
  { date: '2024-06-05', desktop: 88, mobile: 140 },
  { date: '2024-06-06', desktop: 294, mobile: 250 },
  { date: '2024-06-07', desktop: 323, mobile: 370 },
  { date: '2024-06-08', desktop: 385, mobile: 320 },
  { date: '2024-06-09', desktop: 438, mobile: 480 },
  { date: '2024-06-10', desktop: 155, mobile: 200 },
  { date: '2024-06-11', desktop: 92, mobile: 150 },
  { date: '2024-06-12', desktop: 492, mobile: 420 },
  { date: '2024-06-13', desktop: 81, mobile: 130 },
  { date: '2024-06-14', desktop: 426, mobile: 380 },
  { date: '2024-06-15', desktop: 307, mobile: 350 },
  { date: '2024-06-16', desktop: 371, mobile: 310 },
  { date: '2024-06-17', desktop: 475, mobile: 520 },
  { date: '2024-06-18', desktop: 107, mobile: 170 },
  { date: '2024-06-19', desktop: 341, mobile: 290 },
  { date: '2024-06-20', desktop: 408, mobile: 450 },
  { date: '2024-06-21', desktop: 169, mobile: 210 },
  { date: '2024-06-22', desktop: 317, mobile: 270 },
  { date: '2024-06-23', desktop: 480, mobile: 530 },
  { date: '2024-06-24', desktop: 132, mobile: 180 },
  { date: '2024-06-25', desktop: 141, mobile: 190 },
  { date: '2024-06-26', desktop: 434, mobile: 380 },
  { date: '2024-06-27', desktop: 448, mobile: 490 },
  { date: '2024-06-28', desktop: 149, mobile: 200 },
  { date: '2024-06-29', desktop: 103, mobile: 160 },
  { date: '2024-06-30', desktop: 446, mobile: 400 },
];

const chartConfig = {
  visitors: {
    label: 'Visitors',
  },
  desktop: {
    label: 'Desktop',
    color: 'var(--primary)',
  },
  mobile: {
    label: 'Mobile',
    color: 'var(--primary)',
  },
} satisfies ChartConfig;

export function ChartAreaInteractive() {
  const isMobile = useIsMobile();
  const [timeRange, setTimeRange] = React.useState('90d');

  React.useEffect(() => {
    if (isMobile) {
      setTimeRange('7d');
    }
  }, [isMobile]);

  const filteredData = chartData.filter(item => {
    const date = new Date(item.date);
    const referenceDate = new Date('2024-06-30');
    let daysToSubtract = 90;
    if (timeRange === '30d') {
      daysToSubtract = 30;
    } else if (timeRange === '7d') {
      daysToSubtract = 7;
    }
    const startDate = new Date(referenceDate);
    startDate.setDate(startDate.getDate() - daysToSubtract);
    return date >= startDate;
  });

  return (
    <Card className="@container/card">
      <CardHeader>
        <CardTitle>Total Visitors</CardTitle>
        <CardDescription>
          <span className="hidden @[540px]/card:block">
            Total for the last 3 months
          </span>
          <span className="@[540px]/card:hidden">Last 3 months</span>
        </CardDescription>
        <CardAction>
          <ToggleGroup
            type="single"
            value={timeRange}
            onValueChange={setTimeRange}
            variant="outline"
            className="hidden *:data-[slot=toggle-group-item]:!px-4 @[767px]/card:flex"
          >
            <ToggleGroupItem value="90d">Last 3 months</ToggleGroupItem>
            <ToggleGroupItem value="30d">Last 30 days</ToggleGroupItem>
            <ToggleGroupItem value="7d">Last 7 days</ToggleGroupItem>
          </ToggleGroup>
          <Select value={timeRange} onValueChange={setTimeRange}>
            <SelectTrigger
              className="flex w-40 **:data-[slot=select-value]:block **:data-[slot=select-value]:truncate @[767px]/card:hidden"
              size="sm"
              aria-label="Select a value"
            >
              <SelectValue placeholder="Last 3 months" />
            </SelectTrigger>
            <SelectContent className="rounded-xl">
              <SelectItem value="90d" className="rounded-lg">
                Last 3 months
              </SelectItem>
              <SelectItem value="30d" className="rounded-lg">
                Last 30 days
              </SelectItem>
              <SelectItem value="7d" className="rounded-lg">
                Last 7 days
              </SelectItem>
            </SelectContent>
          </Select>
        </CardAction>
      </CardHeader>
      <CardContent className="px-2 pt-4 sm:px-6 sm:pt-6">
        <ChartContainer
          config={chartConfig}
          className="aspect-auto h-[250px] w-full"
          role="img"
          aria-label={`Visitor analytics chart showing desktop and mobile traffic data for ${timeRange === '7d' ? 'last 7 days' : timeRange === '30d' ? 'last 30 days' : 'last 3 months'}`}
        >
          <AreaChart data={filteredData}>
            <defs>
              <linearGradient id="fillDesktop" x1="0" y1="0" x2="0" y2="1">
                <stop
                  offset="5%"
                  stopColor="var(--color-desktop)"
                  stopOpacity={1.0}
                />
                <stop
                  offset="95%"
                  stopColor="var(--color-desktop)"
                  stopOpacity={0.1}
                />
              </linearGradient>
              <linearGradient id="fillMobile" x1="0" y1="0" x2="0" y2="1">
                <stop
                  offset="5%"
                  stopColor="var(--color-mobile)"
                  stopOpacity={0.8}
                />
                <stop
                  offset="95%"
                  stopColor="var(--color-mobile)"
                  stopOpacity={0.1}
                />
              </linearGradient>
            </defs>
            <CartesianGrid vertical={false} />
            <XAxis
              dataKey="date"
              tickLine={false}
              axisLine={false}
              tickMargin={8}
              minTickGap={32}
              tickFormatter={value => {
                const date = new Date(value);
                return date.toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric',
                });
              }}
            />
            <Area
              dataKey="mobile"
              type="natural"
              fill="url(#fillMobile)"
              stroke="var(--color-mobile)"
              stackId="a"
            />
            <Area
              dataKey="desktop"
              type="natural"
              fill="url(#fillDesktop)"
              stroke="var(--color-desktop)"
              stackId="a"
            />
          </AreaChart>
        </ChartContainer>
      </CardContent>
    </Card>
  );
}



================================================
FILE: src/components/content-5.tsx
================================================
'use client';

import { Cpu, Lock, Sparkles, Zap } from 'lucide-react';
import Image from 'next/image';
import { motion } from 'motion/react';

/**
 * Renders the content section for the Lyra ecosystem, including a heading,
 * descriptive paragraph, a large image, and a responsive grid of four feature cards.
 *
 * Each feature card contains an icon, a short title, and a brief description.
 *
 * @returns The section's JSX element containing the heading, image, and feature grid.
 */
export default function ContentSection() {
  return (
    <section className="py-16 md:py-32">
      <div className="mx-auto max-w-5xl space-y-8 px-6 md:space-y-12">
        <div className="mx-auto max-w-xl space-y-6 text-center md:space-y-12">
          <h2 className="text-4xl font-medium text-balance lg:text-5xl">
            The Lyra ecosystem brings together our models, products and
            platforms.
          </h2>
          <p>
            Lyra is evolving to be more than just the models. It supports an
            entire ecosystem — from products to the APIs and platforms helping
            developers and businesses innovate.
          </p>
        </div>
        <Image
          className="rounded-(--radius) grayscale"
          src="https://images.unsplash.com/photo-1616587226960-4a03badbe8bf?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
          alt="team image"
          width={2940}
          height={1960}
          loading="lazy"
        />

        <div className="relative mx-auto grid grid-cols-2 gap-x-3 gap-y-6 sm:gap-8 lg:grid-cols-4">
          <motion.div
            className="space-y-3"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            whileHover={{ scale: 1.05 }}
          >
            <div className="flex items-center gap-2">
              <motion.div whileHover={{ rotate: 10 }}>
                <Zap className="size-4" />
              </motion.div>
              <h3 className="text-sm font-medium">Faaast</h3>
            </div>
            <p className="text-muted-foreground text-sm">
              It supports an entire helping developers and innovate.
            </p>
          </motion.div>
          <motion.div
            className="space-y-2"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            whileHover={{ scale: 1.05 }}
          >
            <div className="flex items-center gap-2">
              <motion.div whileHover={{ rotate: 10 }}>
                <Cpu className="size-4" />
              </motion.div>
              <h3 className="text-sm font-medium">Powerful</h3>
            </div>
            <p className="text-muted-foreground text-sm">
              It supports an entire helping developers and businesses.
            </p>
          </motion.div>
          <motion.div
            className="space-y-2"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            whileHover={{ scale: 1.05 }}
          >
            <div className="flex items-center gap-2">
              <motion.div whileHover={{ rotate: 10 }}>
                <Lock className="size-4" />
              </motion.div>
              <h3 className="text-sm font-medium">Security</h3>
            </div>
            <p className="text-muted-foreground text-sm">
              It supports an helping developers businesses innovate.
            </p>
          </motion.div>
          <motion.div
            className="space-y-2"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            whileHover={{ scale: 1.05 }}
          >
            <div className="flex items-center gap-2">
              <motion.div whileHover={{ rotate: 10 }}>
                <Sparkles className="size-4" />
              </motion.div>
              <h3 className="text-sm font-medium">AI Powered</h3>
            </div>
            <p className="text-muted-foreground text-sm">
              It supports an helping developers businesses innovate.
            </p>
          </motion.div>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: src/components/data-table.tsx
================================================
'use client';

import * as React from 'react';
import {
  closestCenter,
  DndContext,
  KeyboardSensor,
  MouseSensor,
  TouchSensor,
  useSensor,
  useSensors,
  type DragEndEvent,
  type UniqueIdentifier,
} from '@dnd-kit/core';
import { restrictToVerticalAxis } from '@dnd-kit/modifiers';
import {
  arrayMove,
  SortableContext,
  useSortable,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import {
  IconChevronDown,
  IconChevronLeft,
  IconChevronRight,
  IconChevronsLeft,
  IconChevronsRight,
  IconCircleCheckFilled,
  IconDotsVertical,
  IconGripVertical,
  IconLayoutColumns,
  IconLoader,
  IconPlus,
  IconTrendingUp,
} from '@tabler/icons-react';
import {
  ColumnDef,
  ColumnFiltersState,
  flexRender,
  getCoreRowModel,
  getFacetedRowModel,
  getFacetedUniqueValues,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  Row,
  SortingState,
  useReactTable,
  VisibilityState,
} from '@tanstack/react-table';
import { useVirtualizer } from '@tanstack/react-virtual';
import { Area, AreaChart, CartesianGrid, XAxis } from 'recharts';
import { toast } from 'sonner';
import { z } from 'zod';

import { useIsMobile } from '@/hooks/use-mobile';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ChartConfig, ChartContainer } from '@/components/ui/chart';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from '@/components/ui/drawer';
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

export const schema = z.object({
  id: z.number(),
  header: z.string(),
  type: z.string(),
  status: z.string(),
  target: z.string(),
  limit: z.string(),
  reviewer: z.string(),
});

// Create a separate component for the drag handle
function DragHandle({ id }: { id: number }) {
  const { attributes, listeners } = useSortable({
    id,
  });

  return (
    <Button
      {...attributes}
      {...listeners}
      variant="ghost"
      size="icon"
      className="text-muted-foreground size-7 hover:bg-transparent"
    >
      <IconGripVertical className="text-muted-foreground size-3" />
      <span className="sr-only">Drag to reorder</span>
    </Button>
  );
}

// Columns definition moved inside component to access data length

function DraggableRow({
  row,
  style,
}: {
  row: Row<z.infer<typeof schema>>;
  style?: React.CSSProperties;
}) {
  const { transform, transition, setNodeRef, isDragging } = useSortable({
    id: row.original.id,
  });

  return (
    <TableRow
      data-state={row.getIsSelected() && 'selected'}
      data-dragging={isDragging}
      ref={setNodeRef}
      className="relative z-0 data-[dragging=true]:z-10 data-[dragging=true]:opacity-80"
      style={{
        transform: CSS.Transform.toString(transform),
        transition: transition,
        ...style,
      }}
    >
      {row.getVisibleCells().map(cell => (
        <TableCell key={cell.id}>
          {flexRender(cell.column.columnDef.cell, cell.getContext())}
        </TableCell>
      ))}
    </TableRow>
  );
}

export function DataTable({
  data: initialData,
}: {
  data: z.infer<typeof schema>[];
}) {
  const [data, setData] = React.useState(() => initialData);
  const [rowSelection, setRowSelection] = React.useState({});
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({});
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    [],
  );
  const [sorting, setSorting] = React.useState<SortingState>([]);
  const [pagination, setPagination] = React.useState({
    pageIndex: 0,
    pageSize: 10,
  });
  const sortableId = React.useId();
  const sensors = useSensors(
    useSensor(MouseSensor, {}),
    useSensor(TouchSensor, {}),
    useSensor(KeyboardSensor, {}),
  );

  const dataIds = React.useMemo<UniqueIdentifier[]>(
    () => data?.map(({ id }) => id) || [],
    [data],
  );

  // Use virtualization for large datasets (> 10000 rows) to improve performance
  const useVirtualization = data.length > 10000;

  const columns: ColumnDef<z.infer<typeof schema>>[] = React.useMemo(
    () => [
      {
        id: 'drag',
        header: () => null,
        cell: ({ row }) => <DragHandle id={row.original.id} />,
      },
      {
        id: 'select',
        header: ({ table }) => (
          <div className="flex items-center justify-center">
            <Checkbox
              checked={
                table.getIsAllPageRowsSelected() ||
                (table.getIsSomePageRowsSelected() && 'indeterminate')
              }
              onCheckedChange={value =>
                table.toggleAllPageRowsSelected(!!value)
              }
              aria-label="Select all"
            />
          </div>
        ),
        cell: ({ row }) => (
          <div className="flex items-center justify-center">
            <Checkbox
              checked={row.getIsSelected()}
              onCheckedChange={value => row.toggleSelected(!!value)}
              aria-label="Select row"
            />
          </div>
        ),
        enableSorting: false,
        enableHiding: false,
      },
      {
        accessorKey: 'header',
        header: 'Header',
        cell: ({ row }) => {
          // Use simplified rendering for performance tests with large datasets
          return useVirtualization ? (
            <span className="text-foreground">{row.original.header}</span>
          ) : (
            <TableCellViewer item={row.original} />
          );
        },
        enableHiding: false,
      },
      {
        accessorKey: 'type',
        header: 'Section Type',
        cell: ({ row }) => (
          <div className="w-32">
            <Badge variant="outline" className="text-muted-foreground px-1.5">
              {row.original.type}
            </Badge>
          </div>
        ),
      },
      {
        accessorKey: 'status',
        header: 'Status',
        cell: ({ row }) => (
          <Badge variant="outline" className="text-muted-foreground px-1.5">
            {row.original.status === 'Done' ? (
              <IconCircleCheckFilled className="fill-green-500 dark:fill-green-400" />
            ) : (
              <IconLoader />
            )}
            {row.original.status}
          </Badge>
        ),
      },
      {
        accessorKey: 'target',
        header: () => <div className="w-full text-right">Target</div>,
        cell: ({ row }) => (
          <form
            onSubmit={e => {
              e.preventDefault();
              toast.promise(new Promise(resolve => setTimeout(resolve, 1000)), {
                loading: `Saving ${row.original.header}`,
                success: 'Done',
                error: 'Error',
              });
            }}
          >
            <Label htmlFor={`${row.original.id}-target`} className="sr-only">
              Target
            </Label>
            <Input
              className="hover:bg-input/30 focus-visible:bg-background dark:hover:bg-input/30 dark:focus-visible:bg-input/30 h-8 w-16 border-transparent bg-transparent text-right shadow-none focus-visible:border dark:bg-transparent"
              defaultValue={row.original.target}
              id={`${row.original.id}-target`}
            />
          </form>
        ),
      },
      {
        accessorKey: 'limit',
        header: () => <div className="w-full text-right">Limit</div>,
        cell: ({ row }) => (
          <form
            onSubmit={e => {
              e.preventDefault();
              toast.promise(new Promise(resolve => setTimeout(resolve, 1000)), {
                loading: `Saving ${row.original.header}`,
                success: 'Done',
                error: 'Error',
              });
            }}
          >
            <Label htmlFor={`${row.original.id}-limit`} className="sr-only">
              Limit
            </Label>
            <Input
              className="hover:bg-input/30 focus-visible:bg-background dark:hover:bg-input/30 dark:focus-visible:bg-input/30 h-8 w-16 border-transparent bg-transparent text-right shadow-none focus-visible:border dark:bg-transparent"
              defaultValue={row.original.limit}
              id={`${row.original.id}-limit`}
            />
          </form>
        ),
      },
      {
        accessorKey: 'reviewer',
        header: 'Reviewer',
        cell: ({ row }) => {
          const isAssigned = row.original.reviewer !== 'Assign reviewer';

          if (isAssigned) {
            return row.original.reviewer;
          }

          return (
            <>
              <Label
                htmlFor={`${row.original.id}-reviewer`}
                className="sr-only"
              >
                Reviewer
              </Label>
              <Select>
                <SelectTrigger
                  className="w-38 **:data-[slot=select-value]:block **:data-[slot=select-value]:truncate"
                  size="sm"
                  id={`${row.original.id}-reviewer`}
                >
                  <SelectValue placeholder="Assign reviewer" />
                </SelectTrigger>
                <SelectContent align="end">
                  <SelectItem value="Eddie Lake">Eddie Lake</SelectItem>
                  <SelectItem value="Jamik Tashpulatov">
                    Jamik Tashpulatov
                  </SelectItem>
                </SelectContent>
              </Select>
            </>
          );
        },
      },
      {
        id: 'actions',
        cell: () => (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                className="data-[state=open]:bg-muted text-muted-foreground flex size-8"
                size="icon"
              >
                <IconDotsVertical />
                <span className="sr-only">Open menu</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-32">
              <DropdownMenuItem>Edit</DropdownMenuItem>
              <DropdownMenuItem>Make a copy</DropdownMenuItem>
              <DropdownMenuItem>Favorite</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem variant="destructive">Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        ),
      },
    ],
    [useVirtualization],
  );

  const table = useReactTable({
    data,
    columns,
    state: {
      sorting,
      columnVisibility,
      rowSelection,
      columnFilters,
      pagination: useVirtualization ? undefined : pagination,
    },
    getRowId: row => row.id.toString(),
    enableRowSelection: true,
    onRowSelectionChange: setRowSelection,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: setColumnVisibility,
    onPaginationChange: useVirtualization ? undefined : setPagination,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: useVirtualization
      ? undefined
      : getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFacetedRowModel: getFacetedRowModel(),
    getFacetedUniqueValues: getFacetedUniqueValues(),
  });

  // Virtualizer for large datasets
  const parentRef = React.useRef<HTMLDivElement>(null);
  const virtualizer = useVirtualizer({
    count: useVirtualization ? table.getRowModel().rows.length : 0,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 53, // Estimated row height
    overscan: 10,
  });

  function handleDragEnd(event: DragEndEvent) {
    const { active, over } = event;
    if (active && over && active.id !== over.id) {
      setData(data => {
        const oldIndex = dataIds.indexOf(active.id);
        const newIndex = dataIds.indexOf(over.id);
        return arrayMove(data, oldIndex, newIndex);
      });
    }
  }

  return (
    <Tabs
      defaultValue="outline"
      className="w-full flex-col justify-start gap-6"
    >
      <div className="flex items-center justify-between px-4 lg:px-6">
        <Label htmlFor="view-selector" className="sr-only">
          View
        </Label>
        <Select defaultValue="outline">
          <SelectTrigger
            className="flex w-fit @4xl/main:hidden"
            size="sm"
            id="view-selector"
          >
            <SelectValue placeholder="Select a view" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="outline">Outline</SelectItem>
            <SelectItem value="past-performance">Past Performance</SelectItem>
            <SelectItem value="key-personnel">Key Personnel</SelectItem>
            <SelectItem value="focus-documents">Focus Documents</SelectItem>
          </SelectContent>
        </Select>
        <TabsList className="**:data-[slot=badge]:bg-muted-foreground/30 hidden **:data-[slot=badge]:size-5 **:data-[slot=badge]:rounded-full **:data-[slot=badge]:px-1 @4xl/main:flex">
          <TabsTrigger value="outline">Outline</TabsTrigger>
          <TabsTrigger value="past-performance">
            Past Performance <Badge variant="secondary">3</Badge>
          </TabsTrigger>
          <TabsTrigger value="key-personnel">
            Key Personnel <Badge variant="secondary">2</Badge>
          </TabsTrigger>
          <TabsTrigger value="focus-documents">Focus Documents</TabsTrigger>
        </TabsList>
        <div className="flex items-center gap-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm">
                <IconLayoutColumns />
                <span className="hidden lg:inline">Customize Columns</span>
                <span className="lg:hidden">Columns</span>
                <IconChevronDown />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              {table
                .getAllColumns()
                .filter(
                  column =>
                    typeof column.accessorFn !== 'undefined' &&
                    column.getCanHide(),
                )
                .map(column => {
                  return (
                    <DropdownMenuCheckboxItem
                      key={column.id}
                      className="capitalize"
                      checked={column.getIsVisible()}
                      onCheckedChange={value =>
                        column.toggleVisibility(!!value)
                      }
                    >
                      {column.id}
                    </DropdownMenuCheckboxItem>
                  );
                })}
            </DropdownMenuContent>
          </DropdownMenu>
          <Button variant="outline" size="sm">
            <IconPlus />
            <span className="hidden lg:inline">Add Section</span>
          </Button>
        </div>
      </div>
      <TabsContent
        value="outline"
        className="relative flex flex-col gap-4 overflow-auto px-4 lg:px-6"
      >
        <div className="overflow-hidden rounded-lg border">
          {useVirtualization ? (
            <div
              ref={parentRef}
              className="overflow-auto"
              style={{ height: '400px' }}
            >
              <DndContext
                collisionDetection={closestCenter}
                modifiers={[restrictToVerticalAxis]}
                onDragEnd={handleDragEnd}
                sensors={sensors}
                id={sortableId}
              >
                <Table>
                  <TableHeader className="bg-muted sticky top-0 z-10">
                    {table.getHeaderGroups().map(headerGroup => (
                      <TableRow key={headerGroup.id}>
                        {headerGroup.headers.map(header => {
                          return (
                            <TableHead key={header.id} colSpan={header.colSpan}>
                              {header.isPlaceholder
                                ? null
                                : flexRender(
                                    header.column.columnDef.header,
                                    header.getContext(),
                                  )}
                            </TableHead>
                          );
                        })}
                      </TableRow>
                    ))}
                  </TableHeader>
                  <TableBody className="**:data-[slot=table-cell]:first:w-8">
                    {table.getRowModel().rows?.length ? (
                      <SortableContext
                        items={dataIds}
                        strategy={verticalListSortingStrategy}
                      >
                        {virtualizer.getVirtualItems().map(virtualRow => {
                          const row =
                            table.getRowModel().rows[virtualRow.index];
                          return (
                            <DraggableRow
                              key={row.id}
                              row={row}
                              style={{
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                width: '100%',
                                transform: `translateY(${virtualRow.start}px)`,
                              }}
                            />
                          );
                        })}
                      </SortableContext>
                    ) : (
                      <TableRow>
                        <TableCell
                          colSpan={columns.length}
                          className="h-24 text-center"
                        >
                          No results.
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </DndContext>
            </div>
          ) : (
            <DndContext
              collisionDetection={closestCenter}
              modifiers={[restrictToVerticalAxis]}
              onDragEnd={handleDragEnd}
              sensors={sensors}
              id={sortableId}
            >
              <Table>
                <TableHeader className="bg-muted sticky top-0 z-10">
                  {table.getHeaderGroups().map(headerGroup => (
                    <TableRow key={headerGroup.id}>
                      {headerGroup.headers.map(header => {
                        return (
                          <TableHead key={header.id} colSpan={header.colSpan}>
                            {header.isPlaceholder
                              ? null
                              : flexRender(
                                  header.column.columnDef.header,
                                  header.getContext(),
                                )}
                          </TableHead>
                        );
                      })}
                    </TableRow>
                  ))}
                </TableHeader>
                <TableBody className="**:data-[slot=table-cell]:first:w-8">
                  {table.getRowModel().rows?.length ? (
                    <SortableContext
                      items={dataIds}
                      strategy={verticalListSortingStrategy}
                    >
                      {table.getRowModel().rows.map(row => (
                        <DraggableRow key={row.id} row={row} />
                      ))}
                    </SortableContext>
                  ) : (
                    <TableRow>
                      <TableCell
                        colSpan={columns.length}
                        className="h-24 text-center"
                      >
                        No results.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </DndContext>
          )}
        </div>
        {!useVirtualization && (
          <div className="flex items-center justify-between px-4">
            <div className="text-muted-foreground hidden flex-1 text-sm lg:flex">
              {table.getFilteredSelectedRowModel().rows.length} of{' '}
              {table.getFilteredRowModel().rows.length} row(s) selected.
            </div>
            <div className="flex w-full items-center gap-8 lg:w-fit">
              <div className="hidden items-center gap-2 lg:flex">
                <Label htmlFor="rows-per-page" className="text-sm font-medium">
                  Rows per page
                </Label>
                <Select
                  value={`${table.getState().pagination.pageSize}`}
                  onValueChange={value => {
                    table.setPageSize(Number(value));
                  }}
                >
                  <SelectTrigger size="sm" className="w-20" id="rows-per-page">
                    <SelectValue
                      placeholder={table.getState().pagination.pageSize}
                    />
                  </SelectTrigger>
                  <SelectContent side="top">
                    {[10, 20, 30, 40, 50].map(pageSize => (
                      <SelectItem key={pageSize} value={`${pageSize}`}>
                        {pageSize}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="flex w-fit items-center justify-center text-sm font-medium">
                Page {table.getState().pagination.pageIndex + 1} of{' '}
                {table.getPageCount()}
              </div>
              <div className="ml-auto flex items-center gap-2 lg:ml-0">
                <Button
                  variant="outline"
                  className="hidden h-8 w-8 p-0 lg:flex"
                  onClick={() => table.setPageIndex(0)}
                  disabled={!table.getCanPreviousPage()}
                >
                  <span className="sr-only">Go to first page</span>
                  <IconChevronsLeft />
                </Button>
                <Button
                  variant="outline"
                  className="size-8"
                  size="icon"
                  onClick={() => table.previousPage()}
                  disabled={!table.getCanPreviousPage()}
                >
                  <span className="sr-only">Go to previous page</span>
                  <IconChevronLeft />
                </Button>
                <Button
                  variant="outline"
                  className="size-8"
                  size="icon"
                  onClick={() => table.nextPage()}
                  disabled={!table.getCanNextPage()}
                >
                  <span className="sr-only">Go to next page</span>
                  <IconChevronRight />
                </Button>
                <Button
                  variant="outline"
                  className="hidden size-8 lg:flex"
                  size="icon"
                  onClick={() => table.setPageIndex(table.getPageCount() - 1)}
                  disabled={!table.getCanNextPage()}
                >
                  <span className="sr-only">Go to last page</span>
                  <IconChevronsRight />
                </Button>
              </div>
            </div>
          </div>
        )}
      </TabsContent>
      <TabsContent
        value="past-performance"
        className="flex flex-col px-4 lg:px-6"
      >
        <div className="aspect-video w-full flex-1 rounded-lg border border-dashed"></div>
      </TabsContent>
      <TabsContent value="key-personnel" className="flex flex-col px-4 lg:px-6">
        <div className="aspect-video w-full flex-1 rounded-lg border border-dashed"></div>
      </TabsContent>
      <TabsContent
        value="focus-documents"
        className="flex flex-col px-4 lg:px-6"
      >
        <div className="aspect-video w-full flex-1 rounded-lg border border-dashed"></div>
      </TabsContent>
    </Tabs>
  );
}

const chartData = [
  { month: 'January', desktop: 186, mobile: 80 },
  { month: 'February', desktop: 305, mobile: 200 },
  { month: 'March', desktop: 237, mobile: 120 },
  { month: 'April', desktop: 73, mobile: 190 },
  { month: 'May', desktop: 209, mobile: 130 },
  { month: 'June', desktop: 214, mobile: 140 },
];

const chartConfig = {
  desktop: {
    label: 'Desktop',
    color: 'var(--primary)',
  },
  mobile: {
    label: 'Mobile',
    color: 'var(--primary)',
  },
} satisfies ChartConfig;

const TableCellViewer = React.memo(function TableCellViewer({
  item,
}: {
  item: z.infer<typeof schema>;
}) {
  const isMobile = useIsMobile();

  return (
    <Drawer direction={isMobile ? 'bottom' : 'right'}>
      <DrawerTrigger asChild>
        <Button variant="link" className="text-foreground w-fit px-0 text-left">
          {item.header}
        </Button>
      </DrawerTrigger>
      <DrawerContent>
        <DrawerHeader className="gap-1">
          <DrawerTitle>{item.header}</DrawerTitle>
          <DrawerDescription>
            Showing total visitors for the last 6 months
          </DrawerDescription>
        </DrawerHeader>
        <div className="flex flex-col gap-4 overflow-y-auto px-4 text-sm">
          {!isMobile && (
            <>
              <ChartContainer config={chartConfig}>
                <AreaChart
                  accessibilityLayer
                  data={chartData}
                  margin={{
                    left: 0,
                    right: 10,
                  }}
                >
                  <CartesianGrid vertical={false} />
                  <XAxis
                    dataKey="month"
                    tickLine={false}
                    axisLine={false}
                    tickMargin={8}
                    tickFormatter={value => value.slice(0, 3)}
                    hide
                  />
                  <Area
                    dataKey="mobile"
                    type="natural"
                    fill="var(--color-mobile)"
                    fillOpacity={0.6}
                    stroke="var(--color-mobile)"
                    stackId="a"
                  />
                  <Area
                    dataKey="desktop"
                    type="natural"
                    fill="var(--color-desktop)"
                    fillOpacity={0.4}
                    stroke="var(--color-desktop)"
                    stackId="a"
                  />
                </AreaChart>
              </ChartContainer>
              <Separator />
              <div className="grid gap-2">
                <div className="flex gap-2 leading-none font-medium">
                  Trending up by 5.2% this month{' '}
                  <IconTrendingUp className="size-4" />
                </div>
                <div className="text-muted-foreground">
                  Showing total visitors for the last 6 months. This is just
                  some random text to test the layout. It spans multiple lines
                  and should wrap around.
                </div>
              </div>
              <Separator />
            </>
          )}
          <form className="flex flex-col gap-4">
            <div className="flex flex-col gap-3">
              <Label htmlFor="header">Header</Label>
              <Input id="header" defaultValue={item.header} />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div className="flex flex-col gap-3">
                <Label htmlFor="type">Type</Label>
                <Select defaultValue={item.type}>
                  <SelectTrigger id="type" className="w-full">
                    <SelectValue placeholder="Select a type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Table of Contents">
                      Table of Contents
                    </SelectItem>
                    <SelectItem value="Executive Summary">
                      Executive Summary
                    </SelectItem>
                    <SelectItem value="Technical Approach">
                      Technical Approach
                    </SelectItem>
                    <SelectItem value="Design">Design</SelectItem>
                    <SelectItem value="Capabilities">Capabilities</SelectItem>
                    <SelectItem value="Focus Documents">
                      Focus Documents
                    </SelectItem>
                    <SelectItem value="Narrative">Narrative</SelectItem>
                    <SelectItem value="Cover Page">Cover Page</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="flex flex-col gap-3">
                <Label htmlFor="status">Status</Label>
                <Select defaultValue={item.status}>
                  <SelectTrigger id="status" className="w-full">
                    <SelectValue placeholder="Select a status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Done">Done</SelectItem>
                    <SelectItem value="In Progress">In Progress</SelectItem>
                    <SelectItem value="Not Started">Not Started</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div className="flex flex-col gap-3">
                <Label htmlFor="target">Target</Label>
                <Input id="target" defaultValue={item.target} />
              </div>
              <div className="flex flex-col gap-3">
                <Label htmlFor="limit">Limit</Label>
                <Input id="limit" defaultValue={item.limit} />
              </div>
            </div>
            <div className="flex flex-col gap-3">
              <Label htmlFor="reviewer">Reviewer</Label>
              <Select defaultValue={item.reviewer}>
                <SelectTrigger id="reviewer" className="w-full">
                  <SelectValue placeholder="Select a reviewer" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Eddie Lake">Eddie Lake</SelectItem>
                  <SelectItem value="Jamik Tashpulatov">
                    Jamik Tashpulatov
                  </SelectItem>
                  <SelectItem value="Emily Whalen">Emily Whalen</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </form>
        </div>
        <DrawerFooter>
          <Button>Submit</Button>
          <DrawerClose asChild>
            <Button variant="outline">Done</Button>
          </DrawerClose>
        </DrawerFooter>
      </DrawerContent>
    </Drawer>
  );
});



================================================
FILE: src/components/features-4.tsx
================================================
'use client';

import {
  Cpu,
  Fingerprint,
  Pencil,
  Settings2,
  Sparkles,
  Zap,
} from 'lucide-react';
import { motion } from 'motion/react';

/**
 * Render a responsive features section describing the foundation for creative teams management.
 *
 * Each feature is presented as an animated card with an icon, title, and description; cards fade and slide into view with staggered delays and slightly scale/rotate on hover to enhance interactivity.
 *
 * @returns The section element containing the features grid with animated feature cards.
 */
export default function Features() {
  return (
    <section className="py-12 md:py-20">
      <div className="mx-auto max-w-5xl space-y-8 px-6 md:space-y-16">
        <div className="relative z-10 mx-auto max-w-xl space-y-6 text-center md:space-y-12">
          <h2 className="text-4xl font-medium text-balance lg:text-5xl">
            The foundation for creative teams management
          </h2>
          <p>
            Lyra is evolving to be more than just the models. It supports an
            entire to the APIs and platforms helping developers and businesses
            innovate.
          </p>
        </div>

        <div className="relative mx-auto grid max-w-4xl gap-6 sm:grid-cols-2 lg:grid-cols-3">
          <motion.div
            className="border-border/50 bg-card/30 hover:border-border hover:bg-card/50 space-y-3 rounded-2xl border p-8 backdrop-blur-sm transition-colors"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            whileHover={{ scale: 1.02, y: -4 }}
          >
            <div className="flex items-center gap-3">
              <motion.div
                className="rounded-xl bg-yellow-500/10 p-2.5"
                whileHover={{ rotate: 10, scale: 1.1 }}
                animate={{ y: [0, -3, 0] }}
                transition={{
                  y: { duration: 2, repeat: Infinity, ease: 'easeInOut' },
                }}
              >
                <Zap className="size-5 text-yellow-500" />
              </motion.div>
              <h3 className="text-base font-medium">Faaast</h3>
            </div>
            <p className="text-sm">
              It supports an entire helping developers and innovate.
            </p>
          </motion.div>
          <motion.div
            className="border-border/50 bg-card/30 hover:border-border hover:bg-card/50 space-y-3 rounded-2xl border p-8 backdrop-blur-sm transition-colors"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            whileHover={{ scale: 1.02, y: -4 }}
          >
            <div className="flex items-center gap-3">
              <motion.div
                className="rounded-xl bg-blue-500/10 p-2.5"
                whileHover={{ rotate: 10, scale: 1.1 }}
                animate={{ y: [0, -3, 0] }}
                transition={{
                  y: {
                    duration: 2,
                    repeat: Infinity,
                    ease: 'easeInOut',
                    delay: 0.2,
                  },
                }}
              >
                <Cpu className="size-5 text-blue-500" />
              </motion.div>
              <h3 className="text-base font-medium">Powerful</h3>
            </div>
            <p className="text-sm">
              It supports an entire helping developers and businesses.
            </p>
          </motion.div>
          <motion.div
            className="border-border/50 bg-card/30 hover:border-border hover:bg-card/50 space-y-3 rounded-2xl border p-8 backdrop-blur-sm transition-colors"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            whileHover={{ scale: 1.02, y: -4 }}
          >
            <div className="flex items-center gap-3">
              <motion.div
                className="rounded-xl bg-green-500/10 p-2.5"
                whileHover={{ rotate: 10, scale: 1.1 }}
                animate={{ y: [0, -3, 0] }}
                transition={{
                  y: {
                    duration: 2,
                    repeat: Infinity,
                    ease: 'easeInOut',
                    delay: 0.4,
                  },
                }}
              >
                <Fingerprint className="size-5 text-green-500" />
              </motion.div>
              <h3 className="text-base font-medium">Security</h3>
            </div>
            <p className="text-sm">
              It supports an helping developers businesses.
            </p>
          </motion.div>
          <motion.div
            className="border-border/50 bg-card/30 hover:border-border hover:bg-card/50 space-y-3 rounded-2xl border p-8 backdrop-blur-sm transition-colors"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            whileHover={{ scale: 1.02, y: -4 }}
          >
            <div className="flex items-center gap-3">
              <motion.div
                className="rounded-xl bg-teal-500/10 p-2.5"
                whileHover={{ rotate: 10, scale: 1.1 }}
                animate={{ y: [0, -3, 0] }}
                transition={{
                  y: {
                    duration: 2,
                    repeat: Infinity,
                    ease: 'easeInOut',
                    delay: 0.6,
                  },
                }}
              >
                <Pencil className="size-5 text-teal-500" />
              </motion.div>
              <h3 className="text-base font-medium">Customization</h3>
            </div>
            <p className="text-sm">
              It supports helping developers and businesses innovate.
            </p>
          </motion.div>
          <motion.div
            className="border-border/50 bg-card/30 hover:border-border hover:bg-card/50 space-y-3 rounded-2xl border p-8 backdrop-blur-sm transition-colors"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.4 }}
            whileHover={{ scale: 1.02, y: -4 }}
          >
            <div className="flex items-center gap-3">
              <motion.div
                className="rounded-xl bg-orange-500/10 p-2.5"
                whileHover={{ rotate: 10, scale: 1.1 }}
                animate={{ y: [0, -3, 0] }}
                transition={{
                  y: {
                    duration: 2,
                    repeat: Infinity,
                    ease: 'easeInOut',
                    delay: 0.8,
                  },
                }}
              >
                <Settings2 className="size-5 text-orange-500" />
              </motion.div>
              <h3 className="text-base font-medium">Control</h3>
            </div>
            <p className="text-sm">
              It supports helping developers and businesses innovate.
            </p>
          </motion.div>
          <motion.div
            className="border-border/50 bg-card/30 hover:border-border hover:bg-card/50 space-y-3 rounded-2xl border p-8 backdrop-blur-sm transition-colors"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.5 }}
            whileHover={{ scale: 1.02, y: -4 }}
          >
            <div className="flex items-center gap-3">
              <motion.div
                className="rounded-xl bg-rose-500/10 p-2.5"
                whileHover={{ rotate: 10, scale: 1.1 }}
                animate={{ y: [0, -3, 0] }}
                transition={{
                  y: {
                    duration: 2,
                    repeat: Infinity,
                    ease: 'easeInOut',
                    delay: 1.0,
                  },
                }}
              >
                <Sparkles className="size-5 text-rose-500" />
              </motion.div>
              <h3 className="text-base font-medium">Built for AI</h3>
            </div>
            <p className="text-sm">
              It supports helping developers and businesses innovate.
            </p>
          </motion.div>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: src/components/footer.tsx
================================================
'use client';

import { Logo } from '@/components/logo';
import Link from 'next/link';
import { motion } from 'motion/react';

const links = [
  {
    group: 'Product',
    items: [
      {
        title: 'Features',
        href: '#',
      },
      {
        title: 'Solution',
        href: '#',
      },
      {
        title: 'Customers',
        href: '#',
      },
      {
        title: 'Pricing',
        href: '#',
      },
      {
        title: 'Help',
        href: '#',
      },
      {
        title: 'About',
        href: '#',
      },
    ],
  },
  {
    group: 'Solution',
    items: [
      {
        title: 'Startup',
        href: '#',
      },
      {
        title: 'Freelancers',
        href: '#',
      },
      {
        title: 'Organizations',
        href: '#',
      },
      {
        title: 'Students',
        href: '#',
      },
      {
        title: 'Collaboration',
        href: '#',
      },
      {
        title: 'Design',
        href: '#',
      },
      {
        title: 'Management',
        href: '#',
      },
    ],
  },
  {
    group: 'Company',
    items: [
      {
        title: 'About',
        href: '#',
      },
      {
        title: 'Careers',
        href: '#',
      },
      {
        title: 'Blog',
        href: '#',
      },
      {
        title: 'Press',
        href: '#',
      },
      {
        title: 'Contact',
        href: '#',
      },
      {
        title: 'Help',
        href: '#',
      },
    ],
  },
  {
    group: 'Legal',
    items: [
      {
        title: 'Licence',
        href: '#',
      },
      {
        title: 'Privacy',
        href: '#',
      },
      {
        title: 'Cookies',
        href: '#',
      },
      {
        title: 'Security',
        href: '#',
      },
    ],
  },
];

/**
 * Renders the site's footer with navigation groups, a current-year copyright notice, and animated social icons.
 *
 * @returns The footer JSX element containing grouped navigation links, copyright text, and interactive social icon links.
 */
export default function FooterSection() {
  return (
    <footer className="border-b bg-white pt-20 dark:bg-transparent">
      <div className="mx-auto max-w-5xl px-6">
        <div className="grid gap-12 md:grid-cols-5">
          <div className="md:col-span-2">
            <Link href="/" aria-label="go home" className="block size-fit">
              <Logo />
            </Link>
          </div>

          <div className="grid grid-cols-2 gap-6 sm:grid-cols-4 md:col-span-3">
            {links.map((link, index) => (
              <div key={index} className="space-y-4 text-sm">
                <span className="block font-medium">{link.group}</span>
                {link.items.map((item, index) => (
                  <Link
                    key={index}
                    href={item.href}
                    className="text-muted-foreground hover:text-primary block duration-150"
                  >
                    <span>{item.title}</span>
                  </Link>
                ))}
              </div>
            ))}
          </div>
        </div>
        <div className="mt-12 flex flex-wrap items-end justify-between gap-6 border-t py-6">
          <span className="text-muted-foreground order-last block text-center text-sm md:order-first">
            © {new Date().getFullYear()} Tailark, All rights reserved
          </span>
          <div className="order-first flex flex-wrap justify-center gap-6 text-sm md:order-last">
            <motion.div
              whileHover={{ scale: 1.2, rotate: 5 }}
              whileTap={{ scale: 0.9 }}
            >
              <Link
                href="#"
                target="_blank"
                rel="noopener noreferrer"
                aria-label="X/Twitter"
                className="text-muted-foreground hover:text-primary block"
              >
                <svg
                  className="size-6"
                  xmlns="http://www.w3.org/2000/svg"
                  width="1em"
                  height="1em"
                  viewBox="0 0 24 24"
                >
                  <path
                    fill="currentColor"
                    d="M10.488 14.651L15.25 21h7l-7.858-10.478L20.93 3h-2.65l-5.117 5.886L8.75 3h-7l7.51 10.015L2.32 21h2.65zM16.25 19L5.75 5h2l10.5 14z"
                  ></path>
                </svg>
              </Link>
            </motion.div>
            <motion.div
              whileHover={{ scale: 1.2, rotate: 5 }}
              whileTap={{ scale: 0.9 }}
            >
              <Link
                href="#"
                target="_blank"
                rel="noopener noreferrer"
                aria-label="LinkedIn"
                className="text-muted-foreground hover:text-primary block"
              >
                <svg
                  className="size-6"
                  xmlns="http://www.w3.org/2000/svg"
                  width="1em"
                  height="1em"
                  viewBox="0 0 24 24"
                >
                  <path
                    fill="currentColor"
                    d="M19 3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2zm-.5 15.5v-5.3a3.26 3.26 0 0 0-3.26-3.26c-.85 0-1.84.52-2.32 1.3v-1.11h-2.79v8.37h2.79v-4.93c0-.77.62-1.4 1.39-1.4a1.4 1.4 0 0 1 1.4 1.4v4.93zM6.88 8.56a1.68 1.68 0 0 0 1.68-1.68c0-.93-.75-1.69-1.68-1.69a1.69 1.69 0 0 0-1.69 1.69c0 .93.76 1.68 1.69 1.68m1.39 9.94v-8.37H5.5v8.37z"
                  ></path>
                </svg>
              </Link>
            </motion.div>
            <motion.div
              whileHover={{ scale: 1.2, rotate: 5 }}
              whileTap={{ scale: 0.9 }}
            >
              <Link
                href="#"
                target="_blank"
                rel="noopener noreferrer"
                aria-label="Facebook"
                className="text-muted-foreground hover:text-primary block"
              >
                <svg
                  className="size-6"
                  xmlns="http://www.w3.org/2000/svg"
                  width="1em"
                  height="1em"
                  viewBox="0 0 24 24"
                >
                  <path
                    fill="currentColor"
                    d="M22 12c0-5.52-4.48-10-10-10S2 6.48 2 12c0 4.84 3.44 8.87 8 9.8V15H8v-3h2V9.5C10 7.57 11.57 6 13.5 6H16v3h-2c-.55 0-1 .45-1 1v2h3v3h-3v6.95c5.05-.5 9-4.76 9-9.95"
                  ></path>
                </svg>
              </Link>
            </motion.div>
            <motion.div
              whileHover={{ scale: 1.2, rotate: 5 }}
              whileTap={{ scale: 0.9 }}
            >
              <Link
                href="#"
                target="_blank"
                rel="noopener noreferrer"
                aria-label="Threads"
                className="text-muted-foreground hover:text-primary block"
              >
                <svg
                  className="size-6"
                  xmlns="http://www.w3.org/2000/svg"
                  width="1em"
                  height="1em"
                  viewBox="0 0 24 24"
                >
                  <path
                    fill="none"
                    stroke="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="1.5"
                    d="M19.25 8.505c-1.577-5.867-7-5.5-7-5.5s-7.5-.5-7.5 8.995s7.5 8.996 7.5 8.996s4.458.296 6.5-3.918c.667-1.858.5-5.573-6-5.573c0 0-3 0-3 2.5c0 .976 1 2 2.5 2s3.171-1.027 3.5-3c1-6-4.5-6.5-6-4"
                    color="currentColor"
                  ></path>
                </svg>
              </Link>
            </motion.div>
            <motion.div
              whileHover={{ scale: 1.2, rotate: 5 }}
              whileTap={{ scale: 0.9 }}
            >
              <Link
                href="#"
                target="_blank"
                rel="noopener noreferrer"
                aria-label="Instagram"
                className="text-muted-foreground hover:text-primary block"
              >
                <svg
                  className="size-6"
                  xmlns="http://www.w3.org/2000/svg"
                  width="1em"
                  height="1em"
                  viewBox="0 0 24 24"
                >
                  <path
                    fill="currentColor"
                    d="M7.8 2h8.4C19.4 2 22 4.6 22 7.8v8.4a5.8 5.8 0 0 1-5.8 5.8H7.8C4.6 22 2 19.4 2 16.2V7.8A5.8 5.8 0 0 1 7.8 2m-.2 2A3.6 3.6 0 0 0 4 7.6v8.8C4 18.39 5.61 20 7.6 20h8.8a3.6 3.6 0 0 0 3.6-3.6V7.6C20 5.61 18.39 4 16.4 4zm9.65 1.5a1.25 1.25 0 0 1 1.25 1.25A1.25 1.25 0 0 1 17.25 8A1.25 1.25 0 0 1 16 6.75a1.25 1.25 0 0 1 1.25-1.25M12 7a5 5 0 0 1 5 5a5 5 0 0 1-5 5a5 5 0 0 1-5-5a5 5 0 0 1 5-5m0 2a3 3 0 0 0-3 3a3 3 0 0 0 3 3a3 3 0 0 0 3-3a3 3 0 0 0-3-3"
                  ></path>
                </svg>
              </Link>
            </motion.div>
            <motion.div
              whileHover={{ scale: 1.2, rotate: 5 }}
              whileTap={{ scale: 0.9 }}
            >
              <Link
                href="#"
                target="_blank"
                rel="noopener noreferrer"
                aria-label="TikTok"
                className="text-muted-foreground hover:text-primary block"
              >
                <svg
                  className="size-6"
                  xmlns="http://www.w3.org/2000/svg"
                  width="1em"
                  height="1em"
                  viewBox="0 0 24 24"
                >
                  <path
                    fill="currentColor"
                    d="M16.6 5.82s.51.5 0 0A4.28 4.28 0 0 1 15.54 3h-3.09v12.4a2.59 2.59 0 0 1-2.59 2.5c-1.42 0-2.6-1.16-2.6-2.6c0-1.72 1.66-3.01 3.37-2.48V9.66c-3.45-.46-6.47 2.22-6.47 5.64c0 3.33 2.76 5.7 5.69 5.7c3.14 0 5.69-2.55 5.69-5.7V9.01a7.35 7.35 0 0 0 4.3 1.38V7.3s-1.88.09-3.24-1.48"
                  ></path>
                </svg>
              </Link>
            </motion.div>
          </div>
        </div>
      </div>
    </footer>
  );
}



================================================
FILE: src/components/header.tsx
================================================
'use client';
import Link from 'next/link';
import { Logo } from '@/components/logo';
import { Menu, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import React from 'react';
import { useScroll, motion } from 'motion/react';
import { cn } from '@/lib/utils';
import { ModeToggle } from './ui/modetoggle';

const menuItems = [
  { name: 'Features', href: '#link' },
  { name: 'Solution', href: '#link' },
  { name: 'Pricing', href: '#link' },
  { name: 'About', href: '#link' },
];

export const HeroHeader = () => {
  const [menuState, setMenuState] = React.useState(false);
  const [scrolled, setScrolled] = React.useState(false);
  const { scrollYProgress } = useScroll();

  React.useEffect(() => {
    const unsubscribe = scrollYProgress.on('change', latest => {
      setScrolled(latest > 0.05);
    });
    return () => unsubscribe();
  }, [scrollYProgress]);

  return (
    <header>
      <nav
        data-state={menuState && 'active'}
        className="fixed z-20 w-full pt-2"
      >
        <div
          className={cn(
            'mx-auto max-w-7xl rounded-3xl px-6 transition-all duration-300 lg:px-12',
            scrolled && 'bg-background/50 backdrop-blur-2xl',
          )}
        >
          <motion.div
            key={1}
            className={cn(
              'relative flex flex-wrap items-center justify-between gap-6 py-3 duration-200 lg:gap-0 lg:py-6',
              scrolled && 'lg:py-4',
            )}
          >
            <div className="flex w-full items-center justify-between gap-12 lg:w-auto">
              <Link
                href="/"
                aria-label="home"
                className="flex items-center space-x-2"
              >
                <Logo />
              </Link>

              <button
                onClick={() => setMenuState(!menuState)}
                aria-label={menuState == true ? 'Close Menu' : 'Open Menu'}
                className="relative z-20 -m-2.5 -mr-4 block cursor-pointer p-2.5 lg:hidden"
              >
                <Menu className="m-auto size-6 duration-200 in-data-[state=active]:scale-0 in-data-[state=active]:rotate-180 in-data-[state=active]:opacity-0" />
                <X className="absolute inset-0 m-auto size-6 scale-0 -rotate-180 opacity-0 duration-200 in-data-[state=active]:scale-100 in-data-[state=active]:rotate-0 in-data-[state=active]:opacity-100" />
              </button>

              <div className="hidden lg:block">
                <ul className="flex gap-8 text-sm">
                  {menuItems.map((item, index) => (
                    <li key={index}>
                      <Link
                        href={item.href}
                        className="text-foreground/80 hover:text-foreground block font-medium underline-offset-4 duration-150 hover:underline"
                      >
                        <span>{item.name}</span>
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
            </div>

            <div className="bg-card border-border mb-6 hidden w-full flex-wrap items-center justify-end space-y-8 rounded-3xl border p-6 shadow-2xl shadow-zinc-300/20 in-data-[state=active]:block md:flex-nowrap lg:m-0 lg:flex lg:w-fit lg:gap-6 lg:space-y-0 lg:border-transparent lg:bg-transparent lg:p-0 lg:shadow-none lg:in-data-[state=active]:flex dark:shadow-none dark:lg:bg-transparent">
              <div className="lg:hidden">
                <ul className="space-y-6 text-base">
                  {menuItems.map((item, index) => (
                    <li key={index}>
                      <Link
                        href={item.href}
                        className="text-foreground/80 hover:text-foreground block font-medium duration-150"
                      >
                        <span>{item.name}</span>
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
              <div className="flex w-full flex-col space-y-3 sm:flex-row sm:gap-3 sm:space-y-0 md:w-fit">
                <Button asChild size="sm" className="header-auth-button">
                  <Link href="/login">
                    <span>Login</span>
                  </Link>
                </Button>
                <Button asChild size="sm" className="header-auth-button">
                  <Link href="/signup">
                    <span>Sign Up</span>
                  </Link>
                </Button>
                <ModeToggle />
              </div>
            </div>
          </motion.div>
        </div>
      </nav>
    </header>
  );
};



================================================
FILE: src/components/hero-section.tsx
================================================
'use client';

import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { HeroHeader } from './header';
import { InfiniteSlider } from '@/components/ui/infinite-slider';
import { ProgressiveBlur } from '@/components/ui/progressive-blur';
import { ChevronRight } from 'lucide-react';
import { motion } from 'motion/react';

/**
 * Render the page hero area with header, headline, primary call-to-action buttons, a video showcase, and a continuous partner logo slider with decorative overlays.
 *
 * @returns A React element containing the hero header, the main hero content (headline, subtitle, animated CTAs, and background video), and the logos section with an infinite slider and visual decorations.
 */
export default function HeroSection() {
  return (
    <>
      <HeroHeader />
      <main className="overflow-x-hidden">
        <section>
          <div className="py-24 md:pb-32 lg:pt-72 lg:pb-36">
            <div className="relative mx-auto flex max-w-7xl flex-col px-6 lg:block lg:px-12">
              <div className="mx-auto max-w-lg text-center lg:ml-0 lg:max-w-full lg:text-left">
                <h1 className="mt-8 max-w-2xl text-5xl text-balance md:text-6xl lg:mt-16 xl:text-7xl">
                  Build 10x Faster with NS
                </h1>
                <p className="mt-8 max-w-2xl text-lg text-balance">
                  Highly customizable components for building modern websites
                  and applications you mean it.
                </p>

                <div className="mt-12 flex flex-col items-center justify-center gap-2 sm:flex-row lg:justify-start">
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5 }}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Button
                      asChild
                      size="lg"
                      className="h-12 rounded-full pr-3 pl-5 text-base"
                    >
                      <Link href="#link">
                        <span className="text-nowrap">Start Building</span>
                        <motion.div
                          whileHover={{ x: 2 }}
                          transition={{
                            type: 'spring',
                            stiffness: 400,
                            damping: 10,
                          }}
                        >
                          <ChevronRight className="ml-1" />
                        </motion.div>
                      </Link>
                    </Button>
                  </motion.div>
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: 0.1 }}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Button
                      key={2}
                      asChild
                      size="lg"
                      variant="outline"
                      className="bg-card hover:bg-accent hover:border-foreground/20 h-12 rounded-full border-2 pr-3 pl-5 text-base font-medium"
                    >
                      <Link href="#link">
                        <span className="text-nowrap">Request a demo</span>
                        <motion.div
                          whileHover={{ x: 2 }}
                          transition={{
                            type: 'spring',
                            stiffness: 400,
                            damping: 10,
                          }}
                        >
                          <ChevronRight className="ml-1" />
                        </motion.div>
                      </Link>
                    </Button>
                  </motion.div>
                </div>
              </div>
            </div>
            <div className="absolute inset-1 -z-10 aspect-2/3 overflow-hidden rounded-3xl border border-black/10 lg:aspect-video lg:rounded-[3rem] dark:border-white/5">
              <video
                autoPlay
                loop
                muted
                playsInline
                preload="metadata"
                className="size-full object-cover opacity-50 invert dark:opacity-35 dark:invert-0 dark:lg:opacity-75"
                src="https://ik.imagekit.io/lrigu76hy/tailark/dna-video.mp4?updatedAt=1745736251477"
              ></video>
            </div>
          </div>
        </section>
        <section className="bg-background pb-2">
          <div className="group relative m-auto max-w-7xl px-6">
            <div className="flex flex-col items-center md:flex-row">
              <div className="md:max-w-44 md:border-r md:pr-6">
                <p className="text-end text-sm">Powering the best teams</p>
              </div>
              <div className="relative py-6 md:w-[calc(100%-11rem)]">
                <InfiniteSlider speedOnHover={20} speed={40} gap={112}>
                  <div className="flex">
                    <Image
                      className="mx-auto dark:invert"
                      src="https://html.tailus.io/blocks/customers/nvidia.svg"
                      alt="Nvidia Logo"
                      width={120}
                      height={32}
                      style={{ width: 'auto', height: 'auto' }}
                    />
                  </div>

                  <div className="flex">
                    <Image
                      className="mx-auto dark:invert"
                      src="https://html.tailus.io/blocks/customers/column.svg"
                      alt="Column Logo"
                      width={80}
                      height={32}
                      style={{ width: 'auto', height: 'auto' }}
                    />
                  </div>
                  <div className="flex">
                    <Image
                      className="mx-auto dark:invert"
                      src="https://html.tailus.io/blocks/customers/github.svg"
                      alt="GitHub Logo"
                      width={80}
                      height={32}
                      style={{ width: 'auto', height: 'auto' }}
                    />
                  </div>
                  <div className="flex">
                    <Image
                      className="mx-auto dark:invert"
                      src="https://html.tailus.io/blocks/customers/nike.svg"
                      alt="Nike Logo"
                      width={60}
                      height={32}
                      style={{ width: 'auto', height: 'auto' }}
                    />
                  </div>
                  <div className="flex">
                    <Image
                      className="mx-auto dark:invert"
                      src="https://html.tailus.io/blocks/customers/lemonsqueezy.svg"
                      alt="Lemon Squeezy Logo"
                      width={120}
                      height={32}
                      style={{ width: 'auto', height: 'auto' }}
                    />
                  </div>
                  <div className="flex">
                    <Image
                      className="mx-auto dark:invert"
                      src="https://html.tailus.io/blocks/customers/laravel.svg"
                      alt="Laravel Logo"
                      width={100}
                      height={32}
                      style={{ width: 'auto', height: 'auto' }}
                    />
                  </div>
                  <div className="flex">
                    <Image
                      className="mx-auto dark:invert"
                      src="https://html.tailus.io/blocks/customers/lilly.svg"
                      alt="Lilly Logo"
                      width={80}
                      height={32}
                      style={{ width: 'auto', height: 'auto' }}
                    />
                  </div>

                  <div className="flex">
                    <Image
                      className="mx-auto dark:invert"
                      src="https://html.tailus.io/blocks/customers/openai.svg"
                      alt="OpenAI Logo"
                      width={100}
                      height={32}
                      style={{ width: 'auto', height: 'auto' }}
                    />
                  </div>
                </InfiniteSlider>

                <div className="from-background absolute inset-y-0 left-0 w-20 bg-linear-to-r"></div>
                <div className="from-background absolute inset-y-0 right-0 w-20 bg-linear-to-l"></div>
                <ProgressiveBlur
                  className="pointer-events-none absolute top-0 left-0 h-full w-20"
                  direction="left"
                  blurIntensity={1}
                />
                <ProgressiveBlur
                  className="pointer-events-none absolute top-0 right-0 h-full w-20"
                  direction="right"
                  blurIntensity={1}
                />
              </div>
            </div>
          </div>
        </section>
      </main>
    </>
  );
}



================================================
FILE: src/components/home-page-wrapper.tsx
================================================
'use client';

import { useTheme } from 'next-themes';

/**
 * Wrapper component for the home page that applies landing-page specific styling
 * while staying in sync with the active theme (user preference or system fallback).
 */
export function HomePageWrapper({ children }: { children: React.ReactNode }) {
  const { resolvedTheme } = useTheme();

  // Return null until theme is resolved to avoid hydration mismatch
  if (!resolvedTheme) {
    return null;
  }

  return (
    <div data-theme={resolvedTheme} className="home-page-wrapper">
      {children}
    </div>
  );
}



================================================
FILE: src/components/logo.tsx
================================================
import { cn } from '@/lib/utils';

export const Logo = ({
  className,
  uniColor,
}: {
  className?: string;
  uniColor?: boolean;
}) => {
  return (
    <svg
      viewBox="0 0 78 18"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn('text-foreground h-5 w-auto', className)}
    >
      <path
        d="M3 0H5V18H3V0ZM13 0H15V18H13V0ZM18 3V5H0V3H18ZM0 15V13H18V15H0Z"
        fill={uniColor ? 'currentColor' : 'url(#logo-gradient)'}
      />
      <path
        d="M27.06 7.054V12.239C27.06 12.5903 27.1393 12.8453 27.298 13.004C27.468 13.1513 27.7513 13.225 28.148 13.225H29.338V14.84H27.808C26.9353 14.84 26.2667 14.636 25.802 14.228C25.3373 13.82 25.105 13.157 25.105 12.239V7.054H24V5.473H25.105V3.144H27.06V5.473H29.338V7.054H27.06ZM30.4782 10.114C30.4782 9.17333 30.6709 8.34033 31.0562 7.615C31.4529 6.88967 31.9855 6.32867 32.6542 5.932C33.3342 5.524 34.0822 5.32 34.8982 5.32C35.6349 5.32 36.2752 5.46733 36.8192 5.762C37.3745 6.04533 37.8165 6.40233 38.1452 6.833V5.473H40.1002V14.84H38.1452V13.446C37.8165 13.888 37.3689 14.2563 36.8022 14.551C36.2355 14.8457 35.5895 14.993 34.8642 14.993C34.0595 14.993 33.3229 14.789 32.6542 14.381C31.9855 13.9617 31.4529 13.3837 31.0562 12.647C30.6709 11.899 30.4782 11.0547 30.4782 10.114ZM38.1452 10.148C38.1452 9.502 38.0092 8.941 37.7372 8.465C37.4765 7.989 37.1309 7.62633 36.7002 7.377C36.2695 7.12767 35.8049 7.003 35.3062 7.003C34.8075 7.003 34.3429 7.12767 33.9122 7.377C33.4815 7.615 33.1302 7.972 32.8582 8.448C32.5975 8.91267 32.4672 9.468 32.4672 10.114C32.4672 10.76 32.5975 11.3267 32.8582 11.814C33.1302 12.3013 33.4815 12.6753 33.9122 12.936C34.3542 13.1853 34.8189 13.31 35.3062 13.31C35.8049 13.31 36.2695 13.1853 36.7002 12.936C37.1309 12.6867 37.4765 12.324 37.7372 11.848C38.0092 11.3607 38.1452 10.794 38.1452 10.148ZM43.6317 4.232C43.2803 4.232 42.9857 4.113 42.7477 3.875C42.5097 3.637 42.3907 3.34233 42.3907 2.991C42.3907 2.63967 42.5097 2.345 42.7477 2.107C42.9857 1.869 43.2803 1.75 43.6317 1.75C43.9717 1.75 44.2607 1.869 44.4987 2.107C44.7367 2.345 44.8557 2.63967 44.8557 2.991C44.8557 3.34233 44.7367 3.637 44.4987 3.875C44.2607 4.113 43.9717 4.232 43.6317 4.232ZM44.5837 5.473V14.84H42.6457V5.473H44.5837ZM49.0661 2.26V14.84H47.1281V2.26H49.0661ZM50.9645 10.114C50.9645 9.17333 51.1572 8.34033 51.5425 7.615C51.9392 6.88967 52.4719 6.32867 53.1405 5.932C53.8205 5.524 54.5685 5.32 55.3845 5.32C56.1212 5.32 56.7615 5.46733 57.3055 5.762C57.8609 6.04533 58.3029 6.40233 58.6315 6.833V5.473H60.5865V14.84H58.6315V13.446C58.3029 13.888 57.8552 14.2563 57.2885 14.551C56.7219 14.8457 56.0759 14.993 55.3505 14.993C54.5459 14.993 53.8092 14.789 53.1405 14.381C52.4719 13.9617 51.9392 13.3837 51.5425 12.647C51.1572 11.899 50.9645 11.0547 50.9645 10.114ZM58.6315 10.148C58.6315 9.502 58.4955 8.941 58.2235 8.465C57.9629 7.989 57.6172 7.62633 57.1865 7.377C56.7559 7.12767 56.2912 7.003 55.7925 7.003C55.2939 7.003 54.8292 7.12767 54.3985 7.377C53.9679 7.615 53.6165 7.972 53.3445 8.448C53.0839 8.91267 52.9535 9.468 52.9535 10.114C52.9535 10.76 53.0839 11.3267 53.3445 11.814C53.6165 12.3013 53.9679 12.6753 54.3985 12.936C54.8405 13.1853 55.3052 13.31 55.7925 13.31C56.2912 13.31 56.7559 13.1853 57.1865 12.936C57.6172 12.6867 57.9629 12.324 58.2235 11.848C58.4955 11.3607 58.6315 10.794 58.6315 10.148ZM65.07 6.833C65.3533 6.357 65.7273 5.98867 66.192 5.728C66.668 5.456 67.229 5.32 67.875 5.32V7.326H67.382C66.6227 7.326 66.0447 7.51867 65.648 7.904C65.2627 8.28933 65.07 8.958 65.07 9.91V14.84H63.132V5.473H65.07V6.833ZM73.3624 10.165L77.6804 14.84H75.0624L71.5944 10.811V14.84H69.6564V2.26H71.5944V9.57L74.9944 5.473H77.6804L73.3624 10.165Z"
        fill="currentColor"
      />
      <defs>
        <linearGradient
          id="logo-gradient"
          x1="10"
          y1="0"
          x2="10"
          y2="20"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="#9B99FE" />
          <stop offset="1" stopColor="#2BC8B7" />
        </linearGradient>
      </defs>
    </svg>
  );
};

export const LogoIcon = ({
  className,
  uniColor,
}: {
  className?: string;
  uniColor?: boolean;
}) => {
  return (
    <svg
      width="18"
      height="18"
      viewBox="0 0 18 18"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn('size-5', className)}
    >
      <path
        d="M3 0H5V18H3V0ZM13 0H15V18H13V0ZM18 3V5H0V3H18ZM0 15V13H18V15H0Z"
        fill={uniColor ? 'currentColor' : 'url(#logo-gradient)'}
      />
      <defs>
        <linearGradient
          id="logo-gradient"
          x1="10"
          y1="0"
          x2="10"
          y2="20"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="#9B99FE" />
          <stop offset="1" stopColor="#2BC8B7" />
        </linearGradient>
      </defs>
    </svg>
  );
};

export const LogoStroke = ({ className }: { className?: string }) => {
  return (
    <svg
      className={cn('size-7 w-7', className)}
      viewBox="0 0 71 25"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M61.25 1.625L70.75 1.5625C70.75 4.77083 70.25 7.79167 69.25 10.625C68.2917 13.4583 66.8958 15.9583 65.0625 18.125C63.2708 20.25 61.125 21.9375 58.625 23.1875C56.1667 24.3958 53.4583 25 50.5 25C46.875 25 43.6667 24.2708 40.875 22.8125C38.125 21.3542 35.125 19.2083 31.875 16.375C29.75 14.4167 27.7917 12.8958 26 11.8125C24.2083 10.7292 22.2708 10.1875 20.1875 10.1875C18.0625 10.1875 16.25 10.7083 14.75 11.75C13.25 12.75 12.0833 14.1875 11.25 16.0625C10.4583 17.9375 10.0625 20.1875 10.0625 22.8125L0 22.9375C0 19.6875 0.479167 16.6667 1.4375 13.875C2.4375 11.0833 3.83333 8.64583 5.625 6.5625C7.41667 4.47917 9.54167 2.875 12 1.75C14.5 0.583333 17.2292 0 20.1875 0C23.8542 0 27.1042 0.770833 29.9375 2.3125C32.8125 3.85417 35.7708 5.97917 38.8125 8.6875C41.1042 10.7708 43.1042 12.3333 44.8125 13.375C46.5625 14.375 48.4583 14.875 50.5 14.875C52.6667 14.875 54.5417 14.3125 56.125 13.1875C57.75 12.0625 59 10.5 59.875 8.5C60.7917 6.5 61.25 4.20833 61.25 1.625Z"
        fill="none"
        strokeWidth={0.5}
        stroke="currentColor"
      />
    </svg>
  );
};



================================================
FILE: src/components/nav-documents.tsx
================================================
'use client';

import Link from 'next/link';
import {
  IconDots,
  IconFolder,
  IconShare3,
  IconTrash,
  type Icon,
} from '@tabler/icons-react';

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from '@/components/ui/sidebar';

/**
 * Renders a "Documents" sidebar group with a menu item for each document and a per-item overflow menu.
 *
 * Each item displays its icon and name; items with `url` equal to `'#'` are rendered as a plain anchor, otherwise they are wrapped with Next.js Link. Each item exposes an overflow dropdown with "Open", "Share", and a destructive "Delete" action. On mobile the dropdown is positioned below the trigger; on larger screens it appears to the right.
 *
 * @param items - Array of document descriptors. Each descriptor must include `name`, `url`, and `icon`.
 * @returns The rendered sidebar group element containing the documents list and a final "More" entry.
 */
export function NavDocuments({
  items,
}: {
  items: {
    name: string;
    url: string;
    icon: Icon;
  }[];
}) {
  const { isMobile } = useSidebar();

  return (
    <SidebarGroup className="group-data-[collapsible=icon]:hidden">
      <SidebarGroupLabel>Documents</SidebarGroupLabel>
      <SidebarMenu>
        {items.map(item => (
          <SidebarMenuItem key={item.name}>
            {item.url !== '#' ? (
              <SidebarMenuButton asChild>
                <Link href={item.url}>
                  <item.icon />
                  <span>{item.name}</span>
                </Link>
              </SidebarMenuButton>
            ) : (
              <SidebarMenuButton asChild>
                <a href={item.url}>
                  <item.icon />
                  <span>{item.name}</span>
                </a>
              </SidebarMenuButton>
            )}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <SidebarMenuAction
                  showOnHover
                  className="rounded-sm data-[state=open]:bg-[var(--interactive-hover)]"
                >
                  <IconDots />
                  <span className="sr-only">More</span>
                </SidebarMenuAction>
              </DropdownMenuTrigger>
              <DropdownMenuContent
                className="w-24 rounded-lg"
                side={isMobile ? 'bottom' : 'right'}
                align={isMobile ? 'end' : 'start'}
              >
                <DropdownMenuItem>
                  <IconFolder />
                  <span>Open</span>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <IconShare3 />
                  <span>Share</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem variant="destructive">
                  <IconTrash />
                  <span>Delete</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </SidebarMenuItem>
        ))}
        <SidebarMenuItem>
          <SidebarMenuButton className="text-sidebar-foreground/70">
            <IconDots className="text-sidebar-foreground/70" />
            <span>More</span>
          </SidebarMenuButton>
        </SidebarMenuItem>
      </SidebarMenu>
    </SidebarGroup>
  );
}



================================================
FILE: src/components/nav-main.tsx
================================================
'use client';

import Link from 'next/link';
import { IconCirclePlusFilled, IconMail, type Icon } from '@tabler/icons-react';

import { Button } from '@/components/ui/button';
import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from '@/components/ui/sidebar';

/**
 * Render the main navigation section of the sidebar with a Quick Create control and a list of navigation items.
 *
 * @param items - Array of navigation items. Each item must include `title` (display text) and `url` (link target). If `url` is `'#'` the item is rendered as a non-link button. `icon` is optional and, when provided, is rendered before the title.
 * @returns A JSX element representing a SidebarGroup containing the Quick Create control and the mapped navigation items.
 */
export function NavMain({
  items,
}: {
  items: {
    title: string;
    url: string;
    icon?: Icon;
  }[];
}) {
  return (
    <SidebarGroup>
      <SidebarGroupContent className="flex flex-col gap-2">
        <SidebarMenu>
          <SidebarMenuItem className="flex items-center gap-2">
            <SidebarMenuButton
              tooltip="Quick Create"
              className="bg-primary text-primary-foreground hover:text-primary-foreground active:text-primary-foreground min-w-8 duration-200 ease-linear hover:bg-[var(--nav-active)] active:bg-[var(--nav-active)]"
            >
              <IconCirclePlusFilled />
              <span>Quick Create</span>
            </SidebarMenuButton>
            <Button
              size="icon"
              className="size-8 group-data-[collapsible=icon]:opacity-0"
              variant="outline"
            >
              <IconMail />
              <span className="sr-only">Inbox</span>
            </Button>
          </SidebarMenuItem>
        </SidebarMenu>
        <SidebarMenu>
          {items.map(item => (
            <SidebarMenuItem key={item.title}>
              {item.url !== '#' ? (
                <SidebarMenuButton tooltip={item.title} asChild>
                  <Link href={item.url}>
                    {item.icon && <item.icon />}
                    <span>{item.title}</span>
                  </Link>
                </SidebarMenuButton>
              ) : (
                <SidebarMenuButton tooltip={item.title}>
                  {item.icon && <item.icon />}
                  <span>{item.title}</span>
                </SidebarMenuButton>
              )}
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>
  );
}



================================================
FILE: src/components/nav-secondary.tsx
================================================
'use client';

import Link from 'next/link';
import * as React from 'react';
import { type Icon } from '@tabler/icons-react';

import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from '@/components/ui/sidebar';

export function NavSecondary({
  items,
  ...props
}: {
  items: {
    title: string;
    url: string;
    icon: Icon;
  }[];
} & React.ComponentPropsWithoutRef<typeof SidebarGroup>) {
  return (
    <SidebarGroup {...props}>
      <SidebarGroupContent>
        <SidebarMenu>
          {items.map(item => (
            <SidebarMenuItem key={item.title}>
              {item.url !== '#' ? (
                <SidebarMenuButton asChild>
                  <Link href={item.url}>
                    <item.icon />
                    <span>{item.title}</span>
                  </Link>
                </SidebarMenuButton>
              ) : (
                <SidebarMenuButton asChild>
                  <a href={item.url}>
                    <item.icon />
                    <span>{item.title}</span>
                  </a>
                </SidebarMenuButton>
              )}
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>
  );
}



================================================
FILE: src/components/nav-user.tsx
================================================
'use client';

import {
  IconCreditCard,
  IconDotsVertical,
  IconLogout,
  IconNotification,
  IconUserCircle,
} from '@tabler/icons-react';

import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from '@/components/ui/sidebar';

export function NavUser({
  user,
}: {
  user: {
    name: string;
    email: string;
    avatar: string;
  };
}) {
  const { isMobile } = useSidebar();

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <Avatar className="h-8 w-8 rounded-lg grayscale">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback className="rounded-lg">CN</AvatarFallback>
              </Avatar>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-medium">{user.name}</span>
                <span className="text-muted-foreground truncate text-xs">
                  {user.email}
                </span>
              </div>
              <IconDotsVertical className="ml-auto size-4" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg"
            side={isMobile ? 'bottom' : 'right'}
            align="end"
            sideOffset={4}
          >
            <DropdownMenuLabel className="p-0 font-normal">
              <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                <Avatar className="h-8 w-8 rounded-lg">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback className="rounded-lg">CN</AvatarFallback>
                </Avatar>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-medium">{user.name}</span>
                  <span className="text-muted-foreground truncate text-xs">
                    {user.email}
                  </span>
                </div>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <IconUserCircle />
                Account
              </DropdownMenuItem>
              <DropdownMenuItem>
                <IconCreditCard />
                Billing
              </DropdownMenuItem>
              <DropdownMenuItem>
                <IconNotification />
                Notifications
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuItem>
              <IconLogout />
              Log out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  );
}



================================================
FILE: src/components/performance-monitor.tsx
================================================
'use client';

import { usePerformance } from '@/hooks/use-performance';
import { useEffect } from 'react';

/**
 * Client React component that logs structured performance metrics to the console once metrics are loaded and LCP is available.
 *
 * When metrics are ready, logs an object containing LCP (value with rating), FCP (value with rating or "Not available"), TTFB (value with rating or "Not available"), and LoadTime (value or "Not available").
 *
 * @returns `null` — the component renders nothing
 */
export function PerformanceMonitor() {
  const { metrics, isLoading, getLCPRating, getFCPRating, getTTFBRating } =
    usePerformance();

  useEffect(() => {
    if (!isLoading && metrics.lcp) {
      console.log('🚀 Performance Metrics:', {
        LCP: `${metrics.lcp.toFixed(2)}ms (${getLCPRating()})`,
        FCP: metrics.fcp
          ? `${metrics.fcp.toFixed(2)}ms (${getFCPRating()})`
          : 'Not available',
        TTFB: metrics.ttfb
          ? `${metrics.ttfb.toFixed(2)}ms (${getTTFBRating()})`
          : 'Not available',
        LoadTime: metrics.loadTime
          ? `${metrics.loadTime.toFixed(2)}ms`
          : 'Not available',
      });
    }
  }, [metrics, isLoading, getLCPRating, getFCPRating, getTTFBRating]);

  // This component doesn't render anything visible
  return null;
}



================================================
FILE: src/components/pricing.tsx
================================================
'use client';

import Link from 'next/link';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Check } from 'lucide-react';
import { motion } from 'motion/react';

/**
 * Renders a responsive pricing section with three animated pricing tiers: Free, Pro (Popular), and Startup.
 *
 * @returns A JSX element containing the pricing section markup with tiered cards, feature lists, action links, and entry/hover animations.
 */
export default function Pricing() {
  return (
    <section className="pt-8 pb-16 md:pt-16 md:pb-32">
      <div className="mx-auto max-w-6xl px-6">
        <div className="mx-auto max-w-2xl space-y-6 text-center">
          <h1 className="text-center text-4xl font-semibold lg:text-5xl">
            Pricing that Scales with You
          </h1>
          <p>
            Gemini is evolving to be more than just the models. It supports an
            entire to the APIs and platforms helping developers and businesses
            innovate.
          </p>
        </div>

        <div className="mt-8 grid gap-6 md:mt-20 md:grid-cols-3">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            whileHover={{ scale: 1.02 }}
          >
            <Card>
              <CardHeader>
                <CardTitle className="font-medium">Free</CardTitle>

                <span className="my-3 block text-2xl font-semibold">
                  $0 / mo
                </span>

                <CardDescription className="text-sm">
                  Per editor
                </CardDescription>
                <motion.div
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Button asChild variant="outline" className="mt-4 w-full">
                    <Link href="/dashboard/subscriptions">Get Started</Link>
                  </Button>
                </motion.div>
              </CardHeader>

              <CardContent className="space-y-4">
                <hr className="border-dashed" />

                <ul className="list-outside space-y-3 text-sm">
                  {[
                    'Basic Analytics Dashboard',
                    '5GB Cloud Storage',
                    'Email and Chat Support',
                  ].map((item, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <motion.div whileHover={{ scale: 1.1 }}>
                        <Check className="size-3" />
                      </motion.div>
                      {item}
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            whileHover={{ scale: 1.02 }}
          >
            <Card className="relative">
              <span className="absolute inset-x-0 -top-3 mx-auto flex h-6 w-fit items-center rounded-full bg-linear-to-br/increasing from-purple-400 to-amber-300 px-3 py-1 text-xs font-medium text-amber-950 ring-1 ring-white/20 ring-offset-1 ring-offset-gray-950/5 ring-inset">
                Popular
              </span>

              <CardHeader>
                <CardTitle className="font-medium">Pro</CardTitle>

                <span className="my-3 block text-2xl font-semibold">
                  $19 / mo
                </span>

                <CardDescription className="text-sm">
                  Per editor
                </CardDescription>

                <motion.div
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Button
                    asChild
                    className="mt-4 w-full hover:bg-gradient-to-r hover:from-purple-500 hover:to-pink-500 hover:text-white"
                  >
                    <Link href="/dashboard/subscriptions">Upgrade</Link>
                  </Button>
                </motion.div>
              </CardHeader>

              <CardContent className="space-y-4">
                <hr className="border-dashed" />

                <ul className="list-outside space-y-3 text-sm">
                  {[
                    'Everything in Free Plan',
                    '5GB Cloud Storage',
                    'Email and Chat Support',
                    'Access to Community Forum',
                    'Single User Access',
                    'Access to Basic Templates',
                    'Mobile App Access',
                    '1 Custom Report Per Month',
                    'Monthly Product Updates',
                    'Standard Security Features',
                  ].map((item, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <motion.div whileHover={{ scale: 1.1 }}>
                        <Check className="size-3" />
                      </motion.div>
                      {item}
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            whileHover={{ scale: 1.02 }}
          >
            <Card className="flex flex-col">
              <CardHeader>
                <CardTitle className="font-medium">Startup</CardTitle>

                <span className="my-3 block text-2xl font-semibold">
                  $29 / mo
                </span>

                <CardDescription className="text-sm">
                  Per editor
                </CardDescription>

                <motion.div
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Button asChild variant="outline" className="mt-4 w-full">
                    <Link href="/dashboard/subscriptions">Get Started</Link>
                  </Button>
                </motion.div>
              </CardHeader>

              <CardContent className="space-y-4">
                <hr className="border-dashed" />

                <ul className="list-outside space-y-3 text-sm">
                  {[
                    'Everything in Pro Plan',
                    '5GB Cloud Storage',
                    'Email and Chat Support',
                  ].map((item, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <motion.div whileHover={{ scale: 1.1 }}>
                        <Check className="size-3" />
                      </motion.div>
                      {item}
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: src/components/section-cards.tsx
================================================
import { IconTrendingDown, IconTrendingUp } from '@tabler/icons-react';

import { Badge } from '@/components/ui/badge';
import {
  Card,
  CardAction,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';

export function SectionCards() {
  return (
    <div className="*:data-[slot=card]:from-primary/5 *:data-[slot=card]:to-card dark:*:data-[slot=card]:bg-card grid grid-cols-1 gap-4 px-4 *:data-[slot=card]:bg-gradient-to-t *:data-[slot=card]:shadow-xs lg:px-6 @xl/main:grid-cols-2 @5xl/main:grid-cols-4">
      <Card className="@container/card">
        <CardHeader>
          <CardDescription>Total Revenue</CardDescription>
          <CardTitle className="text-2xl font-semibold tabular-nums @[250px]/card:text-3xl">
            $1,250.00
          </CardTitle>
          <CardAction>
            <Badge variant="outline">
              <IconTrendingUp />
              +12.5%
            </Badge>
          </CardAction>
        </CardHeader>
        <CardFooter className="flex-col items-start gap-1.5 text-sm">
          <div className="line-clamp-1 flex gap-2 font-medium">
            Trending up this month <IconTrendingUp className="size-4" />
          </div>
          <div className="text-muted-foreground">
            Visitors for the last 6 months
          </div>
        </CardFooter>
      </Card>
      <Card className="@container/card">
        <CardHeader>
          <CardDescription>New Customers</CardDescription>
          <CardTitle className="text-2xl font-semibold tabular-nums @[250px]/card:text-3xl">
            1,234
          </CardTitle>
          <CardAction>
            <Badge variant="outline">
              <IconTrendingDown />
              -20%
            </Badge>
          </CardAction>
        </CardHeader>
        <CardFooter className="flex-col items-start gap-1.5 text-sm">
          <div className="line-clamp-1 flex gap-2 font-medium">
            Down 20% this period <IconTrendingDown className="size-4" />
          </div>
          <div className="text-muted-foreground">
            Acquisition needs attention
          </div>
        </CardFooter>
      </Card>
      <Card className="@container/card">
        <CardHeader>
          <CardDescription>Active Accounts</CardDescription>
          <CardTitle className="text-2xl font-semibold tabular-nums @[250px]/card:text-3xl">
            45,678
          </CardTitle>
          <CardAction>
            <Badge variant="outline">
              <IconTrendingUp />
              +12.5%
            </Badge>
          </CardAction>
        </CardHeader>
        <CardFooter className="flex-col items-start gap-1.5 text-sm">
          <div className="line-clamp-1 flex gap-2 font-medium">
            Strong user retention <IconTrendingUp className="size-4" />
          </div>
          <div className="text-muted-foreground">Engagement exceed targets</div>
        </CardFooter>
      </Card>
      <Card className="@container/card">
        <CardHeader>
          <CardDescription>Growth Rate</CardDescription>
          <CardTitle className="text-2xl font-semibold tabular-nums @[250px]/card:text-3xl">
            4.5%
          </CardTitle>
          <CardAction>
            <Badge variant="outline">
              <IconTrendingUp />
              +4.5%
            </Badge>
          </CardAction>
        </CardHeader>
        <CardFooter className="flex-col items-start gap-1.5 text-sm">
          <div className="line-clamp-1 flex gap-2 font-medium">
            Steady performance increase <IconTrendingUp className="size-4" />
          </div>
          <div className="text-muted-foreground">Meets growth projections</div>
        </CardFooter>
      </Card>
    </div>
  );
}



================================================
FILE: src/components/site-header.tsx
================================================
import { Separator } from '@/components/ui/separator';
import { SidebarTrigger } from '@/components/ui/sidebar';
import { ModeToggle } from './ui/modetoggle';
import { ThemeSelector } from './theme-selector';
import { SignoutButton } from './forms/signout';

interface User {
  id: string;
  name: string;
  email: string;
  image?: string | null | undefined;
}

interface SiteHeaderProps {
  user?: User | null;
  pageTitle?: string;
}

export function SiteHeader({ user, pageTitle = 'Dashboard' }: SiteHeaderProps) {
  const firstName = user?.name?.split(' ')[0] || '';

  return (
    <header className="flex h-(--header-height) shrink-0 items-center gap-2 border-b transition-[width,height] ease-linear group-has-data-[collapsible=icon]/sidebar-wrapper:h-(--header-height)">
      <div className="flex w-full items-center gap-1 px-4 lg:gap-2 lg:px-6">
        <SidebarTrigger className="-ml-1" />
        <Separator
          orientation="vertical"
          className="mx-2 data-[orientation=vertical]:h-4"
        />
        <div className="flex flex-col">
          {user && (
            <h1 className="text-base font-medium">
              Welcome, {firstName}! | {pageTitle}
            </h1>
          )}
        </div>
        <div className="ml-auto flex items-center gap-2">
          <ThemeSelector />
          <ModeToggle />
          <SignoutButton className="min-w-[100px]" />
        </div>
      </div>
    </header>
  );
}



================================================
FILE: src/components/stats-2.tsx
================================================
'use client';

import { motion } from 'motion/react';
import { Star, TrendingUp, Boxes } from 'lucide-react';

/**
 * Renders a responsive "Tailark in numbers" stats section with three animated metric cards.
 *
 * Each card displays a metric label and value and animates into view with a subtle scale/fade effect and a hover scale interaction.
 *
 * @returns A JSX element containing the stats section with three animated stat cards.
 */
export default function StatsSection() {
  return (
    <section className="py-12 md:py-20">
      <div className="mx-auto max-w-5xl space-y-8 px-6 md:space-y-16">
        <div className="relative z-10 mx-auto max-w-xl space-y-6 text-center md:space-y-12">
          <h2 className="text-4xl font-medium text-balance lg:text-5xl">
            Tailark in numbers
          </h2>
          <p>
            Gemini is evolving to be more than just the models. It supports an
            entire to the APIs and platforms helping developers and businesses
            innovate.
          </p>
        </div>

        <div className="relative mx-auto grid max-w-4xl gap-6 md:grid-cols-3">
          <motion.div
            className="border-border/50 bg-card/30 hover:border-border hover:bg-card/50 space-y-6 rounded-2xl border p-8 text-center backdrop-blur-sm transition-colors"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            whileHover={{ scale: 1.02, y: -4 }}
          >
            <div className="flex justify-center">
              <motion.div
                className="rounded-xl bg-cyan-500/10 p-3"
                whileHover={{ rotate: 10, scale: 1.1 }}
                animate={{ y: [0, -3, 0] }}
                transition={{
                  y: { duration: 2, repeat: Infinity, ease: 'easeInOut' },
                }}
              >
                <Star className="size-6 text-cyan-500" />
              </motion.div>
            </div>
            <div className="space-y-2">
              <div className="text-5xl font-bold">+1200</div>
              <p className="text-muted-foreground text-sm">Stars on GitHub</p>
            </div>
          </motion.div>

          <motion.div
            className="border-border/50 bg-card/30 hover:border-border hover:bg-card/50 space-y-6 rounded-2xl border p-8 text-center backdrop-blur-sm transition-colors"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            whileHover={{ scale: 1.02, y: -4 }}
          >
            <div className="flex justify-center">
              <motion.div
                className="rounded-xl bg-emerald-500/10 p-3"
                whileHover={{ rotate: 10, scale: 1.1 }}
                animate={{ y: [0, -3, 0] }}
                transition={{
                  y: {
                    duration: 2,
                    repeat: Infinity,
                    ease: 'easeInOut',
                    delay: 0.2,
                  },
                }}
              >
                <TrendingUp className="size-6 text-emerald-500" />
              </motion.div>
            </div>
            <div className="space-y-2">
              <div className="text-5xl font-bold">56%</div>
              <p className="text-muted-foreground text-sm">Conversion rate</p>
            </div>
          </motion.div>

          <motion.div
            className="border-border/50 bg-card/30 hover:border-border hover:bg-card/50 space-y-6 rounded-2xl border p-8 text-center backdrop-blur-sm transition-colors"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            whileHover={{ scale: 1.02, y: -4 }}
          >
            <div className="flex justify-center">
              <motion.div
                className="rounded-xl bg-indigo-500/10 p-3"
                whileHover={{ rotate: 10, scale: 1.1 }}
                animate={{ y: [0, -3, 0] }}
                transition={{
                  y: {
                    duration: 2,
                    repeat: Infinity,
                    ease: 'easeInOut',
                    delay: 0.4,
                  },
                }}
              >
                <Boxes className="size-6 text-indigo-500" />
              </motion.div>
            </div>
            <div className="space-y-2">
              <div className="text-5xl font-bold">+500</div>
              <p className="text-muted-foreground text-sm">Powered Apps</p>
            </div>
          </motion.div>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: src/components/testimonials.tsx
================================================
'use client';

import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import Image from 'next/image';
import { motion } from 'motion/react';

/**
 * Render a responsive testimonials section with animated testimonial cards.
 *
 * The section includes a heading, descriptive paragraph, and a responsive grid
 * of animated testimonial cards featuring logos, quotes, avatars, author names,
 * and roles.
 *
 * @returns A JSX element representing the testimonials section
 */
export default function Testimonials() {
  return (
    <section className="py-16 md:py-32">
      <div className="mx-auto max-w-6xl space-y-8 px-6 md:space-y-16">
        <div className="relative z-10 mx-auto max-w-xl space-y-6 text-center md:space-y-12">
          <h2 className="text-4xl font-medium lg:text-5xl">
            Build by makers, loved by thousand developers
          </h2>
          <p>
            Gemini is evolving to be more than just the models. It supports an
            entire to the APIs and platforms helping developers and businesses
            innovate.
          </p>
        </div>

        <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-4 lg:grid-rows-2">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            whileHover={{ scale: 1.02 }}
          >
            <Card className="grid grid-rows-[auto_1fr] gap-8 sm:col-span-2 sm:p-6 lg:row-span-2">
              <CardHeader>
                <Image
                  className="dark:invert"
                  src="https://html.tailus.io/blocks/customers/nike.svg"
                  alt="Nike Logo"
                  width={60}
                  height={24}
                />
              </CardHeader>
              <CardContent>
                <blockquote className="grid h-full grid-rows-[1fr_auto] gap-6">
                  <p className="text-xl font-medium">
                    Tailus has transformed the way I develop web applications.
                    Their extensive collection of UI components, blocks, and
                    templates has significantly accelerated my workflow. The
                    flexibility to customize every aspect allows me to create
                    unique user experiences. Tailus is a game-changer for modern
                    web development
                  </p>

                  <div className="grid grid-cols-[auto_1fr] items-center gap-3">
                    <Avatar className="size-12">
                      <AvatarImage
                        src="https://tailus.io/images/reviews/shekinah.webp"
                        alt="Shekinah Tshiokufila"
                        height="400"
                        width="400"
                        loading="lazy"
                      />
                      <AvatarFallback>ST</AvatarFallback>
                    </Avatar>

                    <div>
                      <cite className="text-sm font-medium">
                        Shekinah Tshiokufila
                      </cite>
                      <span className="text-muted-foreground block text-sm">
                        Software Ingineer
                      </span>
                    </div>
                  </div>
                </blockquote>
              </CardContent>
            </Card>
          </motion.div>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            whileHover={{ scale: 1.02 }}
          >
            <Card className="md:col-span-2">
              <CardContent className="h-full pt-6">
                <blockquote className="grid h-full grid-rows-[1fr_auto] gap-6">
                  <p className="text-xl font-medium">
                    Tailus is really extraordinary and very practical, no need
                    to break your head. A real gold mine.
                  </p>

                  <div className="grid grid-cols-[auto_1fr] items-center gap-3">
                    <Avatar className="size-12">
                      <AvatarImage
                        src="https://tailus.io/images/reviews/jonathan.webp"
                        alt="Jonathan Yombo"
                        height="400"
                        width="400"
                        loading="lazy"
                      />
                      <AvatarFallback>JY</AvatarFallback>
                    </Avatar>
                    <div>
                      <cite className="text-sm font-medium">
                        Jonathan Yombo
                      </cite>
                      <span className="text-muted-foreground block text-sm">
                        Software Ingineer
                      </span>
                    </div>
                  </div>
                </blockquote>
              </CardContent>
            </Card>
          </motion.div>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            whileHover={{ scale: 1.02 }}
          >
            <Card>
              <CardContent className="h-full pt-6">
                <blockquote className="grid h-full grid-rows-[1fr_auto] gap-6">
                  <p>
                    Great work on tailfolio template. This is one of the best
                    personal website that I have seen so far!
                  </p>

                  <div className="grid [grid-template-columns:auto_1fr] items-center gap-3">
                    <Avatar className="size-12">
                      <AvatarImage
                        src="https://tailus.io/images/reviews/yucel.webp"
                        alt="Yucel Faruksahan"
                        height="400"
                        width="400"
                        loading="lazy"
                      />
                      <AvatarFallback>YF</AvatarFallback>
                    </Avatar>
                    <div>
                      <cite className="text-sm font-medium">
                        Yucel Faruksahan
                      </cite>
                      <span className="text-muted-foreground block text-sm">
                        Creator, Tailkits
                      </span>
                    </div>
                  </div>
                </blockquote>
              </CardContent>
            </Card>
          </motion.div>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            whileHover={{ scale: 1.02 }}
          >
            <Card className="card variant-mixed">
              <CardContent className="h-full pt-6">
                <blockquote className="grid h-full grid-rows-[1fr_auto] gap-6">
                  <p>
                    Great work on tailfolio template. This is one of the best
                    personal website that I have seen so far!
                  </p>

                  <div className="grid grid-cols-[auto_1fr] gap-3">
                    <Avatar className="size-12">
                      <AvatarImage
                        src="https://tailus.io/images/reviews/rodrigo.webp"
                        alt="Rodrigo Aguilar"
                        height="400"
                        width="400"
                        loading="lazy"
                      />
                      <AvatarFallback>YF</AvatarFallback>
                    </Avatar>
                    <div>
                      <p className="text-sm font-medium">Rodrigo Aguilar</p>
                      <span className="text-muted-foreground block text-sm">
                        Creator, TailwindAwesome
                      </span>
                    </div>
                  </div>
                </blockquote>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    </section>
  );
}



================================================
FILE: src/components/theme-provider.tsx
================================================
'use client';

import * as React from 'react';
import { ThemeProvider as NextThemesProvider } from 'next-themes';

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}



================================================
FILE: src/components/theme-selector.tsx
================================================
'use client';

import { useThemeConfig } from './active-theme';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

const DEFAULT_THEMES = [
  {
    name: 'Default',
    value: 'default',
  },
  {
    name: 'Blue',
    value: 'blue',
  },
  {
    name: 'Green',
    value: 'green',
  },
  {
    name: 'Amber',
    value: 'amber',
  },
  {
    name: 'Red',
    value: 'red',
  },
  {
    name: 'Purple',
    value: 'purple',
  },
  {
    name: 'Pink',
    value: 'pink',
  },
  {
    name: 'Violet',
    value: 'violet',
  },
  {
    name: 'Indigo',
    value: 'indigo',
  },
  {
    name: 'Emerald',
    value: 'emerald',
  },
];

const SCALED_THEMES = [
  {
    name: 'Default',
    value: 'default-scaled',
  },
  {
    name: 'Blue',
    value: 'blue-scaled',
  },
];

const MONO_THEMES = [
  {
    name: 'Mono',
    value: 'mono-scaled',
  },
];

export function ThemeSelector() {
  const { activeTheme, setActiveTheme } = useThemeConfig();

  return (
    <div className="flex items-center gap-2">
      <Label htmlFor="theme-selector" className="sr-only">
        Theme
      </Label>
      <Select value={activeTheme} onValueChange={setActiveTheme}>
        <SelectTrigger
          id="theme-selector"
          size="sm"
          className="justify-start *:data-[slot=select-value]:w-12"
        >
          <span className="text-muted-foreground hidden sm:block">
            Select a theme:
          </span>
          <span className="text-muted-foreground block sm:hidden">Theme</span>
          <SelectValue placeholder="Select a theme" />
        </SelectTrigger>
        <SelectContent align="end">
          <SelectGroup>
            <SelectLabel>Default</SelectLabel>
            {DEFAULT_THEMES.map(theme => (
              <SelectItem key={theme.name} value={theme.value}>
                {theme.name}
              </SelectItem>
            ))}
          </SelectGroup>
          <SelectSeparator />
          <SelectGroup>
            <SelectLabel>Scaled</SelectLabel>
            {SCALED_THEMES.map(theme => (
              <SelectItem key={theme.name} value={theme.value}>
                {theme.name}
              </SelectItem>
            ))}
          </SelectGroup>
          <SelectGroup>
            <SelectLabel>Monospaced</SelectLabel>
            {MONO_THEMES.map(theme => (
              <SelectItem key={theme.name} value={theme.value}>
                {theme.name}
              </SelectItem>
            ))}
          </SelectGroup>
        </SelectContent>
      </Select>
    </div>
  );
}



================================================
FILE: src/components/ai-elements/actions.tsx
================================================
'use client';

import { Button } from '@/components/ui/button';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';
import type { ComponentProps } from 'react';

export type ActionsProps = ComponentProps<'div'>;

export const Actions = ({ className, children, ...props }: ActionsProps) => (
  <div className={cn('flex items-center gap-1', className)} {...props}>
    {children}
  </div>
);

export type ActionProps = ComponentProps<typeof Button> & {
  tooltip?: string;
  label?: string;
};

export const Action = ({
  tooltip,
  children,
  label,
  className,
  variant = 'ghost',
  size = 'sm',
  ...props
}: ActionProps) => {
  const button = (
    <Button
      className={cn(
        'text-muted-foreground hover:text-foreground relative size-9 p-1.5',
        className,
      )}
      size={size}
      type="button"
      variant={variant}
      {...props}
    >
      {children}
      <span className="sr-only">{label || tooltip}</span>
    </Button>
  );

  if (tooltip) {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>{button}</TooltipTrigger>
          <TooltipContent>
            <p>{tooltip}</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  }

  return button;
};



================================================
FILE: src/components/ai-elements/artifact.tsx
================================================
'use client';

import { Button } from '@/components/ui/button';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';
import { type LucideIcon, XIcon } from 'lucide-react';
import type { ComponentProps, HTMLAttributes } from 'react';

export type ArtifactProps = HTMLAttributes<HTMLDivElement>;

export const Artifact = ({ className, ...props }: ArtifactProps) => (
  <div
    className={cn(
      'bg-background flex flex-col overflow-hidden rounded-lg border shadow-sm',
      className,
    )}
    {...props}
  />
);

export type ArtifactHeaderProps = HTMLAttributes<HTMLDivElement>;

export const ArtifactHeader = ({
  className,
  ...props
}: ArtifactHeaderProps) => (
  <div
    className={cn(
      'bg-muted/50 flex items-center justify-between border-b px-4 py-3',
      className,
    )}
    {...props}
  />
);

export type ArtifactCloseProps = ComponentProps<typeof Button>;

export const ArtifactClose = ({
  className,
  children,
  size = 'sm',
  variant = 'ghost',
  ...props
}: ArtifactCloseProps) => (
  <Button
    className={cn(
      'text-muted-foreground hover:text-foreground size-8 p-0',
      className,
    )}
    size={size}
    type="button"
    variant={variant}
    {...props}
  >
    {children ?? <XIcon className="size-4" />}
    <span className="sr-only">Close</span>
  </Button>
);

export type ArtifactTitleProps = HTMLAttributes<HTMLParagraphElement>;

export const ArtifactTitle = ({ className, ...props }: ArtifactTitleProps) => (
  <p
    className={cn('text-foreground text-sm font-medium', className)}
    {...props}
  />
);

export type ArtifactDescriptionProps = HTMLAttributes<HTMLParagraphElement>;

export const ArtifactDescription = ({
  className,
  ...props
}: ArtifactDescriptionProps) => (
  <p className={cn('text-muted-foreground text-sm', className)} {...props} />
);

export type ArtifactActionsProps = HTMLAttributes<HTMLDivElement>;

export const ArtifactActions = ({
  className,
  ...props
}: ArtifactActionsProps) => (
  <div className={cn('flex items-center gap-1', className)} {...props} />
);

export type ArtifactActionProps = ComponentProps<typeof Button> & {
  tooltip?: string;
  label?: string;
  icon?: LucideIcon;
};

export const ArtifactAction = ({
  tooltip,
  label,
  icon: Icon,
  children,
  className,
  size = 'sm',
  variant = 'ghost',
  ...props
}: ArtifactActionProps) => {
  const button = (
    <Button
      className={cn(
        'text-muted-foreground hover:text-foreground size-8 p-0',
        className,
      )}
      size={size}
      type="button"
      variant={variant}
      {...props}
    >
      {Icon ? <Icon className="size-4" /> : children}
      <span className="sr-only">{label || tooltip}</span>
    </Button>
  );

  if (tooltip) {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>{button}</TooltipTrigger>
          <TooltipContent>
            <p>{tooltip}</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  }

  return button;
};

export type ArtifactContentProps = HTMLAttributes<HTMLDivElement>;

export const ArtifactContent = ({
  className,
  ...props
}: ArtifactContentProps) => (
  <div className={cn('flex-1 overflow-auto p-4', className)} {...props} />
);



================================================
FILE: src/components/ai-elements/branch.tsx
================================================
'use client';

import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import type { UIMessage } from 'ai';
import { ChevronLeftIcon, ChevronRightIcon } from 'lucide-react';
import type { ComponentProps, HTMLAttributes, ReactElement } from 'react';
import { createContext, useContext, useEffect, useState } from 'react';

type BranchContextType = {
  currentBranch: number;
  totalBranches: number;
  goToPrevious: () => void;
  goToNext: () => void;
  branches: ReactElement[];
  setBranches: (branches: ReactElement[]) => void;
};

const BranchContext = createContext<BranchContextType | null>(null);

const useBranch = () => {
  const context = useContext(BranchContext);

  if (!context) {
    throw new Error('Branch components must be used within Branch');
  }

  return context;
};

export type BranchProps = HTMLAttributes<HTMLDivElement> & {
  defaultBranch?: number;
  onBranchChange?: (branchIndex: number) => void;
};

export const Branch = ({
  defaultBranch = 0,
  onBranchChange,
  className,
  ...props
}: BranchProps) => {
  const [currentBranch, setCurrentBranch] = useState(defaultBranch);
  const [branches, setBranches] = useState<ReactElement[]>([]);

  const handleBranchChange = (newBranch: number) => {
    setCurrentBranch(newBranch);
    onBranchChange?.(newBranch);
  };

  const goToPrevious = () => {
    const newBranch =
      currentBranch > 0 ? currentBranch - 1 : branches.length - 1;
    handleBranchChange(newBranch);
  };

  const goToNext = () => {
    const newBranch =
      currentBranch < branches.length - 1 ? currentBranch + 1 : 0;
    handleBranchChange(newBranch);
  };

  const contextValue: BranchContextType = {
    currentBranch,
    totalBranches: branches.length,
    goToPrevious,
    goToNext,
    branches,
    setBranches,
  };

  return (
    <BranchContext.Provider value={contextValue}>
      <div
        className={cn('grid w-full gap-2 [&>div]:pb-0', className)}
        {...props}
      />
    </BranchContext.Provider>
  );
};

export type BranchMessagesProps = HTMLAttributes<HTMLDivElement>;

export const BranchMessages = ({ children, ...props }: BranchMessagesProps) => {
  const { currentBranch, setBranches, branches } = useBranch();
  const childrenArray = Array.isArray(children) ? children : [children];

  // Use useEffect to update branches when they change
  useEffect(() => {
    if (branches.length !== childrenArray.length) {
      setBranches(childrenArray);
    }
  }, [childrenArray, branches, setBranches]);

  return childrenArray.map((branch, index) => (
    <div
      className={cn(
        'grid gap-2 overflow-hidden [&>div]:pb-0',
        index === currentBranch ? 'block' : 'hidden',
      )}
      key={branch.key}
      {...props}
    >
      {branch}
    </div>
  ));
};

export type BranchSelectorProps = HTMLAttributes<HTMLDivElement> & {
  from: UIMessage['role'];
};

export const BranchSelector = ({
  className,
  from,
  ...props
}: BranchSelectorProps) => {
  const { totalBranches } = useBranch();

  // Don't render if there's only one branch
  if (totalBranches <= 1) {
    return null;
  }

  return (
    <div
      className={cn(
        'flex items-center gap-2 self-end px-10',
        from === 'assistant' ? 'justify-start' : 'justify-end',
        className,
      )}
      {...props}
    />
  );
};

export type BranchPreviousProps = ComponentProps<typeof Button>;

export const BranchPrevious = ({
  className,
  children,
  ...props
}: BranchPreviousProps) => {
  const { goToPrevious, totalBranches } = useBranch();

  return (
    <Button
      aria-label="Previous branch"
      className={cn(
        'text-muted-foreground size-7 shrink-0 rounded-full transition-colors',
        'hover:bg-accent hover:text-foreground',
        'disabled:pointer-events-none disabled:opacity-50',
        className,
      )}
      disabled={totalBranches <= 1}
      onClick={goToPrevious}
      size="icon"
      type="button"
      variant="ghost"
      {...props}
    >
      {children ?? <ChevronLeftIcon size={14} />}
    </Button>
  );
};

export type BranchNextProps = ComponentProps<typeof Button>;

export const BranchNext = ({
  className,
  children,
  ...props
}: BranchNextProps) => {
  const { goToNext, totalBranches } = useBranch();

  return (
    <Button
      aria-label="Next branch"
      className={cn(
        'text-muted-foreground size-7 shrink-0 rounded-full transition-colors',
        'hover:bg-accent hover:text-foreground',
        'disabled:pointer-events-none disabled:opacity-50',
        className,
      )}
      disabled={totalBranches <= 1}
      onClick={goToNext}
      size="icon"
      type="button"
      variant="ghost"
      {...props}
    >
      {children ?? <ChevronRightIcon size={14} />}
    </Button>
  );
};

export type BranchPageProps = HTMLAttributes<HTMLSpanElement>;

export const BranchPage = ({ className, ...props }: BranchPageProps) => {
  const { currentBranch, totalBranches } = useBranch();

  return (
    <span
      className={cn(
        'text-muted-foreground text-xs font-medium tabular-nums',
        className,
      )}
      {...props}
    >
      {currentBranch + 1} of {totalBranches}
    </span>
  );
};



================================================
FILE: src/components/ai-elements/chain-of-thought.tsx
================================================
'use client';

import { useControllableState } from '@radix-ui/react-use-controllable-state';
import { Badge } from '@/components/ui/badge';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { cn } from '@/lib/utils';
import {
  BrainIcon,
  ChevronDownIcon,
  DotIcon,
  type LucideIcon,
} from 'lucide-react';
import type { ComponentProps } from 'react';
import { createContext, memo, useContext } from 'react';

type ChainOfThoughtContextValue = {
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
};

const ChainOfThoughtContext = createContext<ChainOfThoughtContextValue | null>(
  null,
);

const useChainOfThought = () => {
  const context = useContext(ChainOfThoughtContext);
  if (!context) {
    throw new Error(
      'ChainOfThought components must be used within ChainOfThought',
    );
  }
  return context;
};

export type ChainOfThoughtProps = ComponentProps<'div'> & {
  open?: boolean;
  defaultOpen?: boolean;
  onOpenChange?: (open: boolean) => void;
};

export const ChainOfThought = memo(
  ({
    className,
    open,
    defaultOpen = false,
    onOpenChange,
    children,
    ...props
  }: ChainOfThoughtProps) => {
    const [isOpen, setIsOpen] = useControllableState({
      prop: open,
      defaultProp: defaultOpen,
      onChange: onOpenChange,
    });

    return (
      <ChainOfThoughtContext.Provider value={{ isOpen, setIsOpen }}>
        <div
          className={cn('not-prose max-w-prose space-y-4', className)}
          {...props}
        >
          {children}
        </div>
      </ChainOfThoughtContext.Provider>
    );
  },
);

export type ChainOfThoughtHeaderProps = ComponentProps<
  typeof CollapsibleTrigger
>;

export const ChainOfThoughtHeader = memo(
  ({ className, children, ...props }: ChainOfThoughtHeaderProps) => {
    const { isOpen, setIsOpen } = useChainOfThought();

    return (
      <Collapsible onOpenChange={setIsOpen} open={isOpen}>
        <CollapsibleTrigger
          className={cn(
            'text-muted-foreground hover:text-foreground flex w-full items-center gap-2 text-sm transition-colors',
            className,
          )}
          {...props}
        >
          <BrainIcon className="size-4" />
          <span className="flex-1 text-left">
            {children ?? 'Chain of Thought'}
          </span>
          <ChevronDownIcon
            className={cn(
              'size-4 transition-transform',
              isOpen ? 'rotate-180' : 'rotate-0',
            )}
          />
        </CollapsibleTrigger>
      </Collapsible>
    );
  },
);

export type ChainOfThoughtStepProps = ComponentProps<'div'> & {
  icon?: LucideIcon;
  label: string;
  description?: string;
  status?: 'complete' | 'active' | 'pending';
};

export const ChainOfThoughtStep = memo(
  ({
    className,
    icon: Icon = DotIcon,
    label,
    description,
    status = 'complete',
    children,
    ...props
  }: ChainOfThoughtStepProps) => {
    const statusStyles = {
      complete: 'text-muted-foreground',
      active: 'text-foreground',
      pending: 'text-muted-foreground/50',
    };

    return (
      <div
        className={cn(
          'flex gap-2 text-sm',
          statusStyles[status],
          'fade-in-0 slide-in-from-top-2 animate-in',
          className,
        )}
        {...props}
      >
        <div className="relative mt-0.5">
          <Icon className="size-4" />
          <div className="bg-border absolute top-7 bottom-0 left-1/2 -mx-px w-px" />
        </div>
        <div className="flex-1 space-y-2">
          <div>{label}</div>
          {description && (
            <div className="text-muted-foreground text-xs">{description}</div>
          )}
          {children}
        </div>
      </div>
    );
  },
);

export type ChainOfThoughtSearchResultsProps = ComponentProps<'div'>;

export const ChainOfThoughtSearchResults = memo(
  ({ className, ...props }: ChainOfThoughtSearchResultsProps) => (
    <div className={cn('flex items-center gap-2', className)} {...props} />
  ),
);

export type ChainOfThoughtSearchResultProps = ComponentProps<typeof Badge>;

export const ChainOfThoughtSearchResult = memo(
  ({ className, children, ...props }: ChainOfThoughtSearchResultProps) => (
    <Badge
      className={cn('gap-1 px-2 py-0.5 text-xs font-normal', className)}
      variant="secondary"
      {...props}
    >
      {children}
    </Badge>
  ),
);

export type ChainOfThoughtContentProps = ComponentProps<
  typeof CollapsibleContent
>;

export const ChainOfThoughtContent = memo(
  ({ className, children, ...props }: ChainOfThoughtContentProps) => {
    const { isOpen } = useChainOfThought();

    return (
      <Collapsible open={isOpen}>
        <CollapsibleContent
          className={cn(
            'mt-2 space-y-3',
            'data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground data-[state=closed]:animate-out data-[state=open]:animate-in outline-none',
            className,
          )}
          {...props}
        >
          {children}
        </CollapsibleContent>
      </Collapsible>
    );
  },
);

export type ChainOfThoughtImageProps = ComponentProps<'div'> & {
  caption?: string;
};

export const ChainOfThoughtImage = memo(
  ({ className, children, caption, ...props }: ChainOfThoughtImageProps) => (
    <div className={cn('mt-2 space-y-2', className)} {...props}>
      <div className="bg-muted relative flex max-h-[22rem] items-center justify-center overflow-hidden rounded-lg p-3">
        {children}
      </div>
      {caption && <p className="text-muted-foreground text-xs">{caption}</p>}
    </div>
  ),
);

ChainOfThought.displayName = 'ChainOfThought';
ChainOfThoughtHeader.displayName = 'ChainOfThoughtHeader';
ChainOfThoughtStep.displayName = 'ChainOfThoughtStep';
ChainOfThoughtSearchResults.displayName = 'ChainOfThoughtSearchResults';
ChainOfThoughtSearchResult.displayName = 'ChainOfThoughtSearchResult';
ChainOfThoughtContent.displayName = 'ChainOfThoughtContent';
ChainOfThoughtImage.displayName = 'ChainOfThoughtImage';



================================================
FILE: src/components/ai-elements/code-block.tsx
================================================
'use client';

import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { CheckIcon, CopyIcon } from 'lucide-react';
import type { ComponentProps, HTMLAttributes, ReactNode } from 'react';
import { createContext, useContext, useState } from 'react';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import {
  oneDark,
  oneLight,
} from 'react-syntax-highlighter/dist/esm/styles/prism';

type CodeBlockContextType = {
  code: string;
};

const CodeBlockContext = createContext<CodeBlockContextType>({
  code: '',
});

export type CodeBlockProps = HTMLAttributes<HTMLDivElement> & {
  code: string;
  language: string;
  showLineNumbers?: boolean;
  children?: ReactNode;
};

export const CodeBlock = ({
  code,
  language,
  showLineNumbers = false,
  className,
  children,
  ...props
}: CodeBlockProps) => (
  <CodeBlockContext.Provider value={{ code }}>
    <div
      className={cn(
        'bg-background text-foreground relative w-full overflow-hidden rounded-md border',
        className,
      )}
      {...props}
    >
      <div className="relative">
        <SyntaxHighlighter
          className="overflow-hidden dark:hidden"
          codeTagProps={{
            className: 'font-mono text-sm',
          }}
          customStyle={{
            margin: 0,
            padding: '1rem',
            fontSize: '0.875rem',
            background: 'hsl(var(--background))',
            color: 'hsl(var(--foreground))',
          }}
          language={language}
          lineNumberStyle={{
            color: 'hsl(var(--muted-foreground))',
            paddingRight: '1rem',
            minWidth: '2.5rem',
          }}
          showLineNumbers={showLineNumbers}
          style={oneLight}
        >
          {code}
        </SyntaxHighlighter>
        <SyntaxHighlighter
          className="hidden overflow-hidden dark:block"
          codeTagProps={{
            className: 'font-mono text-sm',
          }}
          customStyle={{
            margin: 0,
            padding: '1rem',
            fontSize: '0.875rem',
            background: 'hsl(var(--background))',
            color: 'hsl(var(--foreground))',
          }}
          language={language}
          lineNumberStyle={{
            color: 'hsl(var(--muted-foreground))',
            paddingRight: '1rem',
            minWidth: '2.5rem',
          }}
          showLineNumbers={showLineNumbers}
          style={oneDark}
        >
          {code}
        </SyntaxHighlighter>
        {children && (
          <div className="absolute top-2 right-2 flex items-center gap-2">
            {children}
          </div>
        )}
      </div>
    </div>
  </CodeBlockContext.Provider>
);

export type CodeBlockCopyButtonProps = ComponentProps<typeof Button> & {
  onCopy?: () => void;
  onError?: (error: Error) => void;
  timeout?: number;
};

export const CodeBlockCopyButton = ({
  onCopy,
  onError,
  timeout = 2000,
  children,
  className,
  ...props
}: CodeBlockCopyButtonProps) => {
  const [isCopied, setIsCopied] = useState(false);
  const { code } = useContext(CodeBlockContext);

  const copyToClipboard = async () => {
    if (typeof window === 'undefined' || !navigator.clipboard.writeText) {
      onError?.(new Error('Clipboard API not available'));
      return;
    }

    try {
      await navigator.clipboard.writeText(code);
      setIsCopied(true);
      onCopy?.();
      setTimeout(() => setIsCopied(false), timeout);
    } catch (error) {
      onError?.(error as Error);
    }
  };

  const Icon = isCopied ? CheckIcon : CopyIcon;

  return (
    <Button
      className={cn('shrink-0', className)}
      onClick={copyToClipboard}
      size="icon"
      variant="ghost"
      {...props}
    >
      {children ?? <Icon size={14} />}
    </Button>
  );
};



================================================
FILE: src/components/ai-elements/context.tsx
================================================
'use client';

import { Button } from '@/components/ui/button';
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from '@/components/ui/hover-card';
import { Progress } from '@/components/ui/progress';
import { cn } from '@/lib/utils';
import type { LanguageModelUsage } from 'ai';
import { type ComponentProps, createContext, useContext } from 'react';
import { estimateCost, type ModelId } from 'tokenlens';

const PERCENT_MAX = 100;
const ICON_RADIUS = 10;
const ICON_VIEWBOX = 24;
const ICON_CENTER = 12;
const ICON_STROKE_WIDTH = 2;

type ContextSchema = {
  usedTokens: number;
  maxTokens: number;
  usage?: LanguageModelUsage;
  modelId?: ModelId;
};

const ContextContext = createContext<ContextSchema | null>(null);

const useContextValue = () => {
  const context = useContext(ContextContext);

  if (!context) {
    throw new Error('Context components must be used within Context');
  }

  return context;
};

export type ContextProps = ComponentProps<typeof HoverCard> & ContextSchema;

export const Context = ({
  usedTokens,
  maxTokens,
  usage,
  modelId,
  ...props
}: ContextProps) => (
  <ContextContext.Provider
    value={{
      usedTokens,
      maxTokens,
      usage,
      modelId,
    }}
  >
    <HoverCard closeDelay={0} openDelay={0} {...props} />
  </ContextContext.Provider>
);

const ContextIcon = () => {
  const { usedTokens, maxTokens } = useContextValue();
  const circumference = 2 * Math.PI * ICON_RADIUS;
  const usedPercent = usedTokens / maxTokens;
  const dashOffset = circumference * (1 - usedPercent);

  return (
    <svg
      aria-label="Model context usage"
      height="20"
      role="img"
      style={{ color: 'currentcolor' }}
      viewBox={`0 0 ${ICON_VIEWBOX} ${ICON_VIEWBOX}`}
      width="20"
    >
      <circle
        cx={ICON_CENTER}
        cy={ICON_CENTER}
        fill="none"
        opacity="0.25"
        r={ICON_RADIUS}
        stroke="currentColor"
        strokeWidth={ICON_STROKE_WIDTH}
      />
      <circle
        cx={ICON_CENTER}
        cy={ICON_CENTER}
        fill="none"
        opacity="0.7"
        r={ICON_RADIUS}
        stroke="currentColor"
        strokeDasharray={`${circumference} ${circumference}`}
        strokeDashoffset={dashOffset}
        strokeLinecap="round"
        strokeWidth={ICON_STROKE_WIDTH}
        style={{ transformOrigin: 'center', transform: 'rotate(-90deg)' }}
      />
    </svg>
  );
};

export type ContextTriggerProps = ComponentProps<typeof Button>;

export const ContextTrigger = ({ children, ...props }: ContextTriggerProps) => {
  const { usedTokens, maxTokens } = useContextValue();
  const usedPercent = usedTokens / maxTokens;
  const renderedPercent = new Intl.NumberFormat('en-US', {
    style: 'percent',
    maximumFractionDigits: 1,
  }).format(usedPercent);

  return (
    <HoverCardTrigger asChild>
      {children ?? (
        <Button type="button" variant="ghost" {...props}>
          <span className="text-muted-foreground font-medium">
            {renderedPercent}
          </span>
          <ContextIcon />
        </Button>
      )}
    </HoverCardTrigger>
  );
};

export type ContextContentProps = ComponentProps<typeof HoverCardContent>;

export const ContextContent = ({
  className,
  ...props
}: ContextContentProps) => (
  <HoverCardContent
    className={cn('min-w-[240px] divide-y overflow-hidden p-0', className)}
    {...props}
  />
);

export type ContextContentHeader = ComponentProps<'div'>;

export const ContextContentHeader = ({
  children,
  className,
  ...props
}: ContextContentHeader) => {
  const { usedTokens, maxTokens } = useContextValue();
  const usedPercent = usedTokens / maxTokens;
  const displayPct = new Intl.NumberFormat('en-US', {
    style: 'percent',
    maximumFractionDigits: 1,
  }).format(usedPercent);
  const used = new Intl.NumberFormat('en-US', {
    notation: 'compact',
  }).format(usedTokens);
  const total = new Intl.NumberFormat('en-US', {
    notation: 'compact',
  }).format(maxTokens);

  return (
    <div className={cn('w-full space-y-2 p-3', className)} {...props}>
      {children ?? (
        <>
          <div className="flex items-center justify-between gap-3 text-xs">
            <p>{displayPct}</p>
            <p className="text-muted-foreground font-mono">
              {used} / {total}
            </p>
          </div>
          <div className="space-y-2">
            <Progress className="bg-muted" value={usedPercent * PERCENT_MAX} />
          </div>
        </>
      )}
    </div>
  );
};

export type ContextContentBody = ComponentProps<'div'>;

export const ContextContentBody = ({
  children,
  className,
  ...props
}: ContextContentBody) => (
  <div className={cn('w-full p-3', className)} {...props}>
    {children}
  </div>
);

export type ContextContentFooter = ComponentProps<'div'>;

export const ContextContentFooter = ({
  children,
  className,
  ...props
}: ContextContentFooter) => {
  const { modelId, usage } = useContextValue();
  const costUSD = modelId
    ? estimateCost({
        modelId,
        usage: {
          input: usage?.inputTokens ?? 0,
          output: usage?.outputTokens ?? 0,
        },
      }).totalUSD
    : undefined;
  const totalCost = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(costUSD ?? 0);

  return (
    <div
      className={cn(
        'bg-secondary flex w-full items-center justify-between gap-3 p-3 text-xs',
        className,
      )}
      {...props}
    >
      {children ?? (
        <>
          <span className="text-muted-foreground">Total cost</span>
          <span>{totalCost}</span>
        </>
      )}
    </div>
  );
};

export type ContextInputUsageProps = ComponentProps<'div'>;

export const ContextInputUsage = ({
  className,
  children,
  ...props
}: ContextInputUsageProps) => {
  const { usage, modelId } = useContextValue();
  const inputTokens = usage?.inputTokens ?? 0;

  if (children) {
    return children;
  }

  if (!inputTokens) {
    return null;
  }

  const inputCost = modelId
    ? estimateCost({
        modelId,
        usage: { input: inputTokens, output: 0 },
      }).totalUSD
    : undefined;
  const inputCostText = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(inputCost ?? 0);

  return (
    <div
      className={cn('flex items-center justify-between text-xs', className)}
      {...props}
    >
      <span className="text-muted-foreground">Input</span>
      <TokensWithCost costText={inputCostText} tokens={inputTokens} />
    </div>
  );
};

export type ContextOutputUsageProps = ComponentProps<'div'>;

export const ContextOutputUsage = ({
  className,
  children,
  ...props
}: ContextOutputUsageProps) => {
  const { usage, modelId } = useContextValue();
  const outputTokens = usage?.outputTokens ?? 0;

  if (children) {
    return children;
  }

  if (!outputTokens) {
    return null;
  }

  const outputCost = modelId
    ? estimateCost({
        modelId,
        usage: { input: 0, output: outputTokens },
      }).totalUSD
    : undefined;
  const outputCostText = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(outputCost ?? 0);

  return (
    <div
      className={cn('flex items-center justify-between text-xs', className)}
      {...props}
    >
      <span className="text-muted-foreground">Output</span>
      <TokensWithCost costText={outputCostText} tokens={outputTokens} />
    </div>
  );
};

export type ContextReasoningUsageProps = ComponentProps<'div'>;

export const ContextReasoningUsage = ({
  className,
  children,
  ...props
}: ContextReasoningUsageProps) => {
  const { usage, modelId } = useContextValue();
  const reasoningTokens = usage?.reasoningTokens ?? 0;

  if (children) {
    return children;
  }

  if (!reasoningTokens) {
    return null;
  }

  const reasoningCost = modelId
    ? estimateCost({
        modelId,
        usage: { reasoningTokens },
      }).totalUSD
    : undefined;
  const reasoningCostText = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(reasoningCost ?? 0);

  return (
    <div
      className={cn('flex items-center justify-between text-xs', className)}
      {...props}
    >
      <span className="text-muted-foreground">Reasoning</span>
      <TokensWithCost costText={reasoningCostText} tokens={reasoningTokens} />
    </div>
  );
};

export type ContextCacheUsageProps = ComponentProps<'div'>;

export const ContextCacheUsage = ({
  className,
  children,
  ...props
}: ContextCacheUsageProps) => {
  const { usage, modelId } = useContextValue();
  const cacheTokens = usage?.cachedInputTokens ?? 0;

  if (children) {
    return children;
  }

  if (!cacheTokens) {
    return null;
  }

  const cacheCost = modelId
    ? estimateCost({
        modelId,
        usage: { cacheReads: cacheTokens, input: 0, output: 0 },
      }).totalUSD
    : undefined;
  const cacheCostText = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(cacheCost ?? 0);

  return (
    <div
      className={cn('flex items-center justify-between text-xs', className)}
      {...props}
    >
      <span className="text-muted-foreground">Cache</span>
      <TokensWithCost costText={cacheCostText} tokens={cacheTokens} />
    </div>
  );
};

const TokensWithCost = ({
  tokens,
  costText,
}: {
  tokens?: number;
  costText?: string;
}) => (
  <span>
    {tokens === undefined
      ? '—'
      : new Intl.NumberFormat('en-US', {
          notation: 'compact',
        }).format(tokens)}
    {costText ? (
      <span className="text-muted-foreground ml-2">• {costText}</span>
    ) : null}
  </span>
);



================================================
FILE: src/components/ai-elements/conversation.tsx
================================================
'use client';

import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { ArrowDownIcon } from 'lucide-react';
import type { ComponentProps } from 'react';
import { useCallback } from 'react';
import { StickToBottom, useStickToBottomContext } from 'use-stick-to-bottom';

export type ConversationProps = ComponentProps<typeof StickToBottom>;

export const Conversation = ({ className, ...props }: ConversationProps) => (
  <StickToBottom
    className={cn('relative flex-1 overflow-y-auto', className)}
    initial="smooth"
    resize="smooth"
    role="log"
    {...props}
  />
);

export type ConversationContentProps = ComponentProps<
  typeof StickToBottom.Content
>;

export const ConversationContent = ({
  className,
  ...props
}: ConversationContentProps) => (
  <StickToBottom.Content className={cn('p-4', className)} {...props} />
);

export type ConversationEmptyStateProps = ComponentProps<'div'> & {
  title?: string;
  description?: string;
  icon?: React.ReactNode;
};

export const ConversationEmptyState = ({
  className,
  title = 'No messages yet',
  description = 'Start a conversation to see messages here',
  icon,
  children,
  ...props
}: ConversationEmptyStateProps) => (
  <div
    className={cn(
      'flex size-full flex-col items-center justify-center gap-3 p-8 text-center',
      className,
    )}
    {...props}
  >
    {children ?? (
      <>
        {icon && <div className="text-muted-foreground">{icon}</div>}
        <div className="space-y-1">
          <h3 className="text-sm font-medium">{title}</h3>
          {description && (
            <p className="text-muted-foreground text-sm">{description}</p>
          )}
        </div>
      </>
    )}
  </div>
);

export type ConversationScrollButtonProps = ComponentProps<typeof Button>;

export const ConversationScrollButton = ({
  className,
  ...props
}: ConversationScrollButtonProps) => {
  const { isAtBottom, scrollToBottom } = useStickToBottomContext();

  const handleScrollToBottom = useCallback(() => {
    scrollToBottom();
  }, [scrollToBottom]);

  return (
    !isAtBottom && (
      <Button
        className={cn(
          'absolute bottom-4 left-[50%] translate-x-[-50%] rounded-full',
          className,
        )}
        onClick={handleScrollToBottom}
        size="icon"
        type="button"
        variant="outline"
        {...props}
      >
        <ArrowDownIcon className="size-4" />
      </Button>
    )
  );
};



================================================
FILE: src/components/ai-elements/image.tsx
================================================
import { cn } from '@/lib/utils';
import type { Experimental_GeneratedImage } from 'ai';

export type ImageProps = Experimental_GeneratedImage & {
  className?: string;
  alt?: string;
};

export const Image = ({
  base64,
  uint8Array,
  mediaType,
  ...props
}: ImageProps) => (
  <img
    {...props}
    alt={props.alt}
    className={cn(
      'h-auto max-w-full overflow-hidden rounded-md',
      props.className,
    )}
    src={`data:${mediaType};base64,${base64}`}
  />
);



================================================
FILE: src/components/ai-elements/inline-citation.tsx
================================================
'use client';

import { Badge } from '@/components/ui/badge';
import {
  Carousel,
  type CarouselApi,
  CarouselContent,
  CarouselItem,
} from '@/components/ui/carousel';
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from '@/components/ui/hover-card';
import { cn } from '@/lib/utils';
import { ArrowLeftIcon, ArrowRightIcon } from 'lucide-react';
import {
  type ComponentProps,
  createContext,
  useCallback,
  useContext,
  useEffect,
  useState,
} from 'react';

export type InlineCitationProps = ComponentProps<'span'>;

export const InlineCitation = ({
  className,
  ...props
}: InlineCitationProps) => (
  <span
    className={cn('group inline items-center gap-1', className)}
    {...props}
  />
);

export type InlineCitationTextProps = ComponentProps<'span'>;

export const InlineCitationText = ({
  className,
  ...props
}: InlineCitationTextProps) => (
  <span
    className={cn('group-hover:bg-accent transition-colors', className)}
    {...props}
  />
);

export type InlineCitationCardProps = ComponentProps<typeof HoverCard>;

export const InlineCitationCard = (props: InlineCitationCardProps) => (
  <HoverCard closeDelay={0} openDelay={0} {...props} />
);

export type InlineCitationCardTriggerProps = ComponentProps<typeof Badge> & {
  sources: string[];
};

export const InlineCitationCardTrigger = ({
  sources,
  className,
  ...props
}: InlineCitationCardTriggerProps) => (
  <HoverCardTrigger asChild>
    <Badge
      className={cn('ml-1 rounded-full', className)}
      variant="secondary"
      {...props}
    >
      {sources.length ? (
        <>
          {new URL(sources[0]).hostname}{' '}
          {sources.length > 1 && `+${sources.length - 1}`}
        </>
      ) : (
        'unknown'
      )}
    </Badge>
  </HoverCardTrigger>
);

export type InlineCitationCardBodyProps = ComponentProps<'div'>;

export const InlineCitationCardBody = ({
  className,
  ...props
}: InlineCitationCardBodyProps) => (
  <HoverCardContent className={cn('relative w-80 p-0', className)} {...props} />
);

const CarouselApiContext = createContext<CarouselApi | undefined>(undefined);

const useCarouselApi = () => {
  const context = useContext(CarouselApiContext);
  return context;
};

export type InlineCitationCarouselProps = ComponentProps<typeof Carousel>;

export const InlineCitationCarousel = ({
  className,
  children,
  ...props
}: InlineCitationCarouselProps) => {
  const [api, setApi] = useState<CarouselApi>();

  return (
    <CarouselApiContext.Provider value={api}>
      <Carousel className={cn('w-full', className)} setApi={setApi} {...props}>
        {children}
      </Carousel>
    </CarouselApiContext.Provider>
  );
};

export type InlineCitationCarouselContentProps = ComponentProps<'div'>;

export const InlineCitationCarouselContent = (
  props: InlineCitationCarouselContentProps,
) => <CarouselContent {...props} />;

export type InlineCitationCarouselItemProps = ComponentProps<'div'>;

export const InlineCitationCarouselItem = ({
  className,
  ...props
}: InlineCitationCarouselItemProps) => (
  <CarouselItem
    className={cn('w-full space-y-2 p-4 pl-8', className)}
    {...props}
  />
);

export type InlineCitationCarouselHeaderProps = ComponentProps<'div'>;

export const InlineCitationCarouselHeader = ({
  className,
  ...props
}: InlineCitationCarouselHeaderProps) => (
  <div
    className={cn(
      'bg-secondary flex items-center justify-between gap-2 rounded-t-md p-2',
      className,
    )}
    {...props}
  />
);

export type InlineCitationCarouselIndexProps = ComponentProps<'div'>;

export const InlineCitationCarouselIndex = ({
  children,
  className,
  ...props
}: InlineCitationCarouselIndexProps) => {
  const api = useCarouselApi();
  const [current, setCurrent] = useState(0);
  const [count, setCount] = useState(0);

  useEffect(() => {
    if (!api) {
      return;
    }

    setCount(api.scrollSnapList().length);
    setCurrent(api.selectedScrollSnap() + 1);

    api.on('select', () => {
      setCurrent(api.selectedScrollSnap() + 1);
    });
  }, [api]);

  return (
    <div
      className={cn(
        'text-muted-foreground flex flex-1 items-center justify-end px-3 py-1 text-xs',
        className,
      )}
      {...props}
    >
      {children ?? `${current}/${count}`}
    </div>
  );
};

export type InlineCitationCarouselPrevProps = ComponentProps<'button'>;

export const InlineCitationCarouselPrev = ({
  className,
  ...props
}: InlineCitationCarouselPrevProps) => {
  const api = useCarouselApi();

  const handleClick = useCallback(() => {
    if (api) {
      api.scrollPrev();
    }
  }, [api]);

  return (
    <button
      aria-label="Previous"
      className={cn('shrink-0', className)}
      onClick={handleClick}
      type="button"
      {...props}
    >
      <ArrowLeftIcon className="text-muted-foreground size-4" />
    </button>
  );
};

export type InlineCitationCarouselNextProps = ComponentProps<'button'>;

export const InlineCitationCarouselNext = ({
  className,
  ...props
}: InlineCitationCarouselNextProps) => {
  const api = useCarouselApi();

  const handleClick = useCallback(() => {
    if (api) {
      api.scrollNext();
    }
  }, [api]);

  return (
    <button
      aria-label="Next"
      className={cn('shrink-0', className)}
      onClick={handleClick}
      type="button"
      {...props}
    >
      <ArrowRightIcon className="text-muted-foreground size-4" />
    </button>
  );
};

export type InlineCitationSourceProps = ComponentProps<'div'> & {
  title?: string;
  url?: string;
  description?: string;
};

export const InlineCitationSource = ({
  title,
  url,
  description,
  className,
  children,
  ...props
}: InlineCitationSourceProps) => (
  <div className={cn('space-y-1', className)} {...props}>
    {title && (
      <h4 className="truncate text-sm leading-tight font-medium">{title}</h4>
    )}
    {url && (
      <p className="text-muted-foreground truncate text-xs break-all">{url}</p>
    )}
    {description && (
      <p className="text-muted-foreground line-clamp-3 text-sm leading-relaxed">
        {description}
      </p>
    )}
    {children}
  </div>
);

export type InlineCitationQuoteProps = ComponentProps<'blockquote'>;

export const InlineCitationQuote = ({
  children,
  className,
  ...props
}: InlineCitationQuoteProps) => (
  <blockquote
    className={cn(
      'border-muted text-muted-foreground border-l-2 pl-3 text-sm italic',
      className,
    )}
    {...props}
  >
    {children}
  </blockquote>
);



================================================
FILE: src/components/ai-elements/loader.tsx
================================================
import { cn } from '@/lib/utils';
import type { HTMLAttributes } from 'react';

type LoaderIconProps = {
  size?: number;
};

const LoaderIcon = ({ size = 16 }: LoaderIconProps) => (
  <svg
    height={size}
    strokeLinejoin="round"
    style={{ color: 'currentcolor' }}
    viewBox="0 0 16 16"
    width={size}
  >
    <title>Loader</title>
    <g clipPath="url(#clip0_2393_1490)">
      <path d="M8 0V4" stroke="currentColor" strokeWidth="1.5" />
      <path
        d="M8 16V12"
        opacity="0.5"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M3.29773 1.52783L5.64887 4.7639"
        opacity="0.9"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M12.7023 1.52783L10.3511 4.7639"
        opacity="0.1"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M12.7023 14.472L10.3511 11.236"
        opacity="0.4"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M3.29773 14.472L5.64887 11.236"
        opacity="0.6"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M15.6085 5.52783L11.8043 6.7639"
        opacity="0.2"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M0.391602 10.472L4.19583 9.23598"
        opacity="0.7"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M15.6085 10.4722L11.8043 9.2361"
        opacity="0.3"
        stroke="currentColor"
        strokeWidth="1.5"
      />
      <path
        d="M0.391602 5.52783L4.19583 6.7639"
        opacity="0.8"
        stroke="currentColor"
        strokeWidth="1.5"
      />
    </g>
    <defs>
      <clipPath id="clip0_2393_1490">
        <rect fill="white" height="16" width="16" />
      </clipPath>
    </defs>
  </svg>
);

export type LoaderProps = HTMLAttributes<HTMLDivElement> & {
  size?: number;
};

export const Loader = ({ className, size = 16, ...props }: LoaderProps) => (
  <div
    className={cn(
      'inline-flex animate-spin items-center justify-center',
      className,
    )}
    {...props}
  >
    <LoaderIcon size={size} />
  </div>
);



================================================
FILE: src/components/ai-elements/message.tsx
================================================
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { cn } from '@/lib/utils';
import type { UIMessage } from 'ai';
import { cva, type VariantProps } from 'class-variance-authority';
import type { ComponentProps, HTMLAttributes } from 'react';

export type MessageProps = HTMLAttributes<HTMLDivElement> & {
  from: UIMessage['role'];
};

export const Message = ({ className, from, ...props }: MessageProps) => (
  <div
    className={cn(
      'group flex w-full items-end justify-end gap-2 py-4',
      from === 'user' ? 'is-user' : 'is-assistant flex-row-reverse justify-end',
      className,
    )}
    {...props}
  />
);

const messageContentVariants = cva(
  'is-user:dark flex flex-col gap-2 overflow-hidden rounded-lg text-sm',
  {
    variants: {
      variant: {
        contained: [
          'max-w-[80%] px-4 py-3',
          'group-[.is-user]:bg-[var(--message-user-bg)] group-[.is-user]:text-[var(--message-user-fg)]',
          'group-[.is-assistant]:bg-[var(--message-assistant-bg)] group-[.is-assistant]:text-[var(--message-assistant-fg)]',
        ],
        flat: [
          'group-[.is-user]:max-w-[80%] group-[.is-user]:bg-[var(--message-user-bg)] group-[.is-user]:px-4 group-[.is-user]:py-3 group-[.is-user]:text-[var(--message-user-fg)]',
          'group-[.is-assistant]:bg-[var(--message-assistant-bg)] group-[.is-assistant]:text-[var(--message-assistant-fg)]',
        ],
      },
    },
    defaultVariants: {
      variant: 'contained',
    },
  },
);

export type MessageContentProps = HTMLAttributes<HTMLDivElement> &
  VariantProps<typeof messageContentVariants>;

export const MessageContent = ({
  children,
  className,
  variant,
  ...props
}: MessageContentProps) => (
  <div
    className={cn(messageContentVariants({ variant, className }))}
    {...props}
  >
    {children}
  </div>
);

export type MessageAvatarProps = ComponentProps<typeof Avatar> & {
  src: string;
  name?: string;
};

export const MessageAvatar = ({
  src,
  name,
  className,
  ...props
}: MessageAvatarProps) => (
  <Avatar className={cn('ring-border size-8 ring-1', className)} {...props}>
    <AvatarImage alt="" className="mt-0 mb-0" src={src} />
    <AvatarFallback>{name?.slice(0, 2) || 'ME'}</AvatarFallback>
  </Avatar>
);



================================================
FILE: src/components/ai-elements/open-in-chat.tsx
================================================
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { cn } from '@/lib/utils';
import {
  ChevronDownIcon,
  ExternalLinkIcon,
  MessageCircleIcon,
} from 'lucide-react';
import { type ComponentProps, createContext, useContext } from 'react';

const providers = {
  github: {
    title: 'Open in GitHub',
    createUrl: (url: string) => url,
    icon: (
      <svg fill="currentColor" role="img" viewBox="0 0 24 24">
        <title>GitHub</title>
        <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
      </svg>
    ),
  },
  scira: {
    title: 'Open in Scira',
    createUrl: (q: string) =>
      `https://scira.ai/?${new URLSearchParams({
        q,
      })}`,
    icon: (
      <svg
        fill="none"
        height="934"
        viewBox="0 0 910 934"
        width="910"
        xmlns="http://www.w3.org/2000/svg"
      >
        <title>Scira AI</title>
        <path
          d="M647.664 197.775C569.13 189.049 525.5 145.419 516.774 66.8849C508.048 145.419 464.418 189.049 385.884 197.775C464.418 206.501 508.048 250.131 516.774 328.665C525.5 250.131 569.13 206.501 647.664 197.775Z"
          fill="currentColor"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="8"
        />
        <path
          d="M516.774 304.217C510.299 275.491 498.208 252.087 480.335 234.214C462.462 216.341 439.058 204.251 410.333 197.775C439.059 191.3 462.462 179.209 480.335 161.336C498.208 143.463 510.299 120.06 516.774 91.334C523.25 120.059 535.34 143.463 553.213 161.336C571.086 179.209 594.49 191.3 623.216 197.775C594.49 204.251 571.086 216.341 553.213 234.214C535.34 252.087 523.25 275.491 516.774 304.217Z"
          fill="currentColor"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="8"
        />
        <path
          d="M857.5 508.116C763.259 497.644 710.903 445.288 700.432 351.047C689.961 445.288 637.605 497.644 543.364 508.116C637.605 518.587 689.961 570.943 700.432 665.184C710.903 570.943 763.259 518.587 857.5 508.116Z"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="20"
        />
        <path
          d="M700.432 615.957C691.848 589.05 678.575 566.357 660.383 548.165C642.191 529.973 619.499 516.7 592.593 508.116C619.499 499.533 642.191 486.258 660.383 468.066C678.575 449.874 691.848 427.181 700.432 400.274C709.015 427.181 722.289 449.874 740.481 468.066C758.673 486.258 781.365 499.533 808.271 508.116C781.365 516.7 758.673 529.973 740.481 548.165C722.289 566.357 709.015 589.05 700.432 615.957Z"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="20"
        />
        <path
          d="M889.949 121.237C831.049 114.692 798.326 81.9698 791.782 23.0692C785.237 81.9698 752.515 114.692 693.614 121.237C752.515 127.781 785.237 160.504 791.782 219.404C798.326 160.504 831.049 127.781 889.949 121.237Z"
          fill="currentColor"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="8"
        />
        <path
          d="M791.782 196.795C786.697 176.937 777.869 160.567 765.16 147.858C752.452 135.15 736.082 126.322 716.226 121.237C736.082 116.152 752.452 107.324 765.16 94.6152C777.869 81.9065 786.697 65.5368 791.782 45.6797C796.867 65.5367 805.695 81.9066 818.403 94.6152C831.112 107.324 847.481 116.152 867.338 121.237C847.481 126.322 831.112 135.15 818.403 147.858C805.694 160.567 796.867 176.937 791.782 196.795Z"
          fill="currentColor"
          stroke="currentColor"
          strokeLinejoin="round"
          strokeWidth="8"
        />
        <path
          d="M760.632 764.337C720.719 814.616 669.835 855.1 611.872 882.692C553.91 910.285 490.404 924.255 426.213 923.533C362.022 922.812 298.846 907.419 241.518 878.531C184.19 849.643 134.228 808.026 95.4548 756.863C56.6815 705.7 30.1238 646.346 17.8129 583.343C5.50207 520.339 7.76433 455.354 24.4266 393.359C41.089 331.364 71.7099 274.001 113.947 225.658C156.184 177.315 208.919 139.273 268.117 114.442"
          stroke="currentColor"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="30"
        />
      </svg>
    ),
  },
  chatgpt: {
    title: 'Open in ChatGPT',
    createUrl: (prompt: string) =>
      `https://chatgpt.com/?${new URLSearchParams({
        hints: 'search',
        prompt,
      })}`,
    icon: (
      <svg
        fill="currentColor"
        role="img"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <title>OpenAI</title>
        <path d="M22.2819 9.8211a5.9847 5.9847 0 0 0-.5157-4.9108 6.0462 6.0462 0 0 0-6.5098-2.9A6.0651 6.0651 0 0 0 4.9807 4.1818a5.9847 5.9847 0 0 0-3.9977 2.9 6.0462 6.0462 0 0 0 .7427 7.0966 5.98 5.98 0 0 0 .511 4.9107 6.051 6.051 0 0 0 6.5146 2.9001A5.9847 5.9847 0 0 0 13.2599 24a6.0557 6.0557 0 0 0 5.7718-4.2058 5.9894 5.9894 0 0 0 3.9977-2.9001 6.0557 6.0557 0 0 0-.7475-7.0729zm-9.022 12.6081a4.4755 4.4755 0 0 1-2.8764-1.0408l.1419-.0804 4.7783-2.7582a.7948.7948 0 0 0 .3927-.6813v-6.7369l2.02 1.1686a.071.071 0 0 1 .038.052v5.5826a4.504 4.504 0 0 1-4.4945 4.4944zm-9.6607-4.1254a4.4708 4.4708 0 0 1-.5346-3.0137l.142.0852 4.783 2.7582a.7712.7712 0 0 0 .7806 0l5.8428-3.3685v2.3324a.0804.0804 0 0 1-.0332.0615L9.74 19.9502a4.4992 4.4992 0 0 1-6.1408-1.6464zM2.3408 7.8956a4.485 4.485 0 0 1 2.3655-1.9728V11.6a.7664.7664 0 0 0 .3879.6765l5.8144 3.3543-2.0201 1.1685a.0757.0757 0 0 1-.071 0l-4.8303-2.7865A4.504 4.504 0 0 1 2.3408 7.872zm16.5963 3.8558L13.1038 8.364 15.1192 7.2a.0757.0757 0 0 1 .071 0l4.8303 2.7913a4.4944 4.4944 0 0 1-.6765 8.1042v-5.6772a.79.79 0 0 0-.407-.667zm2.0107-3.0231l-.142-.0852-4.7735-2.7818a.7759.7759 0 0 0-.7854 0L9.409 9.2297V6.8974a.0662.0662 0 0 1 .0284-.0615l4.8303-2.7866a4.4992 4.4992 0 0 1 6.6802 4.66zM8.3065 12.863l-2.02-1.1638a.0804.0804 0 0 1-.038-.0567V6.0742a4.4992 4.4992 0 0 1 7.3757-3.4537l-.142.0805L8.704 5.459a.7948.7948 0 0 0-.3927.6813zm1.0976-2.3654l2.602-1.4998 2.6069 1.4998v2.9994l-2.5974 1.4997-2.6067-1.4997Z" />
      </svg>
    ),
  },
  claude: {
    title: 'Open in Claude',
    createUrl: (q: string) =>
      `https://claude.ai/new?${new URLSearchParams({
        q,
      })}`,
    icon: (
      <svg
        fill="currentColor"
        role="img"
        viewBox="0 0 12 12"
        xmlns="http://www.w3.org/2000/svg"
      >
        <title>Claude</title>
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M2.3545 7.9775L4.7145 6.654L4.7545 6.539L4.7145 6.475H4.6L4.205 6.451L2.856 6.4145L1.6865 6.366L0.5535 6.305L0.268 6.2445L0 5.892L0.0275 5.716L0.2675 5.5555L0.6105 5.5855L1.3705 5.637L2.5095 5.716L3.3355 5.7645L4.56 5.892H4.7545L4.782 5.8135L4.715 5.7645L4.6635 5.716L3.4845 4.918L2.2085 4.074L1.5405 3.588L1.1785 3.3425L0.9965 3.1115L0.9175 2.6075L1.2455 2.2465L1.686 2.2765L1.7985 2.307L2.245 2.65L3.199 3.388L4.4445 4.3045L4.627 4.4565L4.6995 4.405L4.709 4.3685L4.627 4.2315L3.9495 3.0085L3.2265 1.7635L2.9045 1.2475L2.8195 0.938C2.78711 0.819128 2.76965 0.696687 2.7675 0.5735L3.1415 0.067L3.348 0L3.846 0.067L4.056 0.249L4.366 0.956L4.867 2.0705L5.6445 3.5855L5.8725 4.0345L5.994 4.4505L6.0395 4.578H6.1185V4.505L6.1825 3.652L6.301 2.6045L6.416 1.257L6.456 0.877L6.644 0.422L7.0175 0.176L7.3095 0.316L7.5495 0.6585L7.516 0.8805L7.373 1.806L7.0935 3.2575L6.9115 4.2285H7.0175L7.139 4.1075L7.6315 3.4545L8.4575 2.4225L8.8225 2.0125L9.2475 1.5605L9.521 1.345H10.0375L10.4175 1.9095L10.2475 2.4925L9.7155 3.166L9.275 3.737L8.643 4.587L8.248 5.267L8.2845 5.322L8.3785 5.312L9.8065 5.009L10.578 4.869L11.4985 4.7115L11.915 4.9055L11.9605 5.103L11.7965 5.5065L10.812 5.7495L9.6575 5.9805L7.938 6.387L7.917 6.402L7.9415 6.4325L8.716 6.5055L9.047 6.5235H9.858L11.368 6.636L11.763 6.897L12 7.216L11.9605 7.4585L11.353 7.7685L10.533 7.574L8.6185 7.119L7.9625 6.9545H7.8715V7.0095L8.418 7.5435L9.421 8.4485L10.6755 9.6135L10.739 9.9025L10.578 10.13L10.408 10.1055L9.3055 9.277L8.88 8.9035L7.917 8.0935H7.853V8.1785L8.075 8.503L9.2475 10.2635L9.3085 10.8035L9.2235 10.98L8.9195 11.0865L8.5855 11.0255L7.8985 10.063L7.191 8.9795L6.6195 8.008L6.5495 8.048L6.2125 11.675L6.0545 11.86L5.69 12L5.3865 11.7695L5.2255 11.396L5.3865 10.658L5.581 9.696L5.7385 8.931L5.8815 7.981L5.9665 7.665L5.9605 7.644L5.8905 7.653L5.1735 8.6365L4.0835 10.109L3.2205 11.0315L3.0135 11.1135L2.655 10.9285L2.6885 10.5975L2.889 10.303L4.083 8.785L4.803 7.844L5.268 7.301L5.265 7.222H5.2375L2.066 9.28L1.501 9.353L1.2575 9.125L1.288 8.752L1.4035 8.6305L2.3575 7.9745L2.3545 7.9775Z"
        />
      </svg>
    ),
  },
  t3: {
    title: 'Open in T3 Chat',
    createUrl: (q: string) =>
      `https://t3.chat/new?${new URLSearchParams({
        q,
      })}`,
    icon: <MessageCircleIcon />,
  },
  v0: {
    title: 'Open in v0',
    createUrl: (q: string) =>
      `https://v0.app?${new URLSearchParams({
        q,
      })}`,
    icon: (
      <svg
        fill="currentColor"
        viewBox="0 0 147 70"
        xmlns="http://www.w3.org/2000/svg"
      >
        <title>v0</title>
        <path d="M56 50.2031V14H70V60.1562C70 65.5928 65.5928 70 60.1562 70C57.5605 70 54.9982 68.9992 53.1562 67.1573L0 14H19.7969L56 50.2031Z" />
        <path d="M147 56H133V23.9531L100.953 56H133V70H96.6875C85.8144 70 77 61.1856 77 50.3125V14H91V46.1562L123.156 14H91V0H127.312C138.186 0 147 8.81439 147 19.6875V56Z" />
      </svg>
    ),
  },
};

const OpenInContext = createContext<{ query: string } | undefined>(undefined);

const useOpenInContext = () => {
  const context = useContext(OpenInContext);
  if (!context) {
    throw new Error('OpenIn components must be used within an OpenIn provider');
  }
  return context;
};

export type OpenInProps = ComponentProps<typeof DropdownMenu> & {
  query: string;
};

export const OpenIn = ({ query, ...props }: OpenInProps) => (
  <OpenInContext.Provider value={{ query }}>
    <DropdownMenu {...props} />
  </OpenInContext.Provider>
);

export type OpenInContentProps = ComponentProps<typeof DropdownMenuContent>;

export const OpenInContent = ({ className, ...props }: OpenInContentProps) => (
  <DropdownMenuContent
    align="start"
    className={cn('w-[240px]', className)}
    {...props}
  />
);

export type OpenInItemProps = ComponentProps<typeof DropdownMenuItem>;

export const OpenInItem = (props: OpenInItemProps) => (
  <DropdownMenuItem {...props} />
);

export type OpenInLabelProps = ComponentProps<typeof DropdownMenuLabel>;

export const OpenInLabel = (props: OpenInLabelProps) => (
  <DropdownMenuLabel {...props} />
);

export type OpenInSeparatorProps = ComponentProps<typeof DropdownMenuSeparator>;

export const OpenInSeparator = (props: OpenInSeparatorProps) => (
  <DropdownMenuSeparator {...props} />
);

export type OpenInTriggerProps = ComponentProps<typeof DropdownMenuTrigger>;

export const OpenInTrigger = ({ children, ...props }: OpenInTriggerProps) => (
  <DropdownMenuTrigger {...props} asChild>
    {children ?? (
      <Button type="button" variant="outline">
        Open in chat
        <ChevronDownIcon className="ml-2 size-4" />
      </Button>
    )}
  </DropdownMenuTrigger>
);

export type OpenInChatGPTProps = ComponentProps<typeof DropdownMenuItem>;

export const OpenInChatGPT = (props: OpenInChatGPTProps) => {
  const { query } = useOpenInContext();
  return (
    <DropdownMenuItem asChild {...props}>
      <a
        className="flex items-center gap-2"
        href={providers.chatgpt.createUrl(query)}
        rel="noopener"
        target="_blank"
      >
        <span className="shrink-0">{providers.chatgpt.icon}</span>
        <span className="flex-1">{providers.chatgpt.title}</span>
        <ExternalLinkIcon className="size-4 shrink-0" />
      </a>
    </DropdownMenuItem>
  );
};

export type OpenInClaudeProps = ComponentProps<typeof DropdownMenuItem>;

export const OpenInClaude = (props: OpenInClaudeProps) => {
  const { query } = useOpenInContext();
  return (
    <DropdownMenuItem asChild {...props}>
      <a
        className="flex items-center gap-2"
        href={providers.claude.createUrl(query)}
        rel="noopener"
        target="_blank"
      >
        <span className="shrink-0">{providers.claude.icon}</span>
        <span className="flex-1">{providers.claude.title}</span>
        <ExternalLinkIcon className="size-4 shrink-0" />
      </a>
    </DropdownMenuItem>
  );
};

export type OpenInT3Props = ComponentProps<typeof DropdownMenuItem>;

export const OpenInT3 = (props: OpenInT3Props) => {
  const { query } = useOpenInContext();
  return (
    <DropdownMenuItem asChild {...props}>
      <a
        className="flex items-center gap-2"
        href={providers.t3.createUrl(query)}
        rel="noopener"
        target="_blank"
      >
        <span className="shrink-0">{providers.t3.icon}</span>
        <span className="flex-1">{providers.t3.title}</span>
        <ExternalLinkIcon className="size-4 shrink-0" />
      </a>
    </DropdownMenuItem>
  );
};

export type OpenInSciraProps = ComponentProps<typeof DropdownMenuItem>;

export const OpenInScira = (props: OpenInSciraProps) => {
  const { query } = useOpenInContext();
  return (
    <DropdownMenuItem asChild {...props}>
      <a
        className="flex items-center gap-2"
        href={providers.scira.createUrl(query)}
        rel="noopener"
        target="_blank"
      >
        <span className="shrink-0">{providers.scira.icon}</span>
        <span className="flex-1">{providers.scira.title}</span>
        <ExternalLinkIcon className="size-4 shrink-0" />
      </a>
    </DropdownMenuItem>
  );
};

export type OpenInv0Props = ComponentProps<typeof DropdownMenuItem>;

export const OpenInv0 = (props: OpenInv0Props) => {
  const { query } = useOpenInContext();
  return (
    <DropdownMenuItem asChild {...props}>
      <a
        className="flex items-center gap-2"
        href={providers.v0.createUrl(query)}
        rel="noopener"
        target="_blank"
      >
        <span className="shrink-0">{providers.v0.icon}</span>
        <span className="flex-1">{providers.v0.title}</span>
        <ExternalLinkIcon className="size-4 shrink-0" />
      </a>
    </DropdownMenuItem>
  );
};



================================================
FILE: src/components/ai-elements/prompt-input.tsx
================================================
'use client';

import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from '@/components/ui/command';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { Textarea } from '@/components/ui/textarea';
import { cn } from '@/lib/utils';
import type { ChatStatus, FileUIPart } from 'ai';
import {
  CheckIcon,
  ChevronDownIcon,
  ImageIcon,
  Loader2Icon,
  PaperclipIcon,
  PlusIcon,
  SendIcon,
  SquareIcon,
  XIcon,
} from 'lucide-react';
import { nanoid } from 'nanoid';
import {
  type ChangeEventHandler,
  Children,
  type ClipboardEventHandler,
  type ComponentProps,
  createContext,
  type FormEvent,
  type FormEventHandler,
  Fragment,
  type HTMLAttributes,
  type KeyboardEventHandler,
  type RefObject,
  useCallback,
  useContext,
  useEffect,
  useLayoutEffect,
  useMemo,
  useRef,
  useState,
} from 'react';

type AttachmentsContext = {
  files: (FileUIPart & { id: string })[];
  add: (files: File[] | FileList) => void;
  remove: (id: string) => void;
  clear: () => void;
  openFileDialog: () => void;
  fileInputRef: RefObject<HTMLInputElement | null>;
};

const AttachmentsContext = createContext<AttachmentsContext | null>(null);

export const usePromptInputAttachments = () => {
  const context = useContext(AttachmentsContext);

  if (!context) {
    throw new Error(
      'usePromptInputAttachments must be used within a PromptInput',
    );
  }

  return context;
};

export type PromptInputAttachmentProps = HTMLAttributes<HTMLDivElement> & {
  data: FileUIPart & { id: string };
  className?: string;
};

export function PromptInputAttachment({
  data,
  className,
  ...props
}: PromptInputAttachmentProps) {
  const attachments = usePromptInputAttachments();

  return (
    <div
      className={cn('group relative h-14 w-14 rounded-md border', className)}
      key={data.id}
      {...props}
    >
      {data.mediaType?.startsWith('image/') && data.url ? (
        <img
          alt={data.filename || 'attachment'}
          className="size-full rounded-md object-cover"
          height={56}
          src={data.url}
          width={56}
        />
      ) : (
        <div className="text-muted-foreground flex size-full items-center justify-center">
          <PaperclipIcon className="size-4" />
        </div>
      )}
      <Button
        aria-label="Remove attachment"
        className="absolute -top-1.5 -right-1.5 h-6 w-6 rounded-full opacity-0 group-hover:opacity-100"
        onClick={() => attachments.remove(data.id)}
        size="icon"
        type="button"
        variant="outline"
      >
        <XIcon className="h-3 w-3" />
      </Button>
    </div>
  );
}

export type PromptInputAttachmentsProps = Omit<
  HTMLAttributes<HTMLDivElement>,
  'children'
> & {
  children: (attachment: FileUIPart & { id: string }) => React.ReactNode;
};

export function PromptInputAttachments({
  className,
  children,
  ...props
}: PromptInputAttachmentsProps) {
  const attachments = usePromptInputAttachments();
  const [height, setHeight] = useState(0);
  const contentRef = useRef<HTMLDivElement>(null);

  useLayoutEffect(() => {
    const el = contentRef.current;
    if (!el) {
      return;
    }
    const ro = new ResizeObserver(() => {
      setHeight(el.getBoundingClientRect().height);
    });
    ro.observe(el);
    setHeight(el.getBoundingClientRect().height);
    return () => ro.disconnect();
  }, []);

  return (
    <div
      aria-live="polite"
      className={cn(
        'overflow-hidden transition-[height] duration-200 ease-out',
        className,
      )}
      style={{ height: attachments.files.length ? height : 0 }}
      {...props}
    >
      <div className="flex flex-wrap gap-2 p-3 pt-3" ref={contentRef}>
        {attachments.files.map(file => (
          <Fragment key={file.id}>{children(file)}</Fragment>
        ))}
      </div>
    </div>
  );
}

export type PromptInputActionAddAttachmentsProps = ComponentProps<
  typeof DropdownMenuItem
> & {
  label?: string;
};

export const PromptInputActionAddAttachments = ({
  label = 'Add photos or files',
  ...props
}: PromptInputActionAddAttachmentsProps) => {
  const attachments = usePromptInputAttachments();

  return (
    <DropdownMenuItem
      {...props}
      onSelect={e => {
        e.preventDefault();
        attachments.openFileDialog();
      }}
    >
      <ImageIcon className="mr-2 size-4" /> {label}
    </DropdownMenuItem>
  );
};

export type PromptInputMessage = {
  text?: string;
  files?: FileUIPart[];
};

export type PromptInputProps = Omit<
  HTMLAttributes<HTMLFormElement>,
  'onSubmit'
> & {
  accept?: string; // e.g., "image/*" or leave undefined for any
  multiple?: boolean;
  // When true, accepts drops anywhere on document. Default false (opt-in).
  globalDrop?: boolean;
  // Render a hidden input with given name and keep it in sync for native form posts. Default false.
  syncHiddenInput?: boolean;
  // Minimal constraints
  maxFiles?: number;
  maxFileSize?: number; // bytes
  onError?: (err: {
    code: 'max_files' | 'max_file_size' | 'accept';
    message: string;
  }) => void;
  onSubmit: (
    message: PromptInputMessage,
    event: FormEvent<HTMLFormElement>,
  ) => void;
};

export const PromptInput = ({
  className,
  accept,
  multiple,
  globalDrop,
  syncHiddenInput,
  maxFiles,
  maxFileSize,
  onError,
  onSubmit,
  children,
  ...props
}: PromptInputProps) => {
  const [items, setItems] = useState<(FileUIPart & { id: string })[]>([]);
  const inputRef = useRef<HTMLInputElement | null>(null);
  const anchorRef = useRef<HTMLSpanElement>(null);
  const formRef = useRef<HTMLFormElement | null>(null);

  // Find nearest form to scope drag & drop
  useEffect(() => {
    const root = anchorRef.current?.closest('form');
    if (root instanceof HTMLFormElement) {
      formRef.current = root;
    }
  }, []);

  const openFileDialog = useCallback(() => {
    inputRef.current?.click();
  }, []);

  const matchesAccept = useCallback(
    (f: File) => {
      if (!accept || accept.trim() === '') {
        return true;
      }
      // Simple check: if accept includes "image/*", filter to images; otherwise allow.
      if (accept.includes('image/*')) {
        return f.type.startsWith('image/');
      }
      return true;
    },
    [accept],
  );

  const add = useCallback(
    (files: File[] | FileList) => {
      const incoming = Array.from(files);
      const accepted = incoming.filter(f => matchesAccept(f));
      if (accepted.length === 0) {
        onError?.({
          code: 'accept',
          message: 'No files match the accepted types.',
        });
        return;
      }
      const withinSize = (f: File) =>
        maxFileSize ? f.size <= maxFileSize : true;
      const sized = accepted.filter(withinSize);
      if (sized.length === 0 && accepted.length > 0) {
        onError?.({
          code: 'max_file_size',
          message: 'All files exceed the maximum size.',
        });
        return;
      }
      setItems(prev => {
        const capacity =
          typeof maxFiles === 'number'
            ? Math.max(0, maxFiles - prev.length)
            : undefined;
        const capped =
          typeof capacity === 'number' ? sized.slice(0, capacity) : sized;
        if (typeof capacity === 'number' && sized.length > capacity) {
          onError?.({
            code: 'max_files',
            message: 'Too many files. Some were not added.',
          });
        }
        const next: (FileUIPart & { id: string })[] = [];
        for (const file of capped) {
          next.push({
            id: nanoid(),
            type: 'file',
            url: URL.createObjectURL(file),
            mediaType: file.type,
            filename: file.name,
          });
        }
        return prev.concat(next);
      });
    },
    [matchesAccept, maxFiles, maxFileSize, onError],
  );

  const remove = useCallback((id: string) => {
    setItems(prev => {
      const found = prev.find(file => file.id === id);
      if (found?.url) {
        URL.revokeObjectURL(found.url);
      }
      return prev.filter(file => file.id !== id);
    });
  }, []);

  const clear = useCallback(() => {
    setItems(prev => {
      for (const file of prev) {
        if (file.url) {
          URL.revokeObjectURL(file.url);
        }
      }
      return [];
    });
  }, []);

  // Note: File input cannot be programmatically set for security reasons
  // The syncHiddenInput prop is no longer functional
  useEffect(() => {
    if (syncHiddenInput && inputRef.current) {
      // Clear the input when items are cleared
      if (items.length === 0) {
        inputRef.current.value = '';
      }
    }
  }, [items, syncHiddenInput]);

  // Attach drop handlers on nearest form and document (opt-in)
  useEffect(() => {
    const form = formRef.current;
    if (!form) {
      return;
    }
    const onDragOver = (e: DragEvent) => {
      if (e.dataTransfer?.types?.includes('Files')) {
        e.preventDefault();
      }
    };
    const onDrop = (e: DragEvent) => {
      if (e.dataTransfer?.types?.includes('Files')) {
        e.preventDefault();
      }
      if (e.dataTransfer?.files && e.dataTransfer.files.length > 0) {
        add(e.dataTransfer.files);
      }
    };
    form.addEventListener('dragover', onDragOver);
    form.addEventListener('drop', onDrop);
    return () => {
      form.removeEventListener('dragover', onDragOver);
      form.removeEventListener('drop', onDrop);
    };
  }, [add]);

  useEffect(() => {
    if (!globalDrop) {
      return;
    }
    const onDragOver = (e: DragEvent) => {
      if (e.dataTransfer?.types?.includes('Files')) {
        e.preventDefault();
      }
    };
    const onDrop = (e: DragEvent) => {
      if (e.dataTransfer?.types?.includes('Files')) {
        e.preventDefault();
      }
      if (e.dataTransfer?.files && e.dataTransfer.files.length > 0) {
        add(e.dataTransfer.files);
      }
    };
    document.addEventListener('dragover', onDragOver);
    document.addEventListener('drop', onDrop);
    return () => {
      document.removeEventListener('dragover', onDragOver);
      document.removeEventListener('drop', onDrop);
    };
  }, [add, globalDrop]);

  const handleChange: ChangeEventHandler<HTMLInputElement> = event => {
    if (event.currentTarget.files) {
      add(event.currentTarget.files);
    }
  };

  const convertBlobUrlToDataUrl = async (url: string): Promise<string> => {
    const response = await fetch(url);
    const blob = await response.blob();
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  };

  const handleSubmit: FormEventHandler<HTMLFormElement> = event => {
    event.preventDefault();

    const formData = new FormData(event.currentTarget);
    const text = (formData.get('message') as string) || '';

    // Convert blob URLs to data URLs asynchronously
    Promise.all(
      items.map(async ({ id, ...item }) => {
        if (item.url && item.url.startsWith('blob:')) {
          return {
            ...item,
            url: await convertBlobUrlToDataUrl(item.url),
          };
        }
        return item;
      }),
    ).then((files: FileUIPart[]) => {
      onSubmit({ text, files }, event);
      clear();
    });
  };

  const ctx = useMemo<AttachmentsContext>(
    () => ({
      files: items.map(item => ({ ...item, id: item.id })),
      add,
      remove,
      clear,
      openFileDialog,
      fileInputRef: inputRef,
    }),
    [items, add, remove, clear, openFileDialog],
  );

  return (
    <AttachmentsContext.Provider value={ctx}>
      <span aria-hidden="true" className="hidden" ref={anchorRef} />
      <input
        accept={accept}
        className="hidden"
        multiple={multiple}
        onChange={handleChange}
        ref={inputRef}
        type="file"
      />
      <form
        className={cn(
          'bg-background w-full divide-y overflow-hidden rounded-xl border shadow-sm',
          className,
        )}
        onSubmit={handleSubmit}
        {...props}
      >
        {children}
      </form>
    </AttachmentsContext.Provider>
  );
};

export type PromptInputBodyProps = HTMLAttributes<HTMLDivElement>;

export const PromptInputBody = ({
  className,
  ...props
}: PromptInputBodyProps) => (
  <div className={cn(className, 'flex flex-col')} {...props} />
);

export type PromptInputTextareaProps = ComponentProps<typeof Textarea>;

export const PromptInputTextarea = ({
  onChange,
  className,
  placeholder = 'What would you like to know?',
  ...props
}: PromptInputTextareaProps) => {
  const attachments = usePromptInputAttachments();

  const handleKeyDown: KeyboardEventHandler<HTMLTextAreaElement> = e => {
    if (e.key === 'Enter') {
      // Don't submit if IME composition is in progress
      if (e.nativeEvent.isComposing) {
        return;
      }

      if (e.shiftKey) {
        // Allow newline
        return;
      }

      // Submit on Enter (without Shift)
      e.preventDefault();
      const form = e.currentTarget.form;
      if (form) {
        form.requestSubmit();
      }
    }
  };

  const handlePaste: ClipboardEventHandler<HTMLTextAreaElement> = event => {
    const items = event.clipboardData?.items;

    if (!items) {
      return;
    }

    const files: File[] = [];

    for (const item of items) {
      if (item.kind === 'file') {
        const file = item.getAsFile();
        if (file) {
          files.push(file);
        }
      }
    }

    if (files.length > 0) {
      event.preventDefault();
      attachments.add(files);
    }
  };

  return (
    <Textarea
      className={cn(
        'w-full resize-none rounded-none border-none p-3 shadow-none ring-0 outline-none',
        'field-sizing-content bg-transparent dark:bg-transparent',
        'max-h-48 min-h-16',
        'focus-visible:ring-0',
        className,
      )}
      name="message"
      onChange={e => {
        onChange?.(e);
      }}
      onKeyDown={handleKeyDown}
      onPaste={handlePaste}
      placeholder={placeholder}
      {...props}
    />
  );
};

export type PromptInputToolbarProps = HTMLAttributes<HTMLDivElement>;

export const PromptInputToolbar = ({
  className,
  ...props
}: PromptInputToolbarProps) => (
  <div
    className={cn('flex items-center justify-between p-1', className)}
    {...props}
  />
);

export type PromptInputToolsProps = HTMLAttributes<HTMLDivElement>;

export const PromptInputTools = ({
  className,
  ...props
}: PromptInputToolsProps) => (
  <div
    className={cn(
      'flex items-center gap-1',
      '[&_button:first-child]:rounded-bl-xl',
      className,
    )}
    {...props}
  />
);

export type PromptInputButtonProps = ComponentProps<typeof Button>;

export const PromptInputButton = ({
  variant = 'ghost',
  className,
  size,
  ...props
}: PromptInputButtonProps) => {
  const newSize =
    (size ?? Children.count(props.children) > 1) ? 'default' : 'icon';

  return (
    <Button
      className={cn(
        'shrink-0 gap-1.5 rounded-lg',
        variant === 'ghost' && 'text-muted-foreground',
        newSize === 'default' && 'px-3',
        className,
      )}
      size={newSize}
      type="button"
      variant={variant}
      {...props}
    />
  );
};

export type PromptInputActionMenuProps = ComponentProps<typeof DropdownMenu>;
export const PromptInputActionMenu = (props: PromptInputActionMenuProps) => (
  <DropdownMenu {...props} />
);

export type PromptInputActionMenuTriggerProps = ComponentProps<
  typeof Button
> & {};
export const PromptInputActionMenuTrigger = ({
  className,
  children,
  ...props
}: PromptInputActionMenuTriggerProps) => (
  <DropdownMenuTrigger asChild>
    <PromptInputButton className={className} {...props}>
      {children ?? <PlusIcon className="size-4" />}
    </PromptInputButton>
  </DropdownMenuTrigger>
);

export type PromptInputActionMenuContentProps = ComponentProps<
  typeof DropdownMenuContent
>;
export const PromptInputActionMenuContent = ({
  className,
  ...props
}: PromptInputActionMenuContentProps) => (
  <DropdownMenuContent align="start" className={cn(className)} {...props} />
);

export type PromptInputActionMenuItemProps = ComponentProps<
  typeof DropdownMenuItem
>;
export const PromptInputActionMenuItem = ({
  className,
  ...props
}: PromptInputActionMenuItemProps) => (
  <DropdownMenuItem className={cn(className)} {...props} />
);

// Note: Actions that perform side-effects (like opening a file dialog)
// are provided in opt-in modules (e.g., prompt-input-attachments).

export type PromptInputSubmitProps = ComponentProps<typeof Button> & {
  status?: ChatStatus;
};

export const PromptInputSubmit = ({
  className,
  variant = 'default',
  size = 'icon',
  status,
  children,
  ...props
}: PromptInputSubmitProps) => {
  let Icon = <SendIcon className="size-4" />;

  if (status === 'submitted') {
    Icon = <Loader2Icon className="size-4 animate-spin" />;
  } else if (status === 'streaming') {
    Icon = <SquareIcon className="size-4" />;
  } else if (status === 'error') {
    Icon = <XIcon className="size-4" />;
  }

  return (
    <Button
      aria-label="Submit"
      className={cn('gap-1.5 rounded-lg', className)}
      size={size}
      type="submit"
      variant={variant}
      {...props}
    >
      {children ?? Icon}
    </Button>
  );
};

export type ModelOption = {
  id: string;
  name: string;
  description?: string;
};

export type PromptInputModelSelectProps = {
  value?: string;
  onValueChange?: (value: string) => void;
  models?: ModelOption[];
  placeholder?: string;
};

export const PromptInputModelSelect = ({
  value,
  onValueChange,
  models = [],
  placeholder = 'Select model',
}: PromptInputModelSelectProps) => {
  const [open, setOpen] = useState(false);

  const selectedModel = models.find(model => model.id === value);

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="ghost"
          role="combobox"
          aria-expanded={open}
          className="text-muted-foreground hover:bg-accent hover:text-foreground data-[state=open]:bg-accent data-[state=open]:text-foreground justify-between border-none bg-transparent font-medium shadow-none transition-colors"
        >
          <span className="truncate">
            {selectedModel ? selectedModel.name : placeholder}
          </span>
          <ChevronDownIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[300px] p-0" align="start">
        <Command>
          <CommandInput placeholder="Search models..." />
          <CommandList>
            <CommandEmpty>No models found.</CommandEmpty>
            <CommandGroup>
              {models.map(model => (
                <CommandItem
                  key={model.id}
                  value={model.id}
                  onSelect={selectedValue => {
                    onValueChange?.(selectedValue);
                    setOpen(false);
                  }}
                >
                  <CheckIcon
                    className={cn(
                      'mr-2 h-4 w-4',
                      value === model.id ? 'opacity-100' : 'opacity-0',
                    )}
                  />
                  <div className="flex flex-col">
                    <span>{model.name}</span>
                    {model.description && (
                      <span className="text-muted-foreground max-w-[250px] truncate text-xs">
                        {model.description}
                      </span>
                    )}
                  </div>
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
};

export type PromptInputModelSelectTriggerProps = ComponentProps<typeof Button>;

export const PromptInputModelSelectTrigger = ({
  className,
  children,
  ...props
}: PromptInputModelSelectTriggerProps) => (
  <Button
    variant="ghost"
    role="combobox"
    className={cn(
      'text-muted-foreground justify-between border-none bg-transparent font-medium shadow-none transition-colors',
      'hover:bg-accent hover:text-foreground data-[state=open]:bg-accent data-[state=open]:text-foreground',
      className,
    )}
    {...props}
  >
    {children}
    <ChevronDownIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" />
  </Button>
);

export type PromptInputModelSelectContentProps = {
  children?: React.ReactNode;
};

export const PromptInputModelSelectContent = ({
  children,
}: PromptInputModelSelectContentProps) => <>{children}</>;

export type PromptInputModelSelectItemProps = {
  value: string;
  children: React.ReactNode;
};

export const PromptInputModelSelectItem = ({
  children,
}: PromptInputModelSelectItemProps) => <>{children}</>;

export type PromptInputModelSelectValueProps = {
  placeholder?: string;
  children?: React.ReactNode;
};

export const PromptInputModelSelectValue = ({
  placeholder,
  children,
}: PromptInputModelSelectValueProps) => (
  <span className="truncate">
    {children || <span className="text-muted-foreground">{placeholder}</span>}
  </span>
);



================================================
FILE: src/components/ai-elements/reasoning.tsx
================================================
'use client';

import { useControllableState } from '@radix-ui/react-use-controllable-state';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { cn } from '@/lib/utils';
import { BrainIcon, ChevronDownIcon } from 'lucide-react';
import type { ComponentProps } from 'react';
import { createContext, memo, useContext, useEffect, useState } from 'react';
import { Response } from './response';

type ReasoningContextValue = {
  isStreaming: boolean;
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
  duration: number;
};

const ReasoningContext = createContext<ReasoningContextValue | null>(null);

const useReasoning = () => {
  const context = useContext(ReasoningContext);
  if (!context) {
    throw new Error('Reasoning components must be used within Reasoning');
  }
  return context;
};

export type ReasoningProps = ComponentProps<typeof Collapsible> & {
  isStreaming?: boolean;
  open?: boolean;
  defaultOpen?: boolean;
  onOpenChange?: (open: boolean) => void;
  duration?: number;
};

const AUTO_CLOSE_DELAY = 1000;
const MS_IN_S = 1000;

export const Reasoning = memo(
  ({
    className,
    isStreaming = false,
    open,
    defaultOpen = true,
    onOpenChange,
    duration: durationProp,
    children,
    ...props
  }: ReasoningProps) => {
    const [isOpen, setIsOpen] = useControllableState({
      prop: open,
      defaultProp: defaultOpen,
      onChange: onOpenChange,
    });
    const [duration, setDuration] = useControllableState({
      prop: durationProp,
      defaultProp: 0,
    });

    const [hasAutoClosed, setHasAutoClosed] = useState(false);
    const [startTime, setStartTime] = useState<number | null>(null);

    // Track duration when streaming starts and ends
    useEffect(() => {
      if (isStreaming) {
        if (startTime === null) {
          setStartTime(Date.now());
        }
      } else if (startTime !== null) {
        setDuration(Math.ceil((Date.now() - startTime) / MS_IN_S));
        setStartTime(null);
      }
    }, [isStreaming, startTime, setDuration]);

    // Auto-open when streaming starts, auto-close when streaming ends (once only)
    useEffect(() => {
      if (defaultOpen && !isStreaming && isOpen && !hasAutoClosed) {
        // Add a small delay before closing to allow user to see the content
        const timer = setTimeout(() => {
          setIsOpen(false);
          setHasAutoClosed(true);
        }, AUTO_CLOSE_DELAY);

        return () => clearTimeout(timer);
      }
    }, [isStreaming, isOpen, defaultOpen, setIsOpen, hasAutoClosed]);

    const handleOpenChange = (newOpen: boolean) => {
      setIsOpen(newOpen);
    };

    return (
      <ReasoningContext.Provider
        value={{ isStreaming, isOpen, setIsOpen, duration }}
      >
        <Collapsible
          className={cn('not-prose mb-4', className)}
          onOpenChange={handleOpenChange}
          open={isOpen}
          {...props}
        >
          {children}
        </Collapsible>
      </ReasoningContext.Provider>
    );
  },
);

export type ReasoningTriggerProps = ComponentProps<typeof CollapsibleTrigger>;

const getThinkingMessage = (isStreaming: boolean, duration?: number) => {
  if (isStreaming || duration === 0) {
    return <p>Thinking...</p>;
  }
  if (duration === undefined) {
    return <p>Thought for a few seconds</p>;
  }
  return <p>Thought for {duration} seconds</p>;
};

export const ReasoningTrigger = memo(
  ({ className, children, ...props }: ReasoningTriggerProps) => {
    const { isStreaming, isOpen, duration } = useReasoning();

    return (
      <CollapsibleTrigger
        className={cn(
          'text-muted-foreground hover:text-foreground flex w-full items-center gap-2 text-sm transition-colors',
          className,
        )}
        {...props}
      >
        {children ?? (
          <>
            <BrainIcon className="size-4" />
            {getThinkingMessage(isStreaming, duration)}
            <ChevronDownIcon
              className={cn(
                'size-4 transition-transform',
                isOpen ? 'rotate-180' : 'rotate-0',
              )}
            />
          </>
        )}
      </CollapsibleTrigger>
    );
  },
);

export type ReasoningContentProps = ComponentProps<
  typeof CollapsibleContent
> & {
  children: string;
};

export const ReasoningContent = memo(
  ({ className, children, ...props }: ReasoningContentProps) => (
    <CollapsibleContent
      className={cn(
        'mt-4 text-sm',
        'data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-muted-foreground data-[state=closed]:animate-out data-[state=open]:animate-in outline-none',
        className,
      )}
      {...props}
    >
      <Response className="grid gap-2">{children}</Response>
    </CollapsibleContent>
  ),
);

Reasoning.displayName = 'Reasoning';
ReasoningTrigger.displayName = 'ReasoningTrigger';
ReasoningContent.displayName = 'ReasoningContent';



================================================
FILE: src/components/ai-elements/response.tsx
================================================
'use client';

import { cn } from '@/lib/utils';
import { type ComponentProps, memo } from 'react';
import { Streamdown } from 'streamdown';

type ResponseProps = ComponentProps<typeof Streamdown>;

export const Response = memo(
  ({ className, ...props }: ResponseProps) => (
    <Streamdown
      className={cn(
        'size-full [&>*:first-child]:mt-0 [&>*:last-child]:mb-0',
        className,
      )}
      {...props}
    />
  ),
  (prevProps, nextProps) => prevProps.children === nextProps.children,
);

Response.displayName = 'Response';



================================================
FILE: src/components/ai-elements/sources.tsx
================================================
'use client';

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { cn } from '@/lib/utils';
import { BookIcon, ChevronDownIcon } from 'lucide-react';
import type { ComponentProps } from 'react';

export type SourcesProps = ComponentProps<'div'>;

export const Sources = ({ className, ...props }: SourcesProps) => (
  <Collapsible
    className={cn('not-prose text-primary mb-4 text-xs', className)}
    {...props}
  />
);

export type SourcesTriggerProps = ComponentProps<typeof CollapsibleTrigger> & {
  count: number;
};

export const SourcesTrigger = ({
  className,
  count,
  children,
  ...props
}: SourcesTriggerProps) => (
  <CollapsibleTrigger
    className={cn('flex items-center gap-2', className)}
    {...props}
  >
    {children ?? (
      <>
        <p className="font-medium">Used {count} sources</p>
        <ChevronDownIcon className="h-4 w-4" />
      </>
    )}
  </CollapsibleTrigger>
);

export type SourcesContentProps = ComponentProps<typeof CollapsibleContent>;

export const SourcesContent = ({
  className,
  ...props
}: SourcesContentProps) => (
  <CollapsibleContent
    className={cn(
      'mt-3 flex w-fit flex-col gap-2',
      'data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 data-[state=closed]:animate-out data-[state=open]:animate-in outline-none',
      className,
    )}
    {...props}
  />
);

export type SourceProps = ComponentProps<'a'>;

export const Source = ({ href, title, children, ...props }: SourceProps) => (
  <a
    className="flex items-center gap-2"
    href={href}
    rel="noreferrer"
    target="_blank"
    {...props}
  >
    {children ?? (
      <>
        <BookIcon className="h-4 w-4" />
        <span className="block font-medium">{title}</span>
      </>
    )}
  </a>
);



================================================
FILE: src/components/ai-elements/suggestion.tsx
================================================
'use client';

import { Button } from '@/components/ui/button';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';
import type { ComponentProps } from 'react';

export type SuggestionsProps = ComponentProps<typeof ScrollArea>;

export const Suggestions = ({
  className,
  children,
  ...props
}: SuggestionsProps) => (
  <ScrollArea className="w-full overflow-x-auto whitespace-nowrap" {...props}>
    <div className={cn('flex w-max flex-nowrap items-center gap-2', className)}>
      {children}
    </div>
    <ScrollBar className="hidden" orientation="horizontal" />
  </ScrollArea>
);

export type SuggestionProps = Omit<ComponentProps<typeof Button>, 'onClick'> & {
  suggestion: string;
  onClick?: (suggestion: string) => void;
};

export const Suggestion = ({
  suggestion,
  onClick,
  className,
  variant = 'outline',
  size = 'sm',
  children,
  ...props
}: SuggestionProps) => {
  const handleClick = () => {
    onClick?.(suggestion);
  };

  return (
    <Button
      className={cn('cursor-pointer rounded-full px-4', className)}
      onClick={handleClick}
      size={size}
      type="button"
      variant={variant}
      {...props}
    >
      {children || suggestion}
    </Button>
  );
};



================================================
FILE: src/components/ai-elements/task.tsx
================================================
'use client';

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { cn } from '@/lib/utils';
import { ChevronDownIcon, SearchIcon } from 'lucide-react';
import type { ComponentProps } from 'react';

export type TaskItemFileProps = ComponentProps<'div'>;

export const TaskItemFile = ({
  children,
  className,
  ...props
}: TaskItemFileProps) => (
  <div
    className={cn(
      'bg-secondary text-foreground inline-flex items-center gap-1 rounded-md border px-1.5 py-0.5 text-xs',
      className,
    )}
    {...props}
  >
    {children}
  </div>
);

export type TaskItemProps = ComponentProps<'div'>;

export const TaskItem = ({ children, className, ...props }: TaskItemProps) => (
  <div className={cn('text-muted-foreground text-sm', className)} {...props}>
    {children}
  </div>
);

export type TaskProps = ComponentProps<typeof Collapsible>;

export const Task = ({
  defaultOpen = true,
  className,
  ...props
}: TaskProps) => (
  <Collapsible className={cn(className)} defaultOpen={defaultOpen} {...props} />
);

export type TaskTriggerProps = ComponentProps<typeof CollapsibleTrigger> & {
  title: string;
};

export const TaskTrigger = ({
  children,
  className,
  title,
  ...props
}: TaskTriggerProps) => (
  <CollapsibleTrigger asChild className={cn('group', className)} {...props}>
    {children ?? (
      <div className="text-muted-foreground hover:text-foreground flex w-full cursor-pointer items-center gap-2 text-sm transition-colors">
        <SearchIcon className="size-4" />
        <p className="text-sm">{title}</p>
        <ChevronDownIcon className="size-4 transition-transform group-data-[state=open]:rotate-180" />
      </div>
    )}
  </CollapsibleTrigger>
);

export type TaskContentProps = ComponentProps<typeof CollapsibleContent>;

export const TaskContent = ({
  children,
  className,
  ...props
}: TaskContentProps) => (
  <CollapsibleContent
    className={cn(
      'data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground data-[state=closed]:animate-out data-[state=open]:animate-in outline-none',
      className,
    )}
    {...props}
  >
    <div className="border-muted mt-4 space-y-2 border-l-2 pl-4">
      {children}
    </div>
  </CollapsibleContent>
);



================================================
FILE: src/components/ai-elements/tool.tsx
================================================
'use client';

import { Badge } from '@/components/ui/badge';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { cn } from '@/lib/utils';
import type { ToolUIPart } from 'ai';
import {
  CheckCircleIcon,
  ChevronDownIcon,
  CircleIcon,
  ClockIcon,
  WrenchIcon,
  XCircleIcon,
} from 'lucide-react';
import type { ComponentProps, ReactNode } from 'react';
import { CodeBlock } from './code-block';

export type ToolProps = ComponentProps<typeof Collapsible>;

export const Tool = ({ className, ...props }: ToolProps) => (
  <Collapsible
    className={cn('not-prose mb-4 w-full rounded-md border', className)}
    {...props}
  />
);

export type ToolHeaderProps = {
  title?: string;
  type: ToolUIPart['type'];
  state: ToolUIPart['state'];
  className?: string;
};

const getStatusBadge = (status: ToolUIPart['state']) => {
  const labels = {
    'input-streaming': 'Pending',
    'input-available': 'Running',
    'output-available': 'Completed',
    'output-error': 'Error',
  } as const;

  const icons = {
    'input-streaming': <CircleIcon className="size-4" />,
    'input-available': <ClockIcon className="size-4 animate-pulse" />,
    'output-available': <CheckCircleIcon className="size-4 text-green-600" />,
    'output-error': <XCircleIcon className="size-4 text-red-600" />,
  } as const;

  return (
    <Badge className="gap-1.5 rounded-full text-xs" variant="secondary">
      {icons[status]}
      {labels[status]}
    </Badge>
  );
};

export const ToolHeader = ({
  className,
  title,
  type,
  state,
  ...props
}: ToolHeaderProps) => (
  <CollapsibleTrigger
    className={cn(
      'flex w-full items-center justify-between gap-4 p-3',
      className,
    )}
    {...props}
  >
    <div className="flex items-center gap-2">
      <WrenchIcon className="text-muted-foreground size-4" />
      <span className="text-sm font-medium">
        {title ?? type.split('-').slice(1).join('-')}
      </span>
      {getStatusBadge(state)}
    </div>
    <ChevronDownIcon className="text-muted-foreground size-4 transition-transform group-data-[state=open]:rotate-180" />
  </CollapsibleTrigger>
);

export type ToolContentProps = ComponentProps<typeof CollapsibleContent>;

export const ToolContent = ({ className, ...props }: ToolContentProps) => (
  <CollapsibleContent
    className={cn(
      'data-[state=closed]:fade-out-0 data-[state=closed]:slide-out-to-top-2 data-[state=open]:slide-in-from-top-2 text-popover-foreground data-[state=closed]:animate-out data-[state=open]:animate-in outline-none',
      className,
    )}
    {...props}
  />
);

export type ToolInputProps = ComponentProps<'div'> & {
  input: ToolUIPart['input'];
};

export const ToolInput = ({ className, input, ...props }: ToolInputProps) => (
  <div className={cn('space-y-2 overflow-hidden p-4', className)} {...props}>
    <h4 className="text-muted-foreground text-xs font-medium tracking-wide uppercase">
      Parameters
    </h4>
    <div className="bg-muted/50 rounded-md">
      <CodeBlock code={JSON.stringify(input, null, 2)} language="json" />
    </div>
  </div>
);

export type ToolOutputProps = ComponentProps<'div'> & {
  output: ToolUIPart['output'];
  errorText: ToolUIPart['errorText'];
};

export const ToolOutput = ({
  className,
  output,
  errorText,
  ...props
}: ToolOutputProps) => {
  if (!(output || errorText)) {
    return null;
  }

  let Output = <div>{output as ReactNode}</div>;

  if (typeof output === 'object') {
    Output = (
      <CodeBlock code={JSON.stringify(output, null, 2)} language="json" />
    );
  } else if (typeof output === 'string') {
    Output = <CodeBlock code={output} language="json" />;
  }

  return (
    <div className={cn('space-y-2 p-4', className)} {...props}>
      <h4 className="text-muted-foreground text-xs font-medium tracking-wide uppercase">
        {errorText ? 'Error' : 'Result'}
      </h4>
      <div
        className={cn(
          'overflow-x-auto rounded-md text-xs [&_table]:w-full',
          errorText
            ? 'bg-destructive/10 text-destructive'
            : 'bg-muted/50 text-foreground',
        )}
      >
        {errorText && <div>{errorText}</div>}
        {Output}
      </div>
    </div>
  );
};



================================================
FILE: src/components/ai-elements/web-preview.tsx
================================================
'use client';

import { Button } from '@/components/ui/button';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { Input } from '@/components/ui/input';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';
import { ChevronDownIcon } from 'lucide-react';
import type { ComponentProps, ReactNode } from 'react';
import { createContext, useContext, useEffect, useState } from 'react';

export type WebPreviewContextValue = {
  url: string;
  setUrl: (url: string) => void;
  consoleOpen: boolean;
  setConsoleOpen: (open: boolean) => void;
};

const WebPreviewContext = createContext<WebPreviewContextValue | null>(null);

const useWebPreview = () => {
  const context = useContext(WebPreviewContext);
  if (!context) {
    throw new Error('WebPreview components must be used within a WebPreview');
  }
  return context;
};

export type WebPreviewProps = ComponentProps<'div'> & {
  defaultUrl?: string;
  onUrlChange?: (url: string) => void;
};

export const WebPreview = ({
  className,
  children,
  defaultUrl = '',
  onUrlChange,
  ...props
}: WebPreviewProps) => {
  const [url, setUrl] = useState(defaultUrl);
  const [consoleOpen, setConsoleOpen] = useState(false);

  const handleUrlChange = (newUrl: string) => {
    setUrl(newUrl);
    onUrlChange?.(newUrl);
  };

  const contextValue: WebPreviewContextValue = {
    url,
    setUrl: handleUrlChange,
    consoleOpen,
    setConsoleOpen,
  };

  return (
    <WebPreviewContext.Provider value={contextValue}>
      <div
        className={cn(
          'bg-card flex size-full flex-col rounded-lg border',
          className,
        )}
        {...props}
      >
        {children}
      </div>
    </WebPreviewContext.Provider>
  );
};

export type WebPreviewNavigationProps = ComponentProps<'div'>;

export const WebPreviewNavigation = ({
  className,
  children,
  ...props
}: WebPreviewNavigationProps) => (
  <div
    className={cn('flex items-center gap-1 border-b p-2', className)}
    {...props}
  >
    {children}
  </div>
);

export type WebPreviewNavigationButtonProps = ComponentProps<typeof Button> & {
  tooltip?: string;
};

export const WebPreviewNavigationButton = ({
  onClick,
  disabled,
  tooltip,
  children,
  ...props
}: WebPreviewNavigationButtonProps) => (
  <TooltipProvider>
    <Tooltip>
      <TooltipTrigger asChild>
        <Button
          className="hover:text-foreground h-8 w-8 p-0"
          disabled={disabled}
          onClick={onClick}
          size="sm"
          variant="ghost"
          {...props}
        >
          {children}
        </Button>
      </TooltipTrigger>
      <TooltipContent>
        <p>{tooltip}</p>
      </TooltipContent>
    </Tooltip>
  </TooltipProvider>
);

export type WebPreviewUrlProps = ComponentProps<typeof Input>;

export const WebPreviewUrl = ({
  value,
  onChange,
  onKeyDown,
  ...props
}: WebPreviewUrlProps) => {
  const { url, setUrl } = useWebPreview();
  const [inputValue, setInputValue] = useState(url);

  // Sync input value with context URL when it changes externally
  useEffect(() => {
    setInputValue(url);
  }, [url]);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(event.target.value);
    onChange?.(event);
  };

  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter') {
      const target = event.target as HTMLInputElement;
      setUrl(target.value);
    }
    onKeyDown?.(event);
  };

  return (
    <Input
      className="h-8 flex-1 text-sm"
      onChange={onChange ?? handleChange}
      onKeyDown={handleKeyDown}
      placeholder="Enter URL..."
      value={value ?? inputValue}
      {...props}
    />
  );
};

export type WebPreviewBodyProps = ComponentProps<'iframe'> & {
  loading?: ReactNode;
};

export const WebPreviewBody = ({
  className,
  loading,
  src,
  ...props
}: WebPreviewBodyProps) => {
  const { url } = useWebPreview();

  return (
    <div className="flex-1">
      <iframe
        className={cn('size-full', className)}
        sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-presentation"
        src={(src ?? url) || undefined}
        title="Preview"
        {...props}
      />
      {loading}
    </div>
  );
};

export type WebPreviewConsoleProps = ComponentProps<'div'> & {
  logs?: Array<{
    level: 'log' | 'warn' | 'error';
    message: string;
    timestamp: Date;
  }>;
};

export const WebPreviewConsole = ({
  className,
  logs = [],
  children,
  ...props
}: WebPreviewConsoleProps) => {
  const { consoleOpen, setConsoleOpen } = useWebPreview();

  return (
    <Collapsible
      className={cn('bg-muted/50 border-t font-mono text-sm', className)}
      onOpenChange={setConsoleOpen}
      open={consoleOpen}
      {...props}
    >
      <CollapsibleTrigger asChild>
        <Button
          className="hover:bg-muted/50 flex w-full items-center justify-between p-4 text-left font-medium"
          variant="ghost"
        >
          Console
          <ChevronDownIcon
            className={cn(
              'h-4 w-4 transition-transform duration-200',
              consoleOpen && 'rotate-180',
            )}
          />
        </Button>
      </CollapsibleTrigger>
      <CollapsibleContent
        className={cn(
          'px-4 pb-4',
          'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 data-[state=closed]:animate-out data-[state=open]:animate-in outline-none',
        )}
      >
        <div className="max-h-48 space-y-1 overflow-y-auto">
          {logs.length === 0 ? (
            <p className="text-muted-foreground">No console output</p>
          ) : (
            logs.map((log, index) => (
              <div
                className={cn(
                  'text-xs',
                  log.level === 'error' && 'text-destructive',
                  log.level === 'warn' && 'text-yellow-600',
                  log.level === 'log' && 'text-foreground',
                )}
                key={`${log.timestamp.getTime()}-${index}`}
              >
                <span className="text-muted-foreground">
                  {log.timestamp.toLocaleTimeString()}
                </span>{' '}
                {log.message}
              </div>
            ))
          )}
          {children}
        </div>
      </CollapsibleContent>
    </Collapsible>
  );
};



================================================
FILE: src/components/forms/forgot-password-form.tsx
================================================
'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';

import { z } from 'zod';
import { toast } from 'sonner';
import { useState } from 'react';
import { Loader2 } from 'lucide-react';
import Link from 'next/link';
import { authClient } from '@/lib/auth-client';

const formSchema = z.object({
  email: z.string().email(),
});

export function ForgotPasswordForm({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: '',
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);

    const { error } = await authClient.forgetPassword({
      email: values.email,
      redirectTo: '/reset-password',
    });

    if (error) {
      toast.error(error.message);
    } else {
      toast.success('Password reset email sent');
    }

    setIsLoading(false);
  }

  return (
    <div className={cn('flex flex-col gap-6', className)} {...props}>
      <Card>
        <CardHeader className="text-center">
          <CardTitle className="text-xl">Forgot Password</CardTitle>
          <CardDescription>
            Enter your email to reset your password
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              <div className="grid gap-6">
                <div className="grid gap-3">
                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Email</FormLabel>
                        <FormControl>
                          <Input placeholder="m@example.com" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? (
                    <Loader2 className="size-4 animate-spin" />
                  ) : (
                    'Reset Password'
                  )}
                </Button>
              </div>
              <div className="text-center text-sm">
                Don&apos;t have an account?{' '}
                <Link href="/signup" className="underline underline-offset-4">
                  Sign up
                </Link>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
      <div className="text-muted-foreground text-center text-xs text-balance *:[a]:underline *:[a]:underline-offset-4">
        By clicking continue, you agree to our{' '}
        <Link href="#">Terms of Service</Link> and{' '}
        <Link href="#">Privacy Policy</Link>.
      </div>
    </div>
  );
}



================================================
FILE: src/components/forms/login-form.tsx
================================================
'use client';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { authClient } from '@/lib/auth-client';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { signIn } from '../../../server/users';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';

import { toast } from 'sonner';
import { useRouter } from 'next/navigation';
import { useState } from 'react';
import { Loader2 } from 'lucide-react';
import Link from 'next/link';

const formSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8, 'Password must be at least 8 characters long'),
});

const signInWithGoogle = async () => {
  await authClient.signIn.social({
    provider: 'google',
    callbackURL: '/dashboard',
  });
};
export function LoginForm({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  // 1. Define your form.
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: '',
      password: '',
    },
  });

  // 2. Define a submit handler.
  async function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // ✅ This will be type-safe and validated.
    setIsLoading(true);
    try {
      const { success, message } = await signIn(values.email, values.password);
      if (success) {
        toast.success(message as string);
        router.push('/dashboard');
      } else {
        toast.error(message as string);
      }
    } catch (error) {
      toast.error('An error occurred during login');
      console.error('Login error:', error);
    }
    setIsLoading(false);
  }

  return (
    <div className={cn('flex flex-col gap-6', className)} {...props}>
      <Card>
        <CardHeader className="text-center">
          <CardTitle className="text-xl">Welcome back</CardTitle>
          <CardDescription>Login with your Google account</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form
              onSubmit={form.handleSubmit(onSubmit)}
              data-testid="login-form"
            >
              <div className="grid gap-6">
                <div className="flex flex-col gap-4">
                  <Button
                    variant="outline"
                    className="w-full"
                    type="button"
                    onClick={signInWithGoogle}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                      <path
                        d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
                        fill="currentColor"
                      />
                    </svg>
                    Login with Google
                  </Button>
                </div>
                <div className="after:border-border relative text-center text-sm after:absolute after:inset-0 after:top-1/2 after:z-0 after:flex after:items-center after:border-t">
                  <span className="bg-card text-muted-foreground relative z-10 px-2">
                    Or continue with
                  </span>
                </div>
                <div className="grid gap-6">
                  <div className="grid gap-3">
                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email</FormLabel>
                          <FormControl>
                            <Input placeholder="user@example.com" {...field} />
                          </FormControl>

                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  <div className="grid gap-3">
                    <div className="flex flex-col gap-2">
                      <FormField
                        control={form.control}
                        name="password"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Password</FormLabel>
                            <FormControl>
                              <Input
                                placeholder="********"
                                {...field}
                                type="password"
                              />
                            </FormControl>

                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <a
                        href="/forgot-password"
                        className="ml-auto text-sm underline-offset-4"
                      >
                        Forgot your password?
                      </a>
                    </div>
                  </div>
                  <Button type="submit" className="w-full" disabled={isLoading}>
                    {isLoading ? (
                      <Loader2
                        className="size-4 animate-spin"
                        aria-label="Signing in..."
                      />
                    ) : (
                      'Login'
                    )}
                  </Button>
                </div>
                <div className="text-center text-sm">
                  Don&apos;t have an account?{' '}
                  <a href="/signup" className="underline underline-offset-4">
                    Sign up
                  </a>
                </div>
                <div className="text-center text-sm">
                  Go to{' '}
                  <Link href="/" className="underline underline-offset-4">
                    Home page{' '}
                  </Link>
                </div>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
      <div className="text-muted-foreground text-center text-xs text-balance *:[a]:underline *:[a]:underline-offset-4">
        By clicking continue, you agree to our <a href="#">Terms of Service</a>{' '}
        and <a href="#">Privacy Policy</a>.
      </div>
    </div>
  );
}



================================================
FILE: src/components/forms/reset-password-form.tsx
================================================
'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';

import { z } from 'zod';
import { toast } from 'sonner';
import { useState } from 'react';
import { Loader2 } from 'lucide-react';
import Link from 'next/link';
import { authClient } from '@/lib/auth-client';
import { useRouter, useSearchParams } from 'next/navigation';

const formSchema = z.object({
  password: z.string().min(8),
  confirmPassword: z.string().min(8),
});

export function ResetPasswordForm({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  const searchParams = useSearchParams();
  const router = useRouter();

  const token = searchParams.get('token') as string;

  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      password: '',
      confirmPassword: '',
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);

    if (values.password !== values.confirmPassword) {
      toast.error('Passwords do not match');
      setIsLoading(false);
      return;
    }

    const { error } = await authClient.resetPassword({
      newPassword: values.password,
      token,
    });

    if (error) {
      toast.error(error.message);
    } else {
      toast.success('Password reset successfully');
      router.push('/login');
    }

    setIsLoading(false);
  }

  return (
    <div className={cn('flex flex-col gap-6', className)} {...props}>
      <Card>
        <CardHeader className="text-center">
          <CardTitle className="text-xl">Reset Password</CardTitle>
          <CardDescription>Enter your new password</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              <div className="grid gap-6">
                <div className="grid gap-3">
                  <FormField
                    control={form.control}
                    name="password"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Password</FormLabel>
                        <FormControl>
                          <Input {...field} type="password" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="grid gap-3">
                  <FormField
                    control={form.control}
                    name="confirmPassword"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Confirm Password</FormLabel>
                        <FormControl>
                          <Input {...field} type="password" />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? (
                    <Loader2 className="size-4 animate-spin" />
                  ) : (
                    'Reset Password'
                  )}
                </Button>
              </div>
              <div className="text-center text-sm">
                Don&apos;t have an account?{' '}
                <Link href="/signup" className="underline underline-offset-4">
                  Sign up
                </Link>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
      <div className="text-muted-foreground text-center text-xs text-balance *:[a]:underline *:[a]:underline-offset-4">
        By clicking continue, you agree to our{' '}
        <Link href="#">Terms of Service</Link> and{' '}
        <Link href="#">Privacy Policy</Link>.
      </div>
    </div>
  );
}



================================================
FILE: src/components/forms/reset-password.tsx
================================================
import * as React from 'react';
import {
  Body,
  Button,
  Container,
  Head,
  Heading,
  Html,
  Preview,
  Section,
  Text,
  Tailwind,
} from '@react-email/components';

interface ForgotPasswordEmailProps {
  username: string;
  resetUrl: string;
  userEmail: string;
}

const ForgotPasswordEmail = (props: ForgotPasswordEmailProps) => {
  const { username, resetUrl, userEmail } = props;
  return (
    <Html lang="en" dir="ltr">
      <Tailwind>
        <Head />
        <Preview>Reset your password - Action required</Preview>
        <Body className="bg-gray-100 py-[40px] font-sans">
          <Container className="mx-auto max-w-[600px] rounded-[8px] bg-white shadow-lg">
            {/* Header */}
            <Section className="rounded-t-[8px] bg-blue-600 px-[40px] py-[32px] text-center">
              <Heading className="m-0 mb-[8px] text-[28px] font-bold text-white">
                Password Reset
              </Heading>
              <Text className="m-0 text-[16px] text-white">
                Secure your account with a new password
              </Text>
            </Section>

            {/* Main Content */}
            <Section className="px-[40px] py-[32px]">
              <Text className="mt-0 mb-[16px] text-[18px] font-semibold text-gray-900">
                Hello, {username || 'there'},
              </Text>

              <Text className="mt-0 mb-[24px] text-[16px] leading-[24px] text-gray-800">
                We received a request to reset the password for your account
                associated with <strong>{userEmail}</strong>. Don't worry, it
                happens to the best of us!
              </Text>

              <Text className="mt-0 mb-[32px] text-[16px] leading-[24px] text-gray-800">
                Click the button below to create a new password. This link will
                expire in 24 hours for security reasons.
              </Text>

              {/* Reset Button */}
              <Section className="mb-[32px] text-center">
                <Button
                  href={resetUrl}
                  className="box-border inline-block rounded-[8px] bg-blue-600 px-[32px] py-[16px] text-[16px] font-semibold text-white no-underline"
                  style={{
                    backgroundColor: '#2563eb',
                    color: '#ffffff',
                    textDecoration: 'none',
                    display: 'inline-block',
                  }}
                >
                  Reset My Password
                </Button>
              </Section>

              {/* Alternative Link */}
              <Section className="mb-[24px] rounded-[8px] bg-gray-50 p-[24px]">
                <Text className="mt-0 mb-[8px] text-[14px] font-medium text-gray-800">
                  Button not working? Copy and paste this link into your
                  browser:
                </Text>
                <Text className="m-0 text-[14px] font-medium break-all text-blue-600">
                  {resetUrl}
                </Text>
              </Section>

              {/* Security Notice */}
              <Section className="mb-[24px] border-l-[4px] border-solid border-orange-400 bg-orange-50 py-[16px] pl-[16px]">
                <Text className="mt-0 mb-[8px] text-[14px] font-bold text-orange-900">
                  🔒 Security Notice
                </Text>
                <Text className="m-0 text-[14px] leading-[20px] text-orange-800">
                  If you didn't request this password reset, please ignore this
                  email. Your password will remain unchanged and your account
                  stays secure.
                </Text>
              </Section>

              <Text className="mt-0 mb-[8px] text-[16px] leading-[24px] text-gray-800">
                Need help? Our support team is always ready to assist you.
              </Text>

              <Text className="m-0 text-[16px] leading-[24px] text-gray-800">
                Best regards,
                <br />
                <strong>The Security Team</strong>
              </Text>
            </Section>

            {/* Footer */}
            <Section className="rounded-b-[8px] border-t border-solid border-gray-200 bg-gray-50 px-[40px] py-[24px]">
              <Text className="m-0 mb-[8px] text-center text-[12px] leading-[16px] text-gray-700">
                This email was sent to {userEmail}
              </Text>
              <Text className="m-0 mb-[8px] text-center text-[12px] leading-[16px] text-gray-700">
                123 Security Street, Digital City, DC 12345
              </Text>
              <Text className="m-0 text-center text-[12px] leading-[16px] text-gray-700">
                © 2025 Your Company Name. All rights reserved. |
                <a href="#" className="ml-[4px] text-blue-600 no-underline">
                  Unsubscribe
                </a>
              </Text>
            </Section>
          </Container>
        </Body>
      </Tailwind>
    </Html>
  );
};

ForgotPasswordEmail.PreviewProps = {
  userEmail: 'karthiknitt@gmail.com',
  resetLink: 'https://yourapp.com/reset-password?token=abc123xyz',
};

export default ForgotPasswordEmail;



================================================
FILE: src/components/forms/signout.tsx
================================================
'use client';

import { Button } from '@/components/ui/button';

import { toast } from 'sonner';
import { useState } from 'react';
import { Loader2 } from 'lucide-react';

import { authClient } from '@/lib/auth-client';
import { cn } from '@/lib/utils';
import { useRouter } from 'next/navigation';

export function SignoutButton({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  async function Logout() {
    setIsLoading(true);

    await authClient.signOut({
      fetchOptions: {
        onSuccess: () => {
          toast.success('Logged Out Successfully');
          router.push('/login'); // redirect to login page
        },
      },
    });
  }

  return (
    <div className={cn('flex flex-col gap-6', className)} {...props}>
      <Button
        type="button"
        className="w-full"
        disabled={isLoading}
        onClick={Logout}
      >
        {isLoading ? <Loader2 className="size-4 animate-spin" /> : 'Logout ]->'}
      </Button>
    </div>
  );
}



================================================
FILE: src/components/forms/signup-form.tsx
================================================
'use client';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { authClient } from '@/lib/auth-client';

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { signUp } from '../../../server/users';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';

import { toast } from 'sonner';
import { useRouter } from 'next/navigation';
import { useState } from 'react';
import { Loader2 } from 'lucide-react';

const formSchema = z.object({
  username: z.string().min(3, 'Name must be at least 3 characters long'),
  email: z.string().email(),
  password: z.string().min(8, 'Password must be at least 6 characters long'),
});

const signInWithGoogle = async () => {
  await authClient.signIn.social({
    provider: 'google',
    callbackURL: '/dashboard',
  });
};
export function SignUpForm({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  // 1. Define your form.
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: '',
      email: '',
      password: '',
    },
  });

  // 2. Define a submit handler.
  async function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // ✅ This will be type-safe and validated.
    setIsLoading(true);
    const { success, message } = await signUp(
      values.username,
      values.email,
      values.password,
    );

    if (success) {
      // Create Polar customer after successful signup
      try {
        // Note: Customer creation will happen when user logs in or accesses subscription features
        // This keeps the signup flow fast and doesn't block on external service calls
        console.log(
          'User signed up successfully, Polar customer will be created when first accessing subscriptions',
        );
      } catch (error) {
        console.error('Error during signup process:', error);
        // Don't block signup flow for Polar errors
      }

      toast.success(
        `${message as string} Please check your email for verification`,
      );
      router.push('/dashboard');
    } else {
      toast.error(message as string);
    }
    setIsLoading(false);
  }

  return (
    <div className={cn('flex flex-col gap-6', className)} {...props}>
      <Card>
        <CardHeader className="text-center">
          <CardTitle className="text-xl">Sign up for a New Account</CardTitle>
          <CardDescription>Login with your Google account</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)}>
              <div className="grid gap-6">
                <div className="flex flex-col gap-4">
                  <Button
                    variant="outline"
                    className="w-full"
                    type="button"
                    onClick={signInWithGoogle}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                      <path
                        d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
                        fill="currentColor"
                      />
                    </svg>
                    Login with Google
                  </Button>
                </div>
                <div className="after:border-border relative text-center text-sm after:absolute after:inset-0 after:top-1/2 after:z-0 after:flex after:items-center after:border-t">
                  <span className="bg-card text-muted-foreground relative z-10 px-2">
                    Or Continue to Sign Up with
                  </span>
                </div>
                <div className="grid gap-6">
                  <div className="grid gap-3">
                    <FormField
                      control={form.control}
                      name="username"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Name</FormLabel>
                          <FormControl>
                            <Input placeholder="User's Name" {...field} />
                          </FormControl>

                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  <div className="grid gap-3">
                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email</FormLabel>
                          <FormControl>
                            <Input placeholder="user@example.com" {...field} />
                          </FormControl>

                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  <div className="grid gap-3">
                    <div className="flex flex-col gap-2">
                      <FormField
                        control={form.control}
                        name="password"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Password</FormLabel>{' '}
                            {/* Fix typo here */}
                            <FormControl>
                              <Input
                                placeholder="********"
                                {...field}
                                type="password"
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <a
                        href="/forgot-password"
                        className="ml-auto items-center text-sm underline-offset-4"
                      >
                        Forgot your password?
                      </a>
                    </div>
                  </div>
                  <Button type="submit" className="w-full" disabled={isLoading}>
                    {isLoading ? (
                      <Loader2
                        className="size-4 animate-spin"
                        aria-label="Creating account..."
                      />
                    ) : (
                      'Sign Up'
                    )}
                  </Button>
                </div>
                <div className="text-center text-sm">
                  Already have an account?{' '}
                  <a href="/login" className="underline underline-offset-4">
                    Sign In
                  </a>
                </div>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
      <div className="text-muted-foreground text-center text-xs text-balance *:[a]:underline *:[a]:underline-offset-4">
        By clicking continue, you agree to our <a href="#">Terms of Service</a>{' '}
        and <a href="#">Privacy Policy</a>.
      </div>
    </div>
  );
}



================================================
FILE: src/components/forms/verify-email.tsx
================================================
import * as React from 'react';
import {
  Body,
  Button,
  Container,
  Head,
  Heading,
  Html,
  Link,
  Preview,
  Section,
  Text,
  Tailwind,
} from '@react-email/components';

interface EmailVerificationProps {
  username: string;
  verificationUrl: string;
}

const EmailVerification = (props: EmailVerificationProps) => {
  const { username, verificationUrl } = props;

  return (
    <Html lang="en" dir="ltr">
      <Tailwind>
        <Head />
        <Preview>
          Verify your email address to complete your account setup
        </Preview>
        <Body className="bg-gray-100 py-[40px] font-sans">
          <Container className="mx-auto max-w-[600px] rounded-[8px] bg-white p-[40px] shadow-sm">
            <Section>
              <Heading className="mb-[24px] text-center text-[28px] font-bold text-gray-900">
                Verify Your Email Address
              </Heading>

              <Text className="mb-[24px] text-[16px] leading-[24px] text-gray-700">
                Hi, {username || 'there!'}
              </Text>

              <Text className="mb-[24px] text-[16px] leading-[24px] text-gray-700">
                Thanks for signing up! To complete your account setup and start
                using our platform, please verify your email address by clicking
                the button below.
              </Text>

              <Section className="mb-[32px] text-center">
                <Button
                  href={verificationUrl}
                  className="box-border rounded-[8px] bg-blue-600 px-[32px] py-[16px] text-[16px] font-semibold text-white no-underline"
                >
                  Verify Email Address
                </Button>
              </Section>

              <Text className="mb-[24px] text-[14px] leading-[20px] text-gray-600">
                If the button above doesn't work, you can also copy and paste
                the following link into your browser:
              </Text>

              <Text className="mb-[32px] text-[14px] break-all text-blue-600">
                <Link
                  href={verificationUrl}
                  className="text-blue-600 underline"
                >
                  {verificationUrl}
                </Link>
              </Text>

              <Text className="mb-[24px] text-[14px] leading-[20px] text-gray-600">
                This verification link will expire in 24 hours for security
                reasons. If you didn't create an account, you can safely ignore
                this email.
              </Text>

              <Text className="mb-[32px] text-[16px] leading-[24px] text-gray-700">
                Best regards,
                <br />
                The Team
              </Text>
            </Section>

            <Section className="border-t border-gray-200 pt-[24px]">
              <Text className="m-0 mb-[8px] text-center text-[12px] text-gray-500">
                © 2024 Your Company Name. All rights reserved.
              </Text>
              <Text className="m-0 mb-[8px] text-center text-[12px] text-gray-500">
                123 Business Street, Suite 100, City, State 12345
              </Text>
              <Text className="m-0 text-center text-[12px] text-gray-500">
                <Link href="#" className="text-gray-500 underline">
                  Unsubscribe
                </Link>{' '}
                |
                <Link href="#" className="ml-[8px] text-gray-500 underline">
                  Privacy Policy
                </Link>
              </Text>
            </Section>
          </Container>
        </Body>
      </Tailwind>
    </Html>
  );
};

EmailVerification.PreviewProps = {
  userEmail: 'karthiknitt@gmail.com',
  verificationUrl: 'https://yourapp.com/verify-email?token=abc123xyz789',
};

export default EmailVerification;



================================================
FILE: src/components/ui/accordion.tsx
================================================
'use client';

import * as React from 'react';
import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { ChevronDownIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />;
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn('border-b last:border-b-0', className)}
      {...props}
    />
  );
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          'focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180',
          className,
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  );
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn('pt-0 pb-4', className)}>{children}</div>
    </AccordionPrimitive.Content>
  );
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };



================================================
FILE: src/components/ui/alert-dialog.tsx
================================================
'use client';

import * as React from 'react';
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';

import { cn } from '@/lib/utils';
import { buttonVariants } from '@/components/ui/button';

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />;
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  );
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  );
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',
        className,
      )}
      {...props}
    />
  );
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',
          className,
        )}
        {...props}
      />
    </AlertDialogPortal>
  );
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}
      {...props}
    />
  );
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',
        className,
      )}
      {...props}
    />
  );
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn('text-lg font-semibold', className)}
      {...props}
    />
  );
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  );
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  );
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: 'outline' }), className)}
      {...props}
    />
  );
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};



================================================
FILE: src/components/ui/alert.tsx
================================================
import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const alertVariants = cva(
  'relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current',
  {
    variants: {
      variant: {
        default: 'bg-card text-card-foreground',
        destructive:
          'text-[var(--status-error-fg)] bg-[var(--status-error)]/10 border-[var(--status-error)] [&>svg]:text-current *:data-[slot=alert-description]:text-[var(--status-error-fg)]/90',
        success:
          'text-[var(--status-success-fg)] bg-[var(--status-success)]/10 border-[var(--status-success)] [&>svg]:text-current *:data-[slot=alert-description]:text-[var(--status-success-fg)]/90',
        warning:
          'text-[var(--status-warning-fg)] bg-[var(--status-warning)]/10 border-[var(--status-warning)] [&>svg]:text-current *:data-[slot=alert-description]:text-[var(--status-warning-fg)]/90',
        info: 'text-[var(--status-info-fg)] bg-[var(--status-info)]/10 border-[var(--status-info)] [&>svg]:text-current *:data-[slot=alert-description]:text-[var(--status-info-fg)]/90',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
);

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  );
}

function AlertTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        'col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight',
        className,
      )}
      {...props}
    />
  );
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        'text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed',
        className,
      )}
      {...props}
    />
  );
}

export { Alert, AlertTitle, AlertDescription };



================================================
FILE: src/components/ui/aspect-ratio.tsx
================================================
'use client';

import * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio';

function AspectRatio({
  ...props
}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {
  return <AspectRatioPrimitive.Root data-slot="aspect-ratio" {...props} />;
}

export { AspectRatio };



================================================
FILE: src/components/ui/avatar.tsx
================================================
'use client';

import * as React from 'react';
import * as AvatarPrimitive from '@radix-ui/react-avatar';

import { cn } from '@/lib/utils';

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        'relative flex size-8 shrink-0 overflow-hidden rounded-full',
        className,
      )}
      {...props}
    />
  );
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn('aspect-square size-full', className)}
      {...props}
    />
  );
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        'bg-muted flex size-full items-center justify-center rounded-full',
        className,
      )}
      {...props}
    />
  );
}

export { Avatar, AvatarImage, AvatarFallback };



================================================
FILE: src/components/ui/badge.tsx
================================================
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const badgeVariants = cva(
  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',
  {
    variants: {
      variant: {
        default:
          'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-[var(--nav-active)]',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-[var(--interactive-hover)]',
        destructive:
          'border-transparent bg-[var(--status-error)] text-[var(--status-error-fg)] [a&]:hover:bg-[var(--status-error)]/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',
        success:
          'border-transparent bg-[var(--status-success)] text-[var(--status-success-fg)] [a&]:hover:bg-[var(--status-success)]/90',
        warning:
          'border-transparent bg-[var(--status-warning)] text-[var(--status-warning-fg)] [a&]:hover:bg-[var(--status-warning)]/90',
        info: 'border-transparent bg-[var(--status-info)] text-[var(--status-info-fg)] [a&]:hover:bg-[var(--status-info)]/90',
        outline:
          'text-foreground [a&]:hover:bg-[var(--interactive-hover)] [a&]:hover:text-accent-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
);

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<'span'> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'span';

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  );
}

export { Badge, badgeVariants };



================================================
FILE: src/components/ui/breadcrumb.tsx
================================================
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { ChevronRight, MoreHorizontal } from 'lucide-react';

import { cn } from '@/lib/utils';

function Breadcrumb({ ...props }: React.ComponentProps<'nav'>) {
  return <nav aria-label="breadcrumb" data-slot="breadcrumb" {...props} />;
}

function BreadcrumbList({ className, ...props }: React.ComponentProps<'ol'>) {
  return (
    <ol
      data-slot="breadcrumb-list"
      className={cn(
        'text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5',
        className,
      )}
      {...props}
    />
  );
}

function BreadcrumbItem({ className, ...props }: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot="breadcrumb-item"
      className={cn('inline-flex items-center gap-1.5', className)}
      {...props}
    />
  );
}

function BreadcrumbLink({
  asChild,
  className,
  ...props
}: React.ComponentProps<'a'> & {
  asChild?: boolean;
}) {
  const Comp = asChild ? Slot : 'a';

  return (
    <Comp
      data-slot="breadcrumb-link"
      className={cn('hover:text-foreground transition-colors', className)}
      {...props}
    />
  );
}

function BreadcrumbPage({ className, ...props }: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="breadcrumb-page"
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn('text-foreground font-normal', className)}
      {...props}
    />
  );
}

function BreadcrumbSeparator({
  children,
  className,
  ...props
}: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot="breadcrumb-separator"
      role="presentation"
      aria-hidden="true"
      className={cn('[&>svg]:size-3.5', className)}
      {...props}
    >
      {children ?? <ChevronRight />}
    </li>
  );
}

function BreadcrumbEllipsis({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="breadcrumb-ellipsis"
      role="presentation"
      aria-hidden="true"
      className={cn('flex size-9 items-center justify-center', className)}
      {...props}
    >
      <MoreHorizontal className="size-4" />
      <span className="sr-only">More</span>
    </span>
  );
}

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};



================================================
FILE: src/components/ui/button-group.tsx
================================================
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';
import { Separator } from '@/components/ui/separator';

const buttonGroupVariants = cva(
  "flex w-fit items-stretch [&>*]:focus-visible:z-10 [&>*]:focus-visible:relative [&>[data-slot=select-trigger]:not([class*='w-'])]:w-fit [&>input]:flex-1 has-[select[aria-hidden=true]:last-child]:[&>[data-slot=select-trigger]:last-of-type]:rounded-r-md has-[>[data-slot=button-group]]:gap-2",
  {
    variants: {
      orientation: {
        horizontal:
          '[&>*:not(:first-child)]:rounded-l-none [&>*:not(:first-child)]:border-l-0 [&>*:not(:last-child)]:rounded-r-none',
        vertical:
          'flex-col [&>*:not(:first-child)]:rounded-t-none [&>*:not(:first-child)]:border-t-0 [&>*:not(:last-child)]:rounded-b-none',
      },
    },
    defaultVariants: {
      orientation: 'horizontal',
    },
  },
);

/**
 * Renders a grouped container for related buttons with orientation-aware styling and accessibility attributes.
 *
 * @returns A `div` element with `role="group"`, `data-slot="button-group"`, a `data-orientation` attribute, and classes from the `buttonGroupVariants` merged with any provided `className`
 */
function ButtonGroup({
  className,
  orientation,
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof buttonGroupVariants>) {
  return (
    <div
      role="group"
      data-slot="button-group"
      data-orientation={orientation}
      className={cn(buttonGroupVariants({ orientation }), className)}
      {...props}
    />
  );
}

/**
 * Renders a styled label/text container for a ButtonGroup, optionally using Slot to render a provided child element in-place.
 *
 * @param asChild - When `true`, renders using `Slot` so the caller can pass a custom element as the container; when `false`, renders a `div`.
 * @returns A React element that serves as the button group's muted, rounded, bordered, padded text container
 */
function ButtonGroupText({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'div'> & {
  asChild?: boolean;
}) {
  const Comp = asChild ? Slot : 'div';

  return (
    <Comp
      className={cn(
        "bg-muted flex items-center gap-2 rounded-md border px-4 text-sm font-medium shadow-xs [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a Separator element styled for use inside a ButtonGroup.
 *
 * @param orientation - Layout of the separator; `"vertical"` places it between horizontally arranged items and `"horizontal"` places it between vertically arranged items. Defaults to `"vertical"`.
 * @returns A React element representing a styled separator for a ButtonGroup.
 */
function ButtonGroupSeparator({
  className,
  orientation = 'vertical',
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="button-group-separator"
      orientation={orientation}
      className={cn(
        'bg-input relative !m-0 self-stretch data-[orientation=vertical]:h-auto',
        className,
      )}
      {...props}
    />
  );
}

export {
  ButtonGroup,
  ButtonGroupSeparator,
  ButtonGroupText,
  buttonGroupVariants,
};



================================================
FILE: src/components/ui/button.tsx
================================================
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors duration-200 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          'bg-primary text-primary-foreground hover:bg-[var(--nav-active)] hover:text-primary',
        destructive:
          'bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',
        outline:
          'border bg-background shadow-xs hover:bg-[var(--interactive-hover)] hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',
        secondary:
          'bg-secondary text-secondary-foreground hover:bg-[var(--interactive-hover)]',
        ghost:
          'hover:bg-[var(--interactive-hover)] hover:text-accent-foreground dark:hover:bg-accent/50',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-9 px-4 py-2 has-[>svg]:px-3',
        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',
        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
        icon: 'size-9',
        'icon-sm': 'size-8',
        'icon-lg': 'size-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<'button'> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : 'button';

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };



================================================
FILE: src/components/ui/calendar.tsx
================================================
'use client';

import * as React from 'react';
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from 'lucide-react';
import { DayButton, DayPicker, getDefaultClassNames } from 'react-day-picker';

import { cn } from '@/lib/utils';
import { Button, buttonVariants } from '@/components/ui/button';

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = 'label',
  buttonVariant = 'ghost',
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>['variant'];
}) {
  const defaultClassNames = getDefaultClassNames();

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        'bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent',
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className,
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: date =>
          date.toLocaleString('default', { month: 'short' }),
        ...formatters,
      }}
      classNames={{
        root: cn('w-fit', defaultClassNames.root),
        months: cn(
          'flex gap-4 flex-col md:flex-row relative',
          defaultClassNames.months,
        ),
        month: cn('flex flex-col w-full gap-4', defaultClassNames.month),
        nav: cn(
          'flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between',
          defaultClassNames.nav,
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',
          defaultClassNames.button_previous,
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',
          defaultClassNames.button_next,
        ),
        month_caption: cn(
          'flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)',
          defaultClassNames.month_caption,
        ),
        dropdowns: cn(
          'w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5',
          defaultClassNames.dropdowns,
        ),
        dropdown_root: cn(
          'relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md',
          defaultClassNames.dropdown_root,
        ),
        dropdown: cn(
          'absolute bg-popover inset-0 opacity-0',
          defaultClassNames.dropdown,
        ),
        caption_label: cn(
          'select-none font-medium',
          captionLayout === 'label'
            ? 'text-sm'
            : 'rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5',
          defaultClassNames.caption_label,
        ),
        table: 'w-full border-collapse',
        weekdays: cn('flex', defaultClassNames.weekdays),
        weekday: cn(
          'text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none',
          defaultClassNames.weekday,
        ),
        week: cn('flex w-full mt-2', defaultClassNames.week),
        week_number_header: cn(
          'select-none w-(--cell-size)',
          defaultClassNames.week_number_header,
        ),
        week_number: cn(
          'text-[0.8rem] select-none text-muted-foreground',
          defaultClassNames.week_number,
        ),
        day: cn(
          'relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none',
          defaultClassNames.day,
        ),
        range_start: cn(
          'rounded-l-md bg-accent',
          defaultClassNames.range_start,
        ),
        range_middle: cn('rounded-none', defaultClassNames.range_middle),
        range_end: cn('rounded-r-md bg-accent', defaultClassNames.range_end),
        today: cn(
          'bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none',
          defaultClassNames.today,
        ),
        outside: cn(
          'text-muted-foreground aria-selected:text-muted-foreground',
          defaultClassNames.outside,
        ),
        disabled: cn(
          'text-muted-foreground opacity-50',
          defaultClassNames.disabled,
        ),
        hidden: cn('invisible', defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          );
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === 'left') {
            return (
              <ChevronLeftIcon className={cn('size-4', className)} {...props} />
            );
          }

          if (orientation === 'right') {
            return (
              <ChevronRightIcon
                className={cn('size-4', className)}
                {...props}
              />
            );
          }

          return (
            <ChevronDownIcon className={cn('size-4', className)} {...props} />
          );
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          );
        },
        ...components,
      }}
      {...props}
    />
  );
}

/**
 * Renders a calendar day button that reflects focus, selection, and range states.
 *
 * @param className - Additional class names to apply to the underlying button
 * @param day - The day object for this cell (provides the date displayed)
 * @param modifiers - Modifier flags for the day (e.g., `selected`, `range_start`, `range_end`, `range_middle`, `focused`)
 * @returns A button element representing a single calendar day with data attributes and classes that indicate focus, selected, and range states
 */
function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames();

  const ref = React.useRef<HTMLButtonElement>(null);
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus();
  }, [modifiers.focused]);

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        'data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] hover:bg-[var(--calendar-day-hover)] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-end=true]:bg-[var(--calendar-day-selected)] data-[range-end=true]:text-[var(--calendar-day-selected-fg)] data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md data-[range-start=true]:bg-[var(--calendar-day-selected)] data-[range-start=true]:text-[var(--calendar-day-selected-fg)] data-[selected-single=true]:bg-[var(--calendar-day-selected)] data-[selected-single=true]:text-[var(--calendar-day-selected-fg)] [&>span]:text-xs [&>span]:opacity-70',
        defaultClassNames.day,
        className,
      )}
      {...props}
    />
  );
}

export { Calendar, CalendarDayButton };



================================================
FILE: src/components/ui/card.tsx
================================================
import * as React from 'react';

import { cn } from '@/lib/utils';

/**
 * Container component that renders a styled card wrapper.
 *
 * @param className - Additional CSS class names to merge with the component's default styles
 * @param props - Additional props spread onto the root `div`
 * @returns A `div` element with `data-slot="card"`, combined class names, and any provided props
 */
function Card({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card"
      className={cn(
        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders the header section of a Card component.
 *
 * @returns A `div` element with `data-slot="card-header"` and the component's header classes merged with any provided `className`.
 */
function CardHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',
        className,
      )}
      {...props}
    />
  );
}

function CardTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-title"
      className={cn('leading-none font-semibold', className)}
      {...props}
    />
  );
}

function CardDescription({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  );
}

function CardAction({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        'col-start-2 row-span-2 row-start-1 self-start justify-self-end',
        className,
      )}
      {...props}
    />
  );
}

function CardContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-content"
      className={cn('px-6', className)}
      {...props}
    />
  );
}

function CardFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-footer"
      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}
      {...props}
    />
  );
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
};



================================================
FILE: src/components/ui/carousel.tsx
================================================
'use client';

import * as React from 'react';
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from 'embla-carousel-react';
import { ArrowLeft, ArrowRight } from 'lucide-react';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: 'horizontal' | 'vertical';
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error('useCarousel must be used within a <Carousel />');
  }

  return context;
}

function Carousel({
  orientation = 'horizontal',
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}: React.ComponentProps<'div'> & CarouselProps) {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === 'horizontal' ? 'x' : 'y',
    },
    plugins,
  );
  const [canScrollPrev, setCanScrollPrev] = React.useState(false);
  const [canScrollNext, setCanScrollNext] = React.useState(false);

  const onSelect = React.useCallback((api: CarouselApi) => {
    if (!api) return;
    setCanScrollPrev(api.canScrollPrev());
    setCanScrollNext(api.canScrollNext());
  }, []);

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev();
  }, [api]);

  const scrollNext = React.useCallback(() => {
    api?.scrollNext();
  }, [api]);

  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (event.key === 'ArrowLeft') {
        event.preventDefault();
        scrollPrev();
      } else if (event.key === 'ArrowRight') {
        event.preventDefault();
        scrollNext();
      }
    },
    [scrollPrev, scrollNext],
  );

  React.useEffect(() => {
    if (!api || !setApi) return;
    setApi(api);
  }, [api, setApi]);

  React.useEffect(() => {
    if (!api) return;
    onSelect(api);
    api.on('reInit', onSelect);
    api.on('select', onSelect);

    return () => {
      api?.off('select', onSelect);
    };
  }, [api, onSelect]);

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}
    >
      <div
        onKeyDownCapture={handleKeyDown}
        className={cn('relative', className)}
        role="region"
        aria-roledescription="carousel"
        data-slot="carousel"
        {...props}
      >
        {children}
      </div>
    </CarouselContext.Provider>
  );
}

function CarouselContent({ className, ...props }: React.ComponentProps<'div'>) {
  const { carouselRef, orientation } = useCarousel();

  return (
    <div
      ref={carouselRef}
      className="overflow-hidden"
      data-slot="carousel-content"
    >
      <div
        className={cn(
          'flex',
          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',
          className,
        )}
        {...props}
      />
    </div>
  );
}

function CarouselItem({ className, ...props }: React.ComponentProps<'div'>) {
  const { orientation } = useCarousel();

  return (
    <div
      role="group"
      aria-roledescription="slide"
      data-slot="carousel-item"
      className={cn(
        'min-w-0 shrink-0 grow-0 basis-full',
        orientation === 'horizontal' ? 'pl-4' : 'pt-4',
        className,
      )}
      {...props}
    />
  );
}

function CarouselPrevious({
  className,
  variant = 'outline',
  size = 'icon',
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();

  return (
    <Button
      data-slot="carousel-previous"
      variant={variant}
      size={size}
      className={cn(
        'absolute size-8 rounded-full',
        orientation === 'horizontal'
          ? 'top-1/2 -left-12 -translate-y-1/2'
          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',
        className,
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
}

function CarouselNext({
  className,
  variant = 'outline',
  size = 'icon',
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollNext, canScrollNext } = useCarousel();

  return (
    <Button
      data-slot="carousel-next"
      variant={variant}
      size={size}
      className={cn(
        'absolute size-8 rounded-full',
        orientation === 'horizontal'
          ? 'top-1/2 -right-12 -translate-y-1/2'
          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',
        className,
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight />
      <span className="sr-only">Next slide</span>
    </Button>
  );
}

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
};



================================================
FILE: src/components/ui/chart.tsx
================================================
'use client';

import * as React from 'react';
import * as RechartsPrimitive from 'recharts';

import { cn } from '@/lib/utils';

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: '', dark: '.dark' } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  );
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error('useChart must be used within a <ChartContainer />');
  }

  return context;
}

function ChartContainer({
  id,
  className,
  children,
  config,
  ...props
}: React.ComponentProps<'div'> & {
  config: ChartConfig;
  children: React.ComponentProps<
    typeof RechartsPrimitive.ResponsiveContainer
  >['children'];
}) {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-slot="chart"
        data-chart={chartId}
        className={cn(
          "[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden",
          className,
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
}

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color,
  );

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join('\n')}
}
`,
          )
          .join('\n'),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

/**
 * Render chart tooltip content using the chart configuration and incoming payload.
 *
 * Renders an optional label and a list of payload items (excluding items with `type === 'none'`), applying per-item configuration (labels, icons, colors) and optional formatting.
 *
 * @param indicator - Visual indicator style for each item: `'line'`, `'dot'`, or `'dashed'`.
 * @param hideLabel - When true, the tooltip's top label is not displayed.
 * @param hideIndicator - When true, item indicators (color swatches / lines / dots) are not rendered.
 * @param labelFormatter - Optional function to format the tooltip label; receives the resolved label value and the full payload.
 * @param formatter - Optional item formatter function used to render a payload item; receives the item's value, name, item object, index, and payload.
 * @param nameKey - Optional override key to use when resolving an item's config/name from the payload.
 * @param labelKey - Optional override key to use when resolving the tooltip label from the payload.
 * @param color - Fallback color used for item indicators when the payload does not provide one.
 * @returns The tooltip content element or `null` when inactive or when there is no payload.
 */
type TooltipPayloadItem = {
  dataKey?: string;
  name?: string;
  value?: any;
  payload?: any;
  type?: string;
  color?: string;
};

type LegendPayloadItem = {
  value?: string;
  type?: string;
  color?: string;
  dataKey?: string;
};

function ChartTooltipContent({
  active,
  payload,
  className,
  indicator = 'dot',
  hideLabel = false,
  hideIndicator = false,
  label,
  labelFormatter,
  labelClassName,
  formatter,
  color,
  nameKey,
  labelKey,
}: {
  active?: boolean;
  payload?: TooltipPayloadItem[];
  label?: any;
  labelClassName?: string;
} & React.ComponentProps<'div'> & {
    hideLabel?: boolean;
    hideIndicator?: boolean;
    indicator?: 'line' | 'dot' | 'dashed';
    nameKey?: string;
    labelKey?: string;
    labelFormatter?: (
      value: any,
      payload: TooltipPayloadItem[],
    ) => React.ReactNode;
    formatter?: (
      value: any,
      name: any,
      item: TooltipPayloadItem,
      index: number,
      payload: TooltipPayloadItem[],
    ) => React.ReactNode;
  }) {
  const { config } = useChart();

  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null;
    }

    const [item] = payload;
    const key = `${labelKey || item?.dataKey || item?.name || 'value'}`;
    const itemConfig = getPayloadConfigFromPayload(config, item, key);
    const value =
      !labelKey && typeof label === 'string'
        ? config[label as keyof typeof config]?.label || label
        : itemConfig?.label;

    if (labelFormatter) {
      return (
        <div className={cn('font-medium', labelClassName)}>
          {labelFormatter(value, payload)}
        </div>
      );
    }

    if (!value) {
      return null;
    }

    return <div className={cn('font-medium', labelClassName)}>{value}</div>;
  }, [
    label,
    labelFormatter,
    payload,
    hideLabel,
    labelClassName,
    config,
    labelKey,
  ]);

  if (!active || !payload?.length) {
    return null;
  }

  const nestLabel = payload.length === 1 && indicator !== 'dot';

  return (
    <div
      className={cn(
        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',
        className,
      )}
    >
      {!nestLabel ? tooltipLabel : null}
      <div className="grid gap-1.5">
        {payload
          .filter(item => item.type !== 'none')
          .map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || 'value'}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',
                  indicator === 'dot' && 'items-center',
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            'shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)',
                            {
                              'h-2.5 w-2.5': indicator === 'dot',
                              'w-1': indicator === 'line',
                              'w-0 border-[1.5px] border-dashed bg-transparent':
                                indicator === 'dashed',
                              'my-0.5': nestLabel && indicator === 'dashed',
                            },
                          )}
                          style={
                            {
                              '--color-bg': indicatorColor,
                              '--color-border': indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        'flex flex-1 justify-between leading-none',
                        nestLabel ? 'items-end' : 'items-center',
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="text-foreground font-mono font-medium tabular-nums">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
      </div>
    </div>
  );
}

const ChartLegend = RechartsPrimitive.Legend;

/**
 * Render a chart legend with configured labels and optional icons for each payload item.
 *
 * Renders a horizontal list of legend entries derived from Recharts `payload`, skipping items with `type === 'none'`. Each entry shows either the configured icon (unless `hideIcon` is true) or a colored swatch and the configured label.
 *
 * @param className - Additional class names applied to the legend container
 * @param hideIcon - When true, icons from the series config are not rendered; a color swatch is shown instead
 * @param payload - Recharts legend payload array describing legend items
 * @param verticalAlign - Vertical alignment of the legend within its container, affects spacing
 * @param nameKey - Optional override key to resolve legend item configuration from payload entries
 * @returns The legend element or `null` when `payload` is empty
 */
function ChartLegendContent({
  className,
  hideIcon = false,
  payload,
  verticalAlign = 'bottom',
  nameKey,
}: React.ComponentProps<'div'> & {
  payload?: LegendPayloadItem[];
  verticalAlign?: 'top' | 'bottom' | 'middle';
  hideIcon?: boolean;
  nameKey?: string;
}) {
  const { config } = useChart();

  if (!payload?.length) {
    return null;
  }

  return (
    <div
      className={cn(
        'flex items-center justify-center gap-4',
        verticalAlign === 'top' ? 'pb-3' : 'pt-3',
        className,
      )}
    >
      {payload
        .filter(item => item.type !== 'none')
        .map(item => {
          const key = `${nameKey || item.dataKey || 'value'}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);

          return (
            <div
              key={item.value}
              className={cn(
                '[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3',
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
    </div>
  );
}

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string,
) {
  if (typeof payload !== 'object' || payload === null) {
    return undefined;
  }

  const payloadPayload =
    'payload' in payload &&
    typeof payload.payload === 'object' &&
    payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === 'string'
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string;
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};



================================================
FILE: src/components/ui/checkbox.tsx
================================================
'use client';

import * as React from 'react';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { CheckIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

/**
 * A styled checkbox component wrapping Radix's CheckboxPrimitive.Root with a centered check indicator.
 *
 * @param className - Additional CSS class names to merge with the component's default styling.
 * @returns The rendered checkbox element with built-in styles, state-based classes, and a centered check icon.
 */
function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        'peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',
        className,
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  );
}

export { Checkbox };



================================================
FILE: src/components/ui/collapsible.tsx
================================================
'use client';

import * as CollapsiblePrimitive from '@radix-ui/react-collapsible';

function Collapsible({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {
  return <CollapsiblePrimitive.Root data-slot="collapsible" {...props} />;
}

function CollapsibleTrigger({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {
  return (
    <CollapsiblePrimitive.CollapsibleTrigger
      data-slot="collapsible-trigger"
      {...props}
    />
  );
}

function CollapsibleContent({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {
  return (
    <CollapsiblePrimitive.CollapsibleContent
      data-slot="collapsible-content"
      {...props}
    />
  );
}

export { Collapsible, CollapsibleTrigger, CollapsibleContent };



================================================
FILE: src/components/ui/command.tsx
================================================
'use client';

import * as React from 'react';
import { Command as CommandPrimitive } from 'cmdk';
import { SearchIcon } from 'lucide-react';

import { cn } from '@/lib/utils';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        'bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md',
        className,
      )}
      {...props}
    />
  );
}

function CommandDialog({
  title = 'Command Palette',
  description = 'Search for a command to run...',
  children,
  className,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string;
  description?: string;
  className?: string;
  showCloseButton?: boolean;
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent
        className={cn('overflow-hidden p-0', className)}
        showCloseButton={showCloseButton}
      >
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          'placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50',
          className,
        )}
        {...props}
      />
    </div>
  );
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        'max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto',
        className,
      )}
      {...props}
    />
  );
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  );
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        'text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium',
        className,
      )}
      {...props}
    />
  );
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn('bg-border -mx-1 h-px', className)}
      {...props}
    />
  );
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        'text-muted-foreground ml-auto text-xs tracking-widest',
        className,
      )}
      {...props}
    />
  );
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};



================================================
FILE: src/components/ui/context-menu.tsx
================================================
'use client';

import * as React from 'react';
import * as ContextMenuPrimitive from '@radix-ui/react-context-menu';
import { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function ContextMenu({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {
  return <ContextMenuPrimitive.Root data-slot="context-menu" {...props} />;
}

function ContextMenuTrigger({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {
  return (
    <ContextMenuPrimitive.Trigger data-slot="context-menu-trigger" {...props} />
  );
}

function ContextMenuGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {
  return (
    <ContextMenuPrimitive.Group data-slot="context-menu-group" {...props} />
  );
}

function ContextMenuPortal({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {
  return (
    <ContextMenuPrimitive.Portal data-slot="context-menu-portal" {...props} />
  );
}

function ContextMenuSub({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {
  return <ContextMenuPrimitive.Sub data-slot="context-menu-sub" {...props} />;
}

function ContextMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {
  return (
    <ContextMenuPrimitive.RadioGroup
      data-slot="context-menu-radio-group"
      {...props}
    />
  );
}

/**
 * Renders a context menu sub-trigger with standardized styling, optional inset, and a trailing chevron.
 *
 * @param inset - When true, applies inset spacing (adds left padding).
 * @returns A ContextMenuPrimitive.SubTrigger element with data-slot="context-menu-sub-trigger", the composed className, rendered children, and a trailing chevron icon.
 */
function ContextMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {
  inset?: boolean;
}) {
  return (
    <ContextMenuPrimitive.SubTrigger
      data-slot="context-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto" />
    </ContextMenuPrimitive.SubTrigger>
  );
}

function ContextMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {
  return (
    <ContextMenuPrimitive.SubContent
      data-slot="context-menu-sub-content"
      className={cn(
        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',
        className,
      )}
      {...props}
    />
  );
}

function ContextMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {
  return (
    <ContextMenuPrimitive.Portal>
      <ContextMenuPrimitive.Content
        data-slot="context-menu-content"
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',
          className,
        )}
        {...props}
      />
    </ContextMenuPrimitive.Portal>
  );
}

function ContextMenuItem({
  className,
  inset,
  variant = 'default',
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {
  inset?: boolean;
  variant?: 'default' | 'destructive';
}) {
  return (
    <ContextMenuPrimitive.Item
      data-slot="context-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function ContextMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {
  return (
    <ContextMenuPrimitive.CheckboxItem
      data-slot="context-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.CheckboxItem>
  );
}

function ContextMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {
  return (
    <ContextMenuPrimitive.RadioItem
      data-slot="context-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.RadioItem>
  );
}

function ContextMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {
  inset?: boolean;
}) {
  return (
    <ContextMenuPrimitive.Label
      data-slot="context-menu-label"
      data-inset={inset}
      className={cn(
        'text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',
        className,
      )}
      {...props}
    />
  );
}

function ContextMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {
  return (
    <ContextMenuPrimitive.Separator
      data-slot="context-menu-separator"
      className={cn('bg-border -mx-1 my-1 h-px', className)}
      {...props}
    />
  );
}

function ContextMenuShortcut({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="context-menu-shortcut"
      className={cn(
        'text-muted-foreground ml-auto text-xs tracking-widest',
        className,
      )}
      {...props}
    />
  );
}

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};



================================================
FILE: src/components/ui/dialog.tsx
================================================
'use client';

import * as React from 'react';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { XIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50 data-[state=closed]:duration-200 data-[state=open]:duration-200',
        className,
      )}
      {...props}
    />
  );
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean;
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 data-[state=closed]:duration-200 data-[state=open]:duration-200 sm:max-w-lg',
          className,
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="dialog-header"
      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}
      {...props}
    />
  );
}

function DialogFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',
        className,
      )}
      {...props}
    />
  );
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn('text-lg leading-none font-semibold', className)}
      {...props}
    />
  );
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};



================================================
FILE: src/components/ui/drawer.tsx
================================================
'use client';

import * as React from 'react';
import { Drawer as DrawerPrimitive } from 'vaul';

import { cn } from '@/lib/utils';

function Drawer({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) {
  return <DrawerPrimitive.Root data-slot="drawer" {...props} />;
}

function DrawerTrigger({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {
  return <DrawerPrimitive.Trigger data-slot="drawer-trigger" {...props} />;
}

function DrawerPortal({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {
  return <DrawerPrimitive.Portal data-slot="drawer-portal" {...props} />;
}

function DrawerClose({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Close>) {
  return <DrawerPrimitive.Close data-slot="drawer-close" {...props} />;
}

function DrawerOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {
  return (
    <DrawerPrimitive.Overlay
      data-slot="drawer-overlay"
      className={cn(
        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',
        className,
      )}
      {...props}
    />
  );
}

function DrawerContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Content>) {
  return (
    <DrawerPortal data-slot="drawer-portal">
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          'group/drawer-content bg-background fixed z-50 flex h-auto flex-col',
          'data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b',
          'data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t',
          'data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm',
          'data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm',
          className,
        )}
        {...props}
      >
        <div className="bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  );
}

function DrawerHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="drawer-header"
      className={cn(
        'flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left',
        className,
      )}
      {...props}
    />
  );
}

function DrawerFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="drawer-footer"
      className={cn('mt-auto flex flex-col gap-2 p-4', className)}
      {...props}
    />
  );
}

function DrawerTitle({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Title>) {
  return (
    <DrawerPrimitive.Title
      data-slot="drawer-title"
      className={cn('text-foreground font-semibold', className)}
      {...props}
    />
  );
}

function DrawerDescription({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Description>) {
  return (
    <DrawerPrimitive.Description
      data-slot="drawer-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  );
}

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};



================================================
FILE: src/components/ui/dropdown-menu.tsx
================================================
'use client';

import * as React from 'react';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  );
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  );
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md data-[state=closed]:duration-200 data-[state=open]:duration-200',
          className,
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  );
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  );
}

/**
 * A styled dropdown menu item element that supports inset alignment and a destructive variant.
 *
 * Adds data attributes for tooling (`data-slot="dropdown-menu-item"`, `data-inset`, `data-variant`), merges user `className` with internal styles, and forwards remaining props to the underlying element.
 *
 * @param inset - If true, applies inset padding to align the item's content (e.g., when an indicator or icon is present).
 * @param variant - Visual variant; use `"destructive"` to apply destructive styling, otherwise `"default"`.
 * @returns The rendered dropdown menu item element.
 */
function DropdownMenuItem({
  className,
  inset,
  variant = 'default',
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean;
  variant?: 'default' | 'destructive';
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:[&_svg]:!text-destructive dark:data-[variant=destructive]:[&_svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none focus:bg-[var(--interactive-hover)] data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a styled dropdown menu checkbox item with a left-aligned check indicator.
 *
 * @returns A React element for a dropdown menu checkbox item that shows a check icon when selected.
 */
function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none focus:bg-[var(--interactive-hover)] data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  );
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  );
}

/**
 * Renders a styled radio item for a DropdownMenu with a left-aligned circular indicator.
 *
 * @returns A DropdownMenu radio item element containing an item indicator and the given children.
 */
function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none focus:bg-[var(--interactive-hover)] data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  );
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn('bg-border -mx-1 my-1 h-px', className)}
      {...props}
    />
  );
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        'text-muted-foreground ml-auto text-xs tracking-widest',
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  );
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg data-[state=closed]:duration-200 data-[state=open]:duration-200',
        className,
      )}
      {...props}
    />
  );
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
};



================================================
FILE: src/components/ui/empty.tsx
================================================
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

/**
 * Container for empty-state content.
 *
 * Renders a div element intended as an empty-state wrapper and applies any standard div props and provided `className`.
 *
 * @returns A div element serving as the empty-state container.
 */
function Empty({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="empty"
      className={cn(
        'flex min-w-0 flex-1 flex-col items-center justify-center gap-6 rounded-lg border-dashed p-6 text-center text-balance md:p-12',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a centered header container for empty-state content.
 *
 * @returns A div element with data-slot="empty-header" and merged class names for layout and alignment
 */
function EmptyHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="empty-header"
      className={cn(
        'flex max-w-sm flex-col items-center gap-2 text-center',
        className,
      )}
      {...props}
    />
  );
}

const emptyMediaVariants = cva(
  'flex shrink-0 items-center justify-center mb-2 [&_svg]:pointer-events-none [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        icon: "bg-muted text-foreground flex size-10 shrink-0 items-center justify-center rounded-lg [&_svg:not([class*='size-'])]:size-6",
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
);

/**
 * Renders the media/icon area for an empty state.
 *
 * @param className - Additional CSS classes appended to the component's root element
 * @param variant - Visual variant to apply; `'default'` produces a transparent background, `'icon'` applies the styled icon variant
 * @returns The div element used as the empty-state media container
 */
function EmptyMedia({
  className,
  variant = 'default',
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof emptyMediaVariants>) {
  return (
    <div
      data-slot="empty-icon"
      data-variant={variant}
      className={cn(emptyMediaVariants({ variant, className }))}
      {...props}
    />
  );
}

/**
 * Renders the title area for an empty state.
 *
 * @param props - Standard div props; `className` will be merged with default typography classes.
 * @returns A div element with `data-slot="empty-title"` and default title typography applied.
 */
function EmptyTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="empty-title"
      className={cn('text-lg font-medium tracking-tight', className)}
      {...props}
    />
  );
}

/**
 * Renders the description block used in empty-state layouts.
 *
 * Applies muted text styling, relaxed small text sizing, and underline/link hover styles to descendant anchors.
 *
 * @returns The rendered description element for empty states.
 */
function EmptyDescription({ className, ...props }: React.ComponentProps<'p'>) {
  return (
    <div
      data-slot="empty-description"
      className={cn(
        'text-muted-foreground [&>a:hover]:text-primary text-sm/relaxed [&>a]:underline [&>a]:underline-offset-4',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders the content area for an empty state.
 *
 * The element is a div with data-slot="empty-content" and default layout and typography classes;
 * any provided props (including `className`) are applied to the element.
 *
 * @returns A div element used as the empty-state content container with merged classes and forwarded props.
 */
function EmptyContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="empty-content"
      className={cn(
        'flex w-full max-w-sm min-w-0 flex-col items-center gap-4 text-sm text-balance',
        className,
      )}
      {...props}
    />
  );
}

export {
  Empty,
  EmptyHeader,
  EmptyTitle,
  EmptyDescription,
  EmptyContent,
  EmptyMedia,
};



================================================
FILE: src/components/ui/field.tsx
================================================
'use client';

import { useMemo } from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';

/**
 * Renders a fieldset container with a data-slot attribute and default layout classes.
 *
 * @returns A `fieldset` element with `data-slot="field-set"` and composed class names for column layout and gap rules
 */
function FieldSet({ className, ...props }: React.ComponentProps<'fieldset'>) {
  return (
    <fieldset
      data-slot="field-set"
      className={cn(
        'flex flex-col gap-6',
        'has-[>[data-slot=checkbox-group]]:gap-3 has-[>[data-slot=radio-group]]:gap-3',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a legend element with variant-aware styling and data attributes for slot-based composition.
 *
 * @param variant - Controls visual variant: `'legend'` applies base text size, `'label'` applies smaller text size; value is also set on the `data-variant` attribute
 * @returns A `legend` element with `data-slot="field-legend"`, `data-variant` set to `variant`, and classes that adjust typography and spacing
 */
function FieldLegend({
  className,
  variant = 'legend',
  ...props
}: React.ComponentProps<'legend'> & { variant?: 'legend' | 'label' }) {
  return (
    <legend
      data-slot="field-legend"
      data-variant={variant}
      className={cn(
        'mb-3 font-medium',
        'data-[variant=legend]:text-base',
        'data-[variant=label]:text-sm',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a div that groups related field sub-elements and exposes a styling hook via `data-slot="field-group"`.
 *
 * The element applies layout and spacing utility classes and merges any provided `className` and other div props.
 *
 * @returns A div element with `data-slot="field-group"` and composed class names for grouping, layout, and responsive gaps.
 */
function FieldGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="field-group"
      className={cn(
        'group/field-group @container/field-group flex w-full flex-col gap-7 data-[slot=checkbox-group]:gap-3 [&>[data-slot=field-group]]:gap-4',
        className,
      )}
      {...props}
    />
  );
}

const fieldVariants = cva(
  'group/field flex w-full gap-3 data-[invalid=true]:text-destructive',
  {
    variants: {
      orientation: {
        vertical: ['flex-col [&>*]:w-full [&>.sr-only]:w-auto'],
        horizontal: [
          'flex-row items-center',
          '[&>[data-slot=field-label]]:flex-auto',
          'has-[>[data-slot=field-content]]:items-start has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px',
        ],
        responsive: [
          'flex-col [&>*]:w-full [&>.sr-only]:w-auto @md/field-group:flex-row @md/field-group:items-center @md/field-group:[&>*]:w-auto',
          '@md/field-group:[&>[data-slot=field-label]]:flex-auto',
          '@md/field-group:has-[>[data-slot=field-content]]:items-start @md/field-group:has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px',
        ],
      },
    },
    defaultVariants: {
      orientation: 'vertical',
    },
  },
);

/**
 * Renders a field container that groups related form elements and applies orientation-aware styling.
 *
 * @param className - Additional class names merged with the component's generated classes.
 * @param orientation - Layout orientation: 'vertical' stacks content, 'horizontal' arranges content inline.
 * @returns A div with role="group", data-slot="field", a data-orientation attribute, and classes composed from the selected orientation and `className`.
 */
function Field({
  className,
  orientation = 'vertical',
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof fieldVariants>) {
  return (
    <div
      role="group"
      data-slot="field"
      data-orientation={orientation}
      className={cn(fieldVariants({ orientation }), className)}
      {...props}
    />
  );
}

/**
 * Renders a container element for field content with predefined layout and slot metadata.
 *
 * @returns A `div` element with `data-slot="field-content"`, utility classes for flexible vertical stacking and gap spacing, and any merged `className` and props.
 */
function FieldContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="field-content"
      className={cn(
        'group/field-content flex flex-1 flex-col gap-1.5 leading-snug',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a Label configured as a field label with slot metadata and composed styling hooks.
 *
 * @returns A Label element with `data-slot="field-label"` and a composed `className` that applies field-label layout, state, and group styling.
 */
function FieldLabel({
  className,
  ...props
}: React.ComponentProps<typeof Label>) {
  return (
    <Label
      data-slot="field-label"
      className={cn(
        'group/field-label peer/field-label flex w-fit gap-2 leading-snug group-data-[disabled=true]/field:opacity-50',
        'has-[>[data-slot=field]]:w-full has-[>[data-slot=field]]:flex-col has-[>[data-slot=field]]:rounded-md has-[>[data-slot=field]]:border [&>*]:data-[slot=field]:p-4',
        'has-data-[state=checked]:bg-primary/5 has-data-[state=checked]:border-primary dark:has-data-[state=checked]:bg-primary/10',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a compact title element scoped to a field label.
 *
 * @returns A div element with `data-slot="field-label"` and classes that align it inline, set typography and spacing, and reduce opacity when the field is disabled.
 */
function FieldTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="field-label"
      className={cn(
        'flex w-fit items-center gap-2 text-sm leading-snug font-medium group-data-[disabled=true]/field:opacity-50',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders the descriptive text for a field with the appropriate data-slot and styling.
 *
 * @returns A `p` element configured as the field description (`data-slot="field-description"`) with utility classes for typography, link styling, and orientation-aware layout.
 */
function FieldDescription({ className, ...props }: React.ComponentProps<'p'>) {
  return (
    <p
      data-slot="field-description"
      className={cn(
        'text-muted-foreground text-sm leading-normal font-normal group-has-[[data-orientation=horizontal]]/field:text-balance',
        'last:mt-0 nth-last-2:-mt-1 [[data-variant=legend]+&]:-mt-1.5',
        '[&>a:hover]:text-primary [&>a]:underline [&>a]:underline-offset-4',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a visual separator for a field with optional centered content.
 *
 * @param children - Optional content to display centered over the separator (renders inside a span with `data-slot="field-separator-content"`).
 * @param className - Additional CSS classes applied to the separator container.
 * @returns A `div` element containing an absolute-positioned `Separator` and, when `children` is provided, a centered content span.
 */
function FieldSeparator({
  children,
  className,
  ...props
}: React.ComponentProps<'div'> & {
  children?: React.ReactNode;
}) {
  return (
    <div
      data-slot="field-separator"
      data-content={!!children}
      className={cn(
        'relative -my-2 h-5 text-sm group-data-[variant=outline]/field-group:-mb-2',
        className,
      )}
      {...props}
    >
      <Separator className="absolute inset-0 top-1/2" />
      {children && (
        <span
          className="bg-background text-muted-foreground relative mx-auto block w-fit px-2"
          data-slot="field-separator-content"
        >
          {children}
        </span>
      )}
    </div>
  );
}

/**
 * Renders field-level error content and applies ARIA alert semantics.
 *
 * If `children` is provided it is used as the content. Otherwise `errors` is used:
 * a single error with a `message` renders that message; multiple errors render as a bulleted list of messages.
 *
 * @param errors - Optional array of error-like objects; each item may include a `message` string to display.
 * @returns A `div` element with `role="alert"` and `data-slot="field-error"` containing the computed error content, or `null` when there is no content to display.
 */
function FieldError({
  className,
  children,
  errors,
  ...props
}: React.ComponentProps<'div'> & {
  errors?: Array<{ message?: string } | undefined>;
}) {
  const content = useMemo(() => {
    if (children) {
      return children;
    }

    if (!errors) {
      return null;
    }

    if (errors?.length === 1 && errors[0]?.message) {
      return errors[0].message;
    }

    return (
      <ul className="ml-4 flex list-disc flex-col gap-1">
        {errors.map(
          (error, index) =>
            error?.message && <li key={index}>{error.message}</li>,
        )}
      </ul>
    );
  }, [children, errors]);

  if (!content) {
    return null;
  }

  return (
    <div
      role="alert"
      data-slot="field-error"
      className={cn('text-destructive text-sm font-normal', className)}
      {...props}
    >
      {content}
    </div>
  );
}

export {
  Field,
  FieldLabel,
  FieldDescription,
  FieldError,
  FieldGroup,
  FieldLegend,
  FieldSeparator,
  FieldSet,
  FieldContent,
  FieldTitle,
};



================================================
FILE: src/components/ui/form.tsx
================================================
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { Slot } from '@radix-ui/react-slot';
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from 'react-hook-form';

import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState } = useFormContext();
  const formState = useFormState({ name: fieldContext.name });
  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>');
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

function FormItem({ className, ...props }: React.ComponentProps<'div'>) {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn('grid gap-2', className)}
        {...props}
      />
    </FormItemContext.Provider>
  );
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField();

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn('data-[error=true]:text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  );
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
}

function FormDescription({ className, ...props }: React.ComponentProps<'p'>) {
  const { formDescriptionId } = useFormField();

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  );
}

function FormMessage({ className, ...props }: React.ComponentProps<'p'>) {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message ?? '') : props.children;

  if (!body) {
    return null;
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn('text-destructive text-sm', className)}
      {...props}
    >
      {body}
    </p>
  );
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};



================================================
FILE: src/components/ui/hover-card.tsx
================================================
'use client';

import * as React from 'react';
import * as HoverCardPrimitive from '@radix-ui/react-hover-card';

import { cn } from '@/lib/utils';

function HoverCard({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {
  return <HoverCardPrimitive.Root data-slot="hover-card" {...props} />;
}

function HoverCardTrigger({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {
  return (
    <HoverCardPrimitive.Trigger data-slot="hover-card-trigger" {...props} />
  );
}

function HoverCardContent({
  className,
  align = 'center',
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {
  return (
    <HoverCardPrimitive.Portal data-slot="hover-card-portal">
      <HoverCardPrimitive.Content
        data-slot="hover-card-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',
          className,
        )}
        {...props}
      />
    </HoverCardPrimitive.Portal>
  );
}

export { HoverCard, HoverCardTrigger, HoverCardContent };



================================================
FILE: src/components/ui/infinite-slider.tsx
================================================
'use client';
import { cn } from '@/lib/utils';
import { useMotionValue, animate, motion } from 'motion/react';
import { useState, useEffect } from 'react';
import useMeasure from 'react-use-measure';

export type InfiniteSliderProps = {
  children: React.ReactNode;
  gap?: number;
  speed?: number;
  speedOnHover?: number;
  direction?: 'horizontal' | 'vertical';
  reverse?: boolean;
  className?: string;
};

export function InfiniteSlider({
  children,
  gap = 16,
  speed = 100,
  speedOnHover,
  direction = 'horizontal',
  reverse = false,
  className,
}: InfiniteSliderProps) {
  const [currentSpeed, setCurrentSpeed] = useState(speed);
  const [ref, { width, height }] = useMeasure();
  const translation = useMotionValue(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [key, setKey] = useState(0);

  useEffect(() => {
    let controls;
    const size = direction === 'horizontal' ? width : height;
    const contentSize = size + gap;
    const from = reverse ? -contentSize / 2 : 0;
    const to = reverse ? 0 : -contentSize / 2;

    const distanceToTravel = Math.abs(to - from);
    const duration = distanceToTravel / currentSpeed;

    if (isTransitioning) {
      const remainingDistance = Math.abs(translation.get() - to);
      const transitionDuration = remainingDistance / currentSpeed;

      controls = animate(translation, [translation.get(), to], {
        ease: 'linear',
        duration: transitionDuration,
        onComplete: () => {
          setIsTransitioning(false);
          setKey(prevKey => prevKey + 1);
        },
      });
    } else {
      controls = animate(translation, [from, to], {
        ease: 'linear',
        duration: duration,
        repeat: Infinity,
        repeatType: 'loop',
        repeatDelay: 0,
        onRepeat: () => {
          translation.set(from);
        },
      });
    }

    return controls?.stop;
  }, [
    key,
    translation,
    currentSpeed,
    width,
    height,
    gap,
    isTransitioning,
    direction,
    reverse,
  ]);

  const hoverProps = speedOnHover
    ? {
        onHoverStart: () => {
          setIsTransitioning(true);
          setCurrentSpeed(speedOnHover);
        },
        onHoverEnd: () => {
          setIsTransitioning(true);
          setCurrentSpeed(speed);
        },
      }
    : {};

  return (
    <div className={cn('overflow-hidden', className)}>
      <motion.div
        className="flex w-max"
        style={{
          ...(direction === 'horizontal'
            ? { x: translation }
            : { y: translation }),
          gap: `${gap}px`,
          flexDirection: direction === 'horizontal' ? 'row' : 'column',
        }}
        ref={ref}
        {...hoverProps}
      >
        {children}
        {children}
      </motion.div>
    </div>
  );
}



================================================
FILE: src/components/ui/input-group.tsx
================================================
'use client';

import * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';

/**
 * Renders a container element that groups input controls and optional addons with consistent layout, alignment-aware spacing, and built-in focus/error styling.
 *
 * Forwards all provided div props (including event handlers and attributes) to the underlying div.
 *
 * @returns A div element representing the input group container
 */
function InputGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="input-group"
      role="group"
      className={cn(
        'group/input-group border-input dark:bg-input/30 relative flex w-full items-center rounded-md border shadow-xs transition-[color,box-shadow] outline-none',
        'h-9 has-[>textarea]:h-auto',

        // Variants based on alignment.
        'has-[>[data-align=inline-start]]:[&>input]:pl-2',
        'has-[>[data-align=inline-end]]:[&>input]:pr-2',
        'has-[>[data-align=block-start]]:h-auto has-[>[data-align=block-start]]:flex-col has-[>[data-align=block-start]]:[&>input]:pb-3',
        'has-[>[data-align=block-end]]:h-auto has-[>[data-align=block-end]]:flex-col has-[>[data-align=block-end]]:[&>input]:pt-3',

        // Focus state.
        'has-[[data-slot=input-group-control]:focus-visible]:border-ring has-[[data-slot=input-group-control]:focus-visible]:ring-ring/50 has-[[data-slot=input-group-control]:focus-visible]:ring-[3px]',

        // Error state.
        'has-[[data-slot][aria-invalid=true]]:ring-destructive/20 has-[[data-slot][aria-invalid=true]]:border-destructive dark:has-[[data-slot][aria-invalid=true]]:ring-destructive/40',

        className,
      )}
      {...props}
    />
  );
}

const inputGroupAddonVariants = cva(
  "text-muted-foreground flex h-auto cursor-text items-center justify-center gap-2 py-1.5 text-sm font-medium select-none [&>svg:not([class*='size-'])]:size-4 [&>kbd]:rounded-[calc(var(--radius)-5px)] group-data-[disabled=true]/input-group:opacity-50",
  {
    variants: {
      align: {
        'inline-start':
          'order-first pl-3 has-[>button]:ml-[-0.45rem] has-[>kbd]:ml-[-0.35rem]',
        'inline-end':
          'order-last pr-3 has-[>button]:mr-[-0.45rem] has-[>kbd]:mr-[-0.35rem]',
        'block-start':
          'order-first w-full justify-start px-3 pt-3 [.border-b]:pb-3 group-has-[>input]/input-group:pt-2.5',
        'block-end':
          'order-last w-full justify-start px-3 pb-3 [.border-t]:pt-3 group-has-[>input]/input-group:pb-2.5',
      },
    },
    defaultVariants: {
      align: 'inline-start',
    },
  },
);

/**
 * Renders an addon element for an input group that visually attaches to the group and can focus the group's input.
 *
 * Clicking the addon (except when the click target is a descendant `button`) moves focus to the nearest `input` inside the same parent.
 *
 * @param align - Position of the addon within the group; one of `"inline-start"`, `"inline-end"`, `"block-start"`, or `"block-end"`. Defaults to `"inline-start"`.
 * @returns The addon `div` element to place inside an `InputGroup`.
 */
function InputGroupAddon({
  className,
  align = 'inline-start',
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof inputGroupAddonVariants>) {
  return (
    <div
      role="group"
      data-slot="input-group-addon"
      data-align={align}
      className={cn(inputGroupAddonVariants({ align }), className)}
      onClick={e => {
        if ((e.target as HTMLElement).closest('button')) {
          return;
        }
        e.currentTarget.parentElement?.querySelector('input')?.focus();
      }}
      {...props}
    />
  );
}

const inputGroupButtonVariants = cva(
  'text-sm shadow-none flex gap-2 items-center',
  {
    variants: {
      size: {
        xs: "h-6 gap-1 px-2 rounded-[calc(var(--radius)-5px)] [&>svg:not([class*='size-'])]:size-3.5 has-[>svg]:px-2",
        sm: 'h-8 px-2.5 gap-1.5 rounded-md has-[>svg]:px-2.5',
        'icon-xs':
          'size-6 rounded-[calc(var(--radius)-5px)] p-0 has-[>svg]:p-0',
        'icon-sm': 'size-8 p-0 has-[>svg]:p-0',
      },
    },
    defaultVariants: {
      size: 'xs',
    },
  },
);

/**
 * Render a Button styled for placement inside an input group.
 *
 * @param type - HTML button `type` attribute; defaults to `'button'`.
 * @param variant - Visual variant passed to the underlying Button.
 * @param size - Size variant controlling padding, height, and icon sizing for the group button.
 * @returns The Button element configured for use within an input group.
 */
function InputGroupButton({
  className,
  type = 'button',
  variant = 'ghost',
  size = 'xs',
  ...props
}: Omit<React.ComponentProps<typeof Button>, 'size'> &
  VariantProps<typeof inputGroupButtonVariants>) {
  return (
    <Button
      type={type}
      data-size={size}
      variant={variant}
      className={cn(inputGroupButtonVariants({ size }), className)}
      {...props}
    />
  );
}

/**
 * Renders inline text or icon content for an input group with consistent muted styling and spacing.
 *
 * The element prevents pointer events on nested SVGs and ensures default SVG sizing unless a size class is present.
 */
function InputGroupText({ className, ...props }: React.ComponentProps<'span'>) {
  return (
    <span
      className={cn(
        "text-muted-foreground flex items-center gap-2 text-sm [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders an Input configured to be the primary control inside an InputGroup.
 *
 * Renders an underlying Input with group-specific attributes and base styling, merges any provided `className`, and forwards remaining props to the Input.
 *
 * @returns The configured Input element for use as the input-group control
 */
function InputGroupInput({
  className,
  ...props
}: React.ComponentProps<'input'>) {
  return (
    <Input
      data-slot="input-group-control"
      className={cn(
        'flex-1 rounded-none border-0 bg-transparent shadow-none focus-visible:ring-0 dark:bg-transparent',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a textarea configured to act as the control within an input group.
 *
 * @param className - Additional CSS classes to apply to the underlying textarea
 * @param props - Native textarea props forwarded to the underlying component
 * @returns A Textarea element with input-group control styling and forwarded props
 */
function InputGroupTextarea({
  className,
  ...props
}: React.ComponentProps<'textarea'>) {
  return (
    <Textarea
      data-slot="input-group-control"
      className={cn(
        'flex-1 resize-none rounded-none border-0 bg-transparent py-3 shadow-none focus-visible:ring-0 dark:bg-transparent',
        className,
      )}
      {...props}
    />
  );
}

export {
  InputGroup,
  InputGroupAddon,
  InputGroupButton,
  InputGroupText,
  InputGroupInput,
  InputGroupTextarea,
};



================================================
FILE: src/components/ui/input-otp.tsx
================================================
'use client';

import * as React from 'react';
import { OTPInput, OTPInputContext } from 'input-otp';
import { MinusIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function InputOTP({
  className,
  containerClassName,
  ...props
}: React.ComponentProps<typeof OTPInput> & {
  containerClassName?: string;
}) {
  return (
    <OTPInput
      data-slot="input-otp"
      containerClassName={cn(
        'flex items-center gap-2 has-disabled:opacity-50',
        containerClassName,
      )}
      className={cn('disabled:cursor-not-allowed', className)}
      {...props}
    />
  );
}

function InputOTPGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="input-otp-group"
      className={cn('flex items-center', className)}
      {...props}
    />
  );
}

function InputOTPSlot({
  index,
  className,
  ...props
}: React.ComponentProps<'div'> & {
  index: number;
}) {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {};

  return (
    <div
      data-slot="input-otp-slot"
      data-active={isActive}
      className={cn(
        'data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]',
        className,
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink bg-foreground h-4 w-px duration-1000" />
        </div>
      )}
    </div>
  );
}

function InputOTPSeparator({ ...props }: React.ComponentProps<'div'>) {
  return (
    <div data-slot="input-otp-separator" role="separator" {...props}>
      <MinusIcon />
    </div>
  );
}

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };



================================================
FILE: src/components/ui/input.tsx
================================================
import * as React from 'react';

import { cn } from '@/lib/utils';

/**
 * Render a themed, accessible input element with composable utility-class styling and prop passthrough.
 *
 * @param className - Additional CSS classes to append to the component's default class list
 * @param type - The input's `type` attribute (e.g., "text", "email", "password")
 * @param props - Additional native input props to forward to the underlying `<input>` (e.g., `placeholder`, `value`, `onChange`)
 * @returns A styled `<input>` element with built-in focus, invalid, disabled, and responsive styles
 */
function Input({ className, type, ...props }: React.ComponentProps<'input'>) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] duration-200 outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
        'focus-visible:border-[var(--input-focus)] focus-visible:ring-[3px] focus-visible:ring-[var(--input-focus)]/50',
        'aria-invalid:border-[var(--input-error)] aria-invalid:ring-[var(--input-error)]/20 dark:aria-invalid:ring-[var(--input-error)]/40',
        'hover:border-[var(--input-hover)]',
        className,
      )}
      {...props}
    />
  );
}

export { Input };



================================================
FILE: src/components/ui/item.tsx
================================================
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';
import { Separator } from '@/components/ui/separator';

/**
 * Renders a vertical list wrapper for grouping item rows.
 *
 * @returns A `div` element with `role="list"`, `data-slot="item-group"`, applied group layout classes, and any forwarded props.
 */
function ItemGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      role="list"
      data-slot="item-group"
      className={cn('group/item-group flex flex-col', className)}
      {...props}
    />
  );
}

/**
 * Render a horizontal item separator with standardized slot and spacing.
 *
 * @param className - Additional CSS class names appended to the default spacing.
 * @returns The Separator element with `data-slot="item-separator"`, horizontal orientation, and merged classes.
 */
function ItemSeparator({
  className,
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="item-separator"
      orientation="horizontal"
      className={cn('my-0', className)}
      {...props}
    />
  );
}

const itemVariants = cva(
  'group/item flex items-center border border-transparent text-sm rounded-md transition-colors [a]:hover:bg-accent/50 [a]:transition-colors duration-100 flex-wrap outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        outline: 'border-border',
        muted: 'bg-muted/50',
      },
      size: {
        default: 'p-4 gap-4 ',
        sm: 'py-3 px-4 gap-2.5',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
);

/**
 * Renders an item container with configurable visual `variant` and `size`.
 *
 * The component applies styling and data attributes for composition and forwards any other props to the rendered element.
 *
 * @param className - Additional CSS classes to apply to the root element
 * @param variant - Visual variant to apply (`default`, `outline`, or `muted`)
 * @param size - Size variant to apply (`default` or `sm`)
 * @param asChild - When `true`, render the provided child element instead of a `div`
 * @returns The rendered item element (a `div` or the provided child) with variant/size styling and composition attributes
 */
function Item({
  className,
  variant = 'default',
  size = 'default',
  asChild = false,
  ...props
}: React.ComponentProps<'div'> &
  VariantProps<typeof itemVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'div';
  return (
    <Comp
      data-slot="item"
      data-variant={variant}
      data-size={size}
      className={cn(itemVariants({ variant, size, className }))}
      {...props}
    />
  );
}

const itemMediaVariants = cva(
  'flex shrink-0 items-center justify-center gap-2 group-has-[[data-slot=item-description]]/item:self-start [&_svg]:pointer-events-none group-has-[[data-slot=item-description]]/item:translate-y-0.5',
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        icon: "size-8 border rounded-sm bg-muted [&_svg:not([class*='size-'])]:size-4",
        image:
          'size-10 rounded-sm overflow-hidden [&_img]:size-full [&_img]:object-cover',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
);

/**
 * Renders a media container for an item with selectable visual variants.
 *
 * @param variant - Visual style of the media. `"default"` applies no special styling, `"icon"` styles the container for icon-sized SVGs, and `"image"` styles the container for image content (sizing and cover behavior).
 * @returns A div element with `data-slot="item-media"` and `data-variant` set to `variant`, styled according to the selected variant and merged `className`.
 */
function ItemMedia({
  className,
  variant = 'default',
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof itemMediaVariants>) {
  return (
    <div
      data-slot="item-media"
      data-variant={variant}
      className={cn(itemMediaVariants({ variant, className }))}
      {...props}
    />
  );
}

/**
 * Renders a content container for an item with layout-related classes and a `data-slot="item-content"` marker.
 *
 * @returns A `div` element that serves as the item's main content area, applying flex layout, gap spacing, and any supplied `className` or other div props.
 */
function ItemContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="item-content"
      className={cn(
        'flex flex-1 flex-col gap-1 [&+[data-slot=item-content]]:flex-none',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders the item's title slot with typography and layout classes.
 *
 * @returns A `div` element for the item title slot with the applied className and forwarded props.
 */
function ItemTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="item-title"
      className={cn(
        'flex w-fit items-center gap-2 text-sm leading-snug font-medium',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a paragraph used for an item's description with clamped lines and link styling.
 *
 * The element includes default typography, a two-line clamp, balanced text flow, and anchor styles; any provided `className` is merged with these defaults and all other props are forwarded to the underlying `p` element.
 *
 * @param className - Additional class names to merge with the component's default styles
 * @returns A `p` element with item description styling and forwarded props
 */
function ItemDescription({ className, ...props }: React.ComponentProps<'p'>) {
  return (
    <p
      data-slot="item-description"
      className={cn(
        'text-muted-foreground line-clamp-2 text-sm leading-normal font-normal text-balance',
        '[&>a:hover]:text-primary [&>a]:underline [&>a]:underline-offset-4',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a right-aligned horizontal container for action controls within an item.
 *
 * @param className - Additional class names appended to the default "flex items-center gap-2" classes.
 * @param props - Remaining props are forwarded to the underlying `div` element.
 * @returns A `div` element that groups item action controls with consistent spacing and alignment.
 */
function ItemActions({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="item-actions"
      className={cn('flex items-center gap-2', className)}
      {...props}
    />
  );
}

/**
 * Renders a header container for an item row with horizontal layout and spacing.
 *
 * @returns A `div` element marked with `data-slot="item-header"` that applies header layout classes and forwards any additional props.
 */
function ItemHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="item-header"
      className={cn(
        'flex basis-full items-center justify-between gap-2',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders the footer region for an item row.
 *
 * The element is a container styled for horizontal layout, spacing, and alignment and forwards any native div props.
 *
 * @returns A `div` element with `data-slot="item-footer"` and classes for flex layout, full basis, centered alignment, space-between justification, and gap.
 */
function ItemFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="item-footer"
      className={cn(
        'flex basis-full items-center justify-between gap-2',
        className,
      )}
      {...props}
    />
  );
}

export {
  Item,
  ItemMedia,
  ItemContent,
  ItemActions,
  ItemGroup,
  ItemSeparator,
  ItemTitle,
  ItemDescription,
  ItemHeader,
  ItemFooter,
};



================================================
FILE: src/components/ui/kbd.tsx
================================================
import { cn } from '@/lib/utils';

/**
 * Renders a styled keyboard key element for inline display of keyboard input.
 *
 * @returns A `<kbd>` element with keyboard styling and any provided props forwarded to the underlying element.
 */
function Kbd({ className, ...props }: React.ComponentProps<'kbd'>) {
  return (
    <kbd
      data-slot="kbd"
      className={cn(
        'bg-muted text-muted-foreground pointer-events-none inline-flex h-5 w-fit min-w-5 items-center justify-center gap-1 rounded-sm px-1 font-sans text-xs font-medium select-none',
        "[&_svg:not([class*='size-'])]:size-3",
        '[[data-slot=tooltip-content]_&]:bg-background/20 [[data-slot=tooltip-content]_&]:text-background dark:[[data-slot=tooltip-content]_&]:bg-background/10',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Renders a styled container for grouping keyboard key elements.
 *
 * @returns A `<kbd>` element styled as an inline-flex container for grouped keys
 */
function KbdGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <kbd
      data-slot="kbd-group"
      className={cn('inline-flex items-center gap-1', className)}
      {...props}
    />
  );
}

export { Kbd, KbdGroup };



================================================
FILE: src/components/ui/label.tsx
================================================
'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';

import { cn } from '@/lib/utils';

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',
        className,
      )}
      {...props}
    />
  );
}

export { Label };



================================================
FILE: src/components/ui/menubar.tsx
================================================
'use client';

import * as React from 'react';
import * as MenubarPrimitive from '@radix-ui/react-menubar';
import { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function Menubar({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Root>) {
  return (
    <MenubarPrimitive.Root
      data-slot="menubar"
      className={cn(
        'bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs',
        className,
      )}
      {...props}
    />
  );
}

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu data-slot="menubar-menu" {...props} />;
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group data-slot="menubar-group" {...props} />;
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal data-slot="menubar-portal" {...props} />;
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return (
    <MenubarPrimitive.RadioGroup data-slot="menubar-radio-group" {...props} />
  );
}

function MenubarTrigger({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {
  return (
    <MenubarPrimitive.Trigger
      data-slot="menubar-trigger"
      className={cn(
        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none',
        className,
      )}
      {...props}
    />
  );
}

function MenubarContent({
  className,
  align = 'start',
  alignOffset = -4,
  sideOffset = 8,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Content>) {
  return (
    <MenubarPortal>
      <MenubarPrimitive.Content
        data-slot="menubar-content"
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md',
          className,
        )}
        {...props}
      />
    </MenubarPortal>
  );
}

function MenubarItem({
  className,
  inset,
  variant = 'default',
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Item> & {
  inset?: boolean;
  variant?: 'default' | 'destructive';
}) {
  return (
    <MenubarPrimitive.Item
      data-slot="menubar-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function MenubarCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {
  return (
    <MenubarPrimitive.CheckboxItem
      data-slot="menubar-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.CheckboxItem>
  );
}

function MenubarRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {
  return (
    <MenubarPrimitive.RadioItem
      data-slot="menubar-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.RadioItem>
  );
}

function MenubarLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Label> & {
  inset?: boolean;
}) {
  return (
    <MenubarPrimitive.Label
      data-slot="menubar-label"
      data-inset={inset}
      className={cn(
        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',
        className,
      )}
      {...props}
    />
  );
}

function MenubarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {
  return (
    <MenubarPrimitive.Separator
      data-slot="menubar-separator"
      className={cn('bg-border -mx-1 my-1 h-px', className)}
      {...props}
    />
  );
}

function MenubarShortcut({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="menubar-shortcut"
      className={cn(
        'text-muted-foreground ml-auto text-xs tracking-widest',
        className,
      )}
      {...props}
    />
  );
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />;
}

function MenubarSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {
  inset?: boolean;
}) {
  return (
    <MenubarPrimitive.SubTrigger
      data-slot="menubar-sub-trigger"
      data-inset={inset}
      className={cn(
        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8',
        className,
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto h-4 w-4" />
    </MenubarPrimitive.SubTrigger>
  );
}

function MenubarSubContent({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {
  return (
    <MenubarPrimitive.SubContent
      data-slot="menubar-sub-content"
      className={cn(
        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',
        className,
      )}
      {...props}
    />
  );
}

export {
  Menubar,
  MenubarPortal,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarGroup,
  MenubarSeparator,
  MenubarLabel,
  MenubarItem,
  MenubarShortcut,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarSub,
  MenubarSubTrigger,
  MenubarSubContent,
};



================================================
FILE: src/components/ui/modetoggle.tsx
================================================
'use client';

import * as React from 'react';
import { Moon, Sun } from 'lucide-react';
import { useTheme } from 'next-themes';

import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

export function ModeToggle() {
  const { setTheme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme('light')}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}



================================================
FILE: src/components/ui/navigation-menu.tsx
================================================
import * as React from 'react';
import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu';
import { cva } from 'class-variance-authority';
import { ChevronDownIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function NavigationMenu({
  className,
  children,
  viewport = true,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {
  viewport?: boolean;
}) {
  return (
    <NavigationMenuPrimitive.Root
      data-slot="navigation-menu"
      data-viewport={viewport}
      className={cn(
        'group/navigation-menu relative flex max-w-max flex-1 items-center justify-center',
        className,
      )}
      {...props}
    >
      {children}
      {viewport && <NavigationMenuViewport />}
    </NavigationMenuPrimitive.Root>
  );
}

function NavigationMenuList({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {
  return (
    <NavigationMenuPrimitive.List
      data-slot="navigation-menu-list"
      className={cn(
        'group flex flex-1 list-none items-center justify-center gap-1',
        className,
      )}
      {...props}
    />
  );
}

function NavigationMenuItem({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {
  return (
    <NavigationMenuPrimitive.Item
      data-slot="navigation-menu-item"
      className={cn('relative', className)}
      {...props}
    />
  );
}

const navigationMenuTriggerStyle = cva(
  'group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1',
);

function NavigationMenuTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {
  return (
    <NavigationMenuPrimitive.Trigger
      data-slot="navigation-menu-trigger"
      className={cn(navigationMenuTriggerStyle(), 'group', className)}
      {...props}
    >
      {children}{' '}
      <ChevronDownIcon
        className="relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180"
        aria-hidden="true"
      />
    </NavigationMenuPrimitive.Trigger>
  );
}

function NavigationMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {
  return (
    <NavigationMenuPrimitive.Content
      data-slot="navigation-menu-content"
      className={cn(
        'data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto',
        'group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none',
        className,
      )}
      {...props}
    />
  );
}

function NavigationMenuViewport({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {
  return (
    <div
      className={cn(
        'absolute top-full left-0 isolate z-50 flex justify-center',
      )}
    >
      <NavigationMenuPrimitive.Viewport
        data-slot="navigation-menu-viewport"
        className={cn(
          'origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]',
          className,
        )}
        {...props}
      />
    </div>
  );
}

function NavigationMenuLink({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {
  return (
    <NavigationMenuPrimitive.Link
      data-slot="navigation-menu-link"
      className={cn(
        "data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function NavigationMenuIndicator({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {
  return (
    <NavigationMenuPrimitive.Indicator
      data-slot="navigation-menu-indicator"
      className={cn(
        'data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden',
        className,
      )}
      {...props}
    >
      <div className="bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" />
    </NavigationMenuPrimitive.Indicator>
  );
}

export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
  navigationMenuTriggerStyle,
};



================================================
FILE: src/components/ui/pagination.tsx
================================================
import * as React from 'react';
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from 'lucide-react';

import { cn } from '@/lib/utils';
import { Button, buttonVariants } from '@/components/ui/button';

function Pagination({ className, ...props }: React.ComponentProps<'nav'>) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn('mx-auto flex w-full justify-center', className)}
      {...props}
    />
  );
}

function PaginationContent({
  className,
  ...props
}: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn('flex flex-row items-center gap-1', className)}
      {...props}
    />
  );
}

function PaginationItem({ ...props }: React.ComponentProps<'li'>) {
  return <li data-slot="pagination-item" {...props} />;
}

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<React.ComponentProps<typeof Button>, 'size'> &
  React.ComponentProps<'a'>;

function PaginationLink({
  className,
  isActive,
  size = 'icon',
  ...props
}: PaginationLinkProps) {
  return (
    <a
      aria-current={isActive ? 'page' : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(
        buttonVariants({
          variant: isActive ? 'outline' : 'ghost',
          size,
        }),
        className,
      )}
      {...props}
    />
  );
}

function PaginationPrevious({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn('gap-1 px-2.5 sm:pl-2.5', className)}
      {...props}
    >
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  );
}

function PaginationNext({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn('gap-1 px-2.5 sm:pr-2.5', className)}
      {...props}
    >
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  );
}

function PaginationEllipsis({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn('flex size-9 items-center justify-center', className)}
      {...props}
    >
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  );
}

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
};



================================================
FILE: src/components/ui/popover.tsx
================================================
'use client';

import * as React from 'react';
import * as PopoverPrimitive from '@radix-ui/react-popover';

import { cn } from '@/lib/utils';

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />;
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />;
}

function PopoverContent({
  className,
  align = 'center',
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden data-[state=closed]:duration-200 data-[state=open]:duration-200',
          className,
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  );
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />;
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };



================================================
FILE: src/components/ui/progress.tsx
================================================
'use client';

import * as React from 'react';
import * as ProgressPrimitive from '@radix-ui/react-progress';

import { cn } from '@/lib/utils';

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        'bg-primary/20 relative h-2 w-full overflow-hidden rounded-full',
        className,
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  );
}

export { Progress };



================================================
FILE: src/components/ui/progressive-blur.tsx
================================================
'use client';
import { cn } from '@/lib/utils';
import { HTMLMotionProps, motion } from 'motion/react';

export const GRADIENT_ANGLES = {
  top: 0,
  right: 90,
  bottom: 180,
  left: 270,
};

export type ProgressiveBlurProps = {
  direction?: keyof typeof GRADIENT_ANGLES;
  blurLayers?: number;
  className?: string;
  blurIntensity?: number;
} & HTMLMotionProps<'div'>;

export function ProgressiveBlur({
  direction = 'bottom',
  blurLayers = 8,
  className,
  blurIntensity = 0.25,
  ...props
}: ProgressiveBlurProps) {
  const layers = Math.max(blurLayers, 2);
  const segmentSize = 1 / (blurLayers + 1);

  return (
    <div className={cn('relative', className)}>
      {Array.from({ length: layers }).map((_, index) => {
        const angle = GRADIENT_ANGLES[direction];
        const gradientStops = [
          index * segmentSize,
          (index + 1) * segmentSize,
          (index + 2) * segmentSize,
          (index + 3) * segmentSize,
        ].map(
          (pos, posIndex) =>
            `rgba(255, 255, 255, ${posIndex === 1 || posIndex === 2 ? 1 : 0}) ${pos * 100}%`,
        );

        const gradient = `linear-gradient(${angle}deg, ${gradientStops.join(
          ', ',
        )})`;

        return (
          <motion.div
            key={index}
            className="pointer-events-none absolute inset-0 rounded-[inherit]"
            style={{
              maskImage: gradient,
              WebkitMaskImage: gradient,
              backdropFilter: `blur(${index * blurIntensity}px)`,
              WebkitBackdropFilter: `blur(${index * blurIntensity}px)`,
            }}
            {...props}
          />
        );
      })}
    </div>
  );
}



================================================
FILE: src/components/ui/radio-group.tsx
================================================
'use client';

import * as React from 'react';
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
import { CircleIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn('grid gap-3', className)}
      {...props}
    />
  );
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        'border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',
        className,
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
}

export { RadioGroup, RadioGroupItem };



================================================
FILE: src/components/ui/resizable.tsx
================================================
'use client';

import * as React from 'react';
import { GripVerticalIcon } from 'lucide-react';
import * as ResizablePrimitive from 'react-resizable-panels';

import { cn } from '@/lib/utils';

function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',
        className,
      )}
      {...props}
    />
  );
}

function ResizablePanel({
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />;
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        'bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90',
        className,
      )}
      {...props}
    >
      {withHandle && (
        <div className="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  );
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };



================================================
FILE: src/components/ui/scroll-area.tsx
================================================
'use client';

import * as React from 'react';
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';

import { cn } from '@/lib/utils';

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn('relative', className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  );
}

function ScrollBar({
  className,
  orientation = 'vertical',
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        'flex touch-none p-px transition-colors select-none',
        orientation === 'vertical' &&
          'h-full w-2.5 border-l border-l-transparent',
        orientation === 'horizontal' &&
          'h-2.5 flex-col border-t border-t-transparent',
        className,
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  );
}

export { ScrollArea, ScrollBar };



================================================
FILE: src/components/ui/select.tsx
================================================
'use client';

import * as React from 'react';
import * as SelectPrimitive from '@radix-ui/react-select';
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = 'default',
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: 'sm' | 'default';
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = 'popper',
  align = 'center',
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md data-[state=closed]:duration-200 data-[state=open]:duration-200',
          position === 'popper' &&
            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
          className,
        )}
        position={position}
        align={align}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            'p-1',
            position === 'popper' &&
              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1',
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}
      {...props}
    />
  );
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className,
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}
      {...props}
    />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        'flex cursor-default items-center justify-center py-1',
        className,
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        'flex cursor-default items-center justify-center py-1',
        className,
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
};



================================================
FILE: src/components/ui/separator.tsx
================================================
'use client';

import * as React from 'react';
import * as SeparatorPrimitive from '@radix-ui/react-separator';

import { cn } from '@/lib/utils';

function Separator({
  className,
  orientation = 'horizontal',
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',
        className,
      )}
      {...props}
    />
  );
}

export { Separator };



================================================
FILE: src/components/ui/sheet.tsx
================================================
'use client';

import * as React from 'react';
import * as SheetPrimitive from '@radix-ui/react-dialog';
import { XIcon } from 'lucide-react';

import { cn } from '@/lib/utils';

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />;
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />;
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />;
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />;
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',
        className,
      )}
      {...props}
    />
  );
}

function SheetContent({
  className,
  children,
  side = 'right',
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: 'top' | 'right' | 'bottom' | 'left';
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
          side === 'right' &&
            'data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm',
          side === 'left' &&
            'data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm',
          side === 'top' &&
            'data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b',
          side === 'bottom' &&
            'data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t',
          className,
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  );
}

function SheetHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sheet-header"
      className={cn('flex flex-col gap-1.5 p-4', className)}
      {...props}
    />
  );
}

function SheetFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn('mt-auto flex flex-col gap-2 p-4', className)}
      {...props}
    />
  );
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn('text-foreground font-semibold', className)}
      {...props}
    />
  );
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  );
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};



================================================
FILE: src/components/ui/sidebar.tsx
================================================
'use client';

import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, VariantProps } from 'class-variance-authority';
import { PanelLeftIcon } from 'lucide-react';

import { useIsMobile } from '@/hooks/use-mobile';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from '@/components/ui/sheet';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';

const SIDEBAR_COOKIE_NAME = 'sidebar_state';
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = '16rem';
const SIDEBAR_WIDTH_MOBILE = '18rem';
const SIDEBAR_WIDTH_ICON = '3rem';
const SIDEBAR_KEYBOARD_SHORTCUT = 'b';

type SidebarContextProps = {
  state: 'expanded' | 'collapsed';
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContextProps | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error('useSidebar must be used within a SidebarProvider.');
  }

  return context;
}

function SidebarProvider({
  defaultOpen = true,
  open: openProp,
  onOpenChange: setOpenProp,
  className,
  style,
  children,
  ...props
}: React.ComponentProps<'div'> & {
  defaultOpen?: boolean;
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
}) {
  const isMobile = useIsMobile();
  const [openMobile, setOpenMobile] = React.useState(false);

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen);
  const open = openProp ?? _open;
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === 'function' ? value(open) : value;
      if (setOpenProp) {
        setOpenProp(openState);
      } else {
        _setOpen(openState);
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
    },
    [setOpenProp, open],
  );

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile(open => !open) : setOpen(open => !open);
  }, [isMobile, setOpen, setOpenMobile]);

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault();
        toggleSidebar();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [toggleSidebar]);

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? 'expanded' : 'collapsed';

  const contextValue = React.useMemo<SidebarContextProps>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],
  );

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot="sidebar-wrapper"
          style={
            {
              '--sidebar-width': SIDEBAR_WIDTH,
              '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn(
            'group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full',
            className,
          )}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
}

function Sidebar({
  side = 'left',
  variant = 'sidebar',
  collapsible = 'offcanvas',
  className,
  children,
  ...props
}: React.ComponentProps<'div'> & {
  side?: 'left' | 'right';
  variant?: 'sidebar' | 'floating' | 'inset';
  collapsible?: 'offcanvas' | 'icon' | 'none';
}) {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

  if (collapsible === 'none') {
    return (
      <div
        data-slot="sidebar"
        className={cn(
          'bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col',
          className,
        )}
        {...props}
      >
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-slot="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden"
          style={
            {
              '--sidebar-width': SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div
      className="group peer text-sidebar-foreground hidden md:block"
      data-state={state}
      data-collapsible={state === 'collapsed' ? collapsible : ''}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar"
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        data-slot="sidebar-gap"
        className={cn(
          'relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-out',
          'group-data-[collapsible=offcanvas]:w-0',
          'group-data-[side=right]:rotate-180',
          variant === 'floating' || variant === 'inset'
            ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]'
            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon)',
        )}
      />
      <div
        data-slot="sidebar-container"
        className={cn(
          'fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex',
          side === 'left'
            ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'
            : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',
          // Adjust the padding for floating and inset variants.
          variant === 'floating' || variant === 'inset'
            ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]'
            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l',
          className,
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          data-slot="sidebar-inner"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm"
        >
          {children}
        </div>
      </div>
    </div>
  );
}

function SidebarTrigger({
  className,
  onClick,
  ...props
}: React.ComponentProps<typeof Button>) {
  const { toggleSidebar } = useSidebar();

  return (
    <Button
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn('size-7', className)}
      onClick={event => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <PanelLeftIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
}

function SidebarRail({ className, ...props }: React.ComponentProps<'button'>) {
  const { toggleSidebar } = useSidebar();

  return (
    <button
      data-sidebar="rail"
      data-slot="sidebar-rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        'hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex',
        'in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize',
        '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',
        'hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',
        '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',
        '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',
        className,
      )}
      {...props}
    />
  );
}

function SidebarInset({ className, ...props }: React.ComponentProps<'main'>) {
  return (
    <main
      data-slot="sidebar-inset"
      className={cn(
        'bg-background relative flex w-full flex-1 flex-col',
        'md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2',
        className,
      )}
      {...props}
    />
  );
}

function SidebarInput({
  className,
  ...props
}: React.ComponentProps<typeof Input>) {
  return (
    <Input
      data-slot="sidebar-input"
      data-sidebar="input"
      className={cn('bg-background h-8 w-full shadow-none', className)}
      {...props}
    />
  );
}

function SidebarHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-header"
      data-sidebar="header"
      className={cn('flex flex-col gap-2 p-2', className)}
      {...props}
    />
  );
}

function SidebarFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-footer"
      data-sidebar="footer"
      className={cn('flex flex-col gap-2 p-2', className)}
      {...props}
    />
  );
}

function SidebarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="sidebar-separator"
      data-sidebar="separator"
      className={cn('bg-sidebar-border mx-2 w-auto', className)}
      {...props}
    />
  );
}

function SidebarContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-content"
      data-sidebar="content"
      className={cn(
        'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',
        className,
      )}
      {...props}
    />
  );
}

function SidebarGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-group"
      data-sidebar="group"
      className={cn('relative flex w-full min-w-0 flex-col p-2', className)}
      {...props}
    />
  );
}

function SidebarGroupLabel({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'div'> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'div';

  return (
    <Comp
      data-slot="sidebar-group-label"
      data-sidebar="group-label"
      className={cn(
        'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',
        className,
      )}
      {...props}
    />
  );
}

function SidebarGroupAction({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'button'> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'button';

  return (
    <Comp
      data-slot="sidebar-group-action"
      data-sidebar="group-action"
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 md:after:hidden',
        'group-data-[collapsible=icon]:hidden',
        className,
      )}
      {...props}
    />
  );
}

function SidebarGroupContent({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-group-content"
      data-sidebar="group-content"
      className={cn('w-full text-sm', className)}
      {...props}
    />
  );
}

function SidebarMenu({ className, ...props }: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot="sidebar-menu"
      data-sidebar="menu"
      className={cn('flex w-full min-w-0 flex-col gap-1', className)}
      {...props}
    />
  );
}

/**
 * Render a list-item wrapper used as a sidebar menu item slot, providing styling hooks and forwardable HTML attributes.
 *
 * @param className - Additional CSS classes to apply to the list item
 * @param props - Remaining HTML attributes and event handlers forwarded to the underlying `<li>`
 * @returns The rendered `<li>` element representing a sidebar menu item
 */
function SidebarMenuItem({ className, ...props }: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot="sidebar-menu-item"
      data-sidebar="menu-item"
      className={cn('group/menu-item relative', className)}
      {...props}
    />
  );
}

const sidebarMenuButtonVariants = cva(
  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-[var(--nav-hover)] hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-[var(--nav-active)] active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-[var(--nav-active)] data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-[var(--nav-hover)] data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
  {
    variants: {
      variant: {
        default:
          'hover:bg-[var(--nav-hover)] hover:text-sidebar-accent-foreground',
        outline:
          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-[var(--nav-hover)] hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--nav-hover))]',
      },
      size: {
        default: 'h-8 text-sm',
        sm: 'h-7 text-xs',
        lg: 'h-12 text-sm group-data-[collapsible=icon]:p-0!',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
);

/**
 * Render a sidebar menu button with optional tooltip and configurable styling.
 *
 * @param asChild - When true, renders a Slot so the caller supplies the actual element; otherwise renders a native `button`.
 * @param isActive - Controls active styling and the `data-active` attribute.
 * @param variant - Visual variant to apply to the button (controls styling).
 * @param size - Size variant to apply to the button.
 * @param tooltip - If provided, shows a tooltip; may be a string or props for `TooltipContent`. The tooltip is hidden unless the sidebar is in the collapsed state and not on a mobile viewport.
 * @param className - Additional class names to apply to the button element.
 * @returns A JSX element representing the menu button, optionally wrapped in a `Tooltip`.
 */
function SidebarMenuButton({
  asChild = false,
  isActive = false,
  variant = 'default',
  size = 'default',
  tooltip,
  className,
  ...props
}: React.ComponentProps<'button'> & {
  asChild?: boolean;
  isActive?: boolean;
  tooltip?: string | React.ComponentProps<typeof TooltipContent>;
} & VariantProps<typeof sidebarMenuButtonVariants>) {
  const Comp = asChild ? Slot : 'button';
  const { isMobile, state } = useSidebar();

  const button = (
    <Comp
      data-slot="sidebar-menu-button"
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  );

  if (!tooltip) {
    return button;
  }

  if (typeof tooltip === 'string') {
    tooltip = {
      children: tooltip,
    };
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== 'collapsed' || isMobile}
        {...tooltip}
      />
    </Tooltip>
  );
}

/**
 * Renders a sidebar menu action button positioned at the item edge, with optional slot wrapping and hover-visibility behavior.
 *
 * @param asChild - If `true`, renders the provided children using a `Slot` (allowing the parent element to control the element type); otherwise renders a native `button`.
 * @param showOnHover - If `true`, hides the action by default and reveals it when the associated menu item is hovered, focused, or when the menu is open.
 * @returns The rendered menu action element (a `button` or the `Slot`-wrapped element).
 */
function SidebarMenuAction({
  className,
  asChild = false,
  showOnHover = false,
  ...props
}: React.ComponentProps<'button'> & {
  asChild?: boolean;
  showOnHover?: boolean;
}) {
  const Comp = asChild ? Slot : 'button';

  return (
    <Comp
      data-slot="sidebar-menu-action"
      data-sidebar="menu-action"
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform hover:bg-[var(--interactive-hover)] focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 md:after:hidden',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        showOnHover &&
          'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',
        className,
      )}
      {...props}
    />
  );
}

function SidebarMenuBadge({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-menu-badge"
      data-sidebar="menu-badge"
      className={cn(
        'text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none',
        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        className,
      )}
      {...props}
    />
  );
}

function SidebarMenuSkeleton({
  className,
  showIcon = false,
  ...props
}: React.ComponentProps<'div'> & {
  showIcon?: boolean;
}) {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      data-slot="sidebar-menu-skeleton"
      data-sidebar="menu-skeleton"
      className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-(--skeleton-width) flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            '--skeleton-width': width,
          } as React.CSSProperties
        }
      />
    </div>
  );
}

function SidebarMenuSub({ className, ...props }: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot="sidebar-menu-sub"
      data-sidebar="menu-sub"
      className={cn(
        'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',
        'group-data-[collapsible=icon]:hidden',
        className,
      )}
      {...props}
    />
  );
}

function SidebarMenuSubItem({
  className,
  ...props
}: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot="sidebar-menu-sub-item"
      data-sidebar="menu-sub-item"
      className={cn('group/menu-sub-item relative', className)}
      {...props}
    />
  );
}

function SidebarMenuSubButton({
  asChild = false,
  size = 'md',
  isActive = false,
  className,
  ...props
}: React.ComponentProps<'a'> & {
  asChild?: boolean;
  size?: 'sm' | 'md';
  isActive?: boolean;
}) {
  const Comp = asChild ? Slot : 'a';

  return (
    <Comp
      data-slot="sidebar-menu-sub-button"
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',
        size === 'sm' && 'text-xs',
        size === 'md' && 'text-sm',
        'group-data-[collapsible=icon]:hidden',
        className,
      )}
      {...props}
    />
  );
}

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};



================================================
FILE: src/components/ui/skeleton.tsx
================================================
import { cn } from '@/lib/utils';

function Skeleton({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="skeleton"
      className={cn('bg-accent animate-pulse rounded-md', className)}
      {...props}
    />
  );
}

export { Skeleton };



================================================
FILE: src/components/ui/slider.tsx
================================================
'use client';

import * as React from 'react';
import * as SliderPrimitive from '@radix-ui/react-slider';

import { cn } from '@/lib/utils';

/**
 * Renders a configurable slider component supporting single or multiple thumbs.
 *
 * The component composes Radix Slider primitives (Root, Track, Range, Thumb)
 * and normalizes provided values to determine how many thumbs to render.
 *
 * @param className - Optional additional CSS class names applied to the root element
 * @param defaultValue - Initial slider value or array of values for uncontrolled usage
 * @param value - Controlled slider value or array of values
 * @param min - Minimum slider value (defaults to 0)
 * @param max - Maximum slider value (defaults to 100)
 * @returns A slider element containing a track, range fill, and one thumb per provided value
 */
function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max],
  );

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        'relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',
        className,
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          'bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5',
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            'bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full',
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary ring-ring/50 block size-4 shrink-0 rounded-full border bg-white shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  );
}

export { Slider };



================================================
FILE: src/components/ui/sonner.tsx
================================================
'use client';

import { useTheme } from 'next-themes';
import { Toaster as Sonner, ToasterProps } from 'sonner';

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = 'system' } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps['theme']}
      className="toaster group"
      style={
        {
          '--normal-bg': 'var(--popover)',
          '--normal-text': 'var(--popover-foreground)',
          '--normal-border': 'var(--border)',
        } as React.CSSProperties
      }
      {...props}
    />
  );
};

export { Toaster };



================================================
FILE: src/components/ui/spinner.tsx
================================================
import { Loader2Icon } from 'lucide-react';

import { cn } from '@/lib/utils';

/**
 * Renders an accessible spinning loader icon.
 *
 * The component forwards all standard SVG props to the underlying icon and merges any
 * provided `className` with the default sizing and spin classes.
 *
 * @param className - Additional CSS classes to apply to the icon
 * @param props - Other SVG attributes forwarded to the icon element
 * @returns The spinner SVG element with `role="status"` and `aria-label="Loading"`
 */
function Spinner({
  className,
  label,
  ...props
}: React.ComponentProps<'svg'> & {
  label?: string;
}) {
  return (
    <Loader2Icon
      role="status"
      aria-label={label || 'Loading'}
      aria-live="polite"
      className={cn('size-4 animate-spin', className)}
      {...props}
    />
  );
}

export { Spinner };



================================================
FILE: src/components/ui/switch.tsx
================================================
'use client';

import * as React from 'react';
import * as SwitchPrimitive from '@radix-ui/react-switch';

import { cn } from '@/lib/utils';

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        'peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',
        className,
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          'bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0',
        )}
      />
    </SwitchPrimitive.Root>
  );
}

export { Switch };



================================================
FILE: src/components/ui/table.tsx
================================================
'use client';

import * as React from 'react';

import { cn } from '@/lib/utils';

function Table({ className, ...props }: React.ComponentProps<'table'>) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn('w-full caption-bottom text-sm', className)}
        {...props}
      />
    </div>
  );
}

function TableHeader({ className, ...props }: React.ComponentProps<'thead'>) {
  return (
    <thead
      data-slot="table-header"
      className={cn('[&_tr]:border-b', className)}
      {...props}
    />
  );
}

function TableBody({ className, ...props }: React.ComponentProps<'tbody'>) {
  return (
    <tbody
      data-slot="table-body"
      className={cn('[&_tr:last-child]:border-0', className)}
      {...props}
    />
  );
}

function TableFooter({ className, ...props }: React.ComponentProps<'tfoot'>) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        'bg-muted/50 border-t font-medium [&>tr]:last:border-b-0',
        className,
      )}
      {...props}
    />
  );
}

function TableRow({ className, ...props }: React.ComponentProps<'tr'>) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',
        className,
      )}
      {...props}
    />
  );
}

function TableHead({ className, ...props }: React.ComponentProps<'th'>) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        'text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
        className,
      )}
      {...props}
    />
  );
}

function TableCell({ className, ...props }: React.ComponentProps<'td'>) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        'p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
        className,
      )}
      {...props}
    />
  );
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<'caption'>) {
  return (
    <caption
      data-slot="table-caption"
      className={cn('text-muted-foreground mt-4 text-sm', className)}
      {...props}
    />
  );
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};



================================================
FILE: src/components/ui/tabs.tsx
================================================
'use client';

import * as React from 'react';
import * as TabsPrimitive from '@radix-ui/react-tabs';

import { cn } from '@/lib/utils';

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn('flex flex-col gap-2', className)}
      {...props}
    />
  );
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',
        className,
      )}
      {...props}
    />
  );
}

/**
 * Render a styled Tabs Trigger component that merges predefined UI classes with any provided `className` and forwards all other props to the underlying Radix Trigger.
 *
 * @returns A TabsPrimitive.Trigger element with the composed `className` and forwarded props
 */
function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] hover:bg-[var(--interactive-hover)] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn('flex-1 outline-none', className)}
      {...props}
    />
  );
}

export { Tabs, TabsList, TabsTrigger, TabsContent };



================================================
FILE: src/components/ui/textarea.tsx
================================================
import * as React from 'react';

import { cn } from '@/lib/utils';

function Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
        className,
      )}
      {...props}
    />
  );
}

export { Textarea };



================================================
FILE: src/components/ui/toggle-group.tsx
================================================
'use client';

import * as React from 'react';
import * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group';
import { type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';
import { toggleVariants } from '@/components/ui/toggle';

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: 'default',
  variant: 'default',
});

function ToggleGroup({
  className,
  variant,
  size,
  children,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <ToggleGroupPrimitive.Root
      data-slot="toggle-group"
      data-variant={variant}
      data-size={size}
      className={cn(
        'group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs',
        className,
      )}
      {...props}
    >
      <ToggleGroupContext.Provider value={{ variant, size }}>
        {children}
      </ToggleGroupContext.Provider>
    </ToggleGroupPrimitive.Root>
  );
}

function ToggleGroupItem({
  className,
  children,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &
  VariantProps<typeof toggleVariants>) {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      data-slot="toggle-group-item"
      data-variant={context.variant || variant}
      data-size={context.size || size}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        'min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l',
        className,
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
}

export { ToggleGroup, ToggleGroupItem };



================================================
FILE: src/components/ui/toggle.tsx
================================================
'use client';

import * as React from 'react';
import * as TogglePrimitive from '@radix-ui/react-toggle';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap",
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        outline:
          'border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground',
      },
      size: {
        default: 'h-9 px-2 min-w-9',
        sm: 'h-8 px-1.5 min-w-8',
        lg: 'h-10 px-2.5 min-w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
);

function Toggle({
  className,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof TogglePrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <TogglePrimitive.Root
      data-slot="toggle"
      className={cn(toggleVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Toggle, toggleVariants };



================================================
FILE: src/components/ui/tooltip.tsx
================================================
'use client';

import * as React from 'react';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';

import { cn } from '@/lib/utils';

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  );
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  );
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />;
}

/**
 * Renders the styled tooltip content and arrow inside a portal.
 *
 * @param className - Optional additional CSS classes applied to the content container
 * @param sideOffset - Offset in pixels between the trigger and the tooltip; defaults to 0
 * @param children - Content displayed inside the tooltip
 * @returns The tooltip content element (including its arrow) mounted in a portal
 */
function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          'bg-foreground text-background animate-in fade-in-0 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance duration-200 data-[state=closed]:duration-200',
          className,
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-foreground fill-foreground z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  );
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };



================================================
FILE: src/db/drizzle.ts
================================================
import { config } from 'dotenv';
import { drizzle } from 'drizzle-orm/neon-http';

config({ path: '.env' }); // or .env.local

export const db = drizzle(process.env.DATABASE_URL!);



================================================
FILE: src/db/schema.ts
================================================
import { pgTable, text, timestamp, boolean } from 'drizzle-orm/pg-core';

export const user = pgTable('user', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  email: text('email').notNull().unique(),
  emailVerified: boolean('email_verified').default(false).notNull(),
  image: text('image'),
  apiKeys: text('api_keys'), // encrypted JSON string for API keys
  provider: text('provider'), // 'openai' or 'openrouter'
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at')
    .defaultNow()
    .$onUpdate(() => /* @__PURE__ */ new Date())
    .notNull(),
});

export const session = pgTable('session', {
  id: text('id').primaryKey(),
  expiresAt: timestamp('expires_at').notNull(),
  token: text('token').notNull().unique(),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at')
    .$onUpdate(() => /* @__PURE__ */ new Date())
    .notNull(),
  ipAddress: text('ip_address'),
  userAgent: text('user_agent'),
  userId: text('user_id')
    .notNull()
    .references(() => user.id, { onDelete: 'cascade' }),
});

export const account = pgTable('account', {
  id: text('id').primaryKey(),
  accountId: text('account_id').notNull(),
  providerId: text('provider_id').notNull(),
  userId: text('user_id')
    .notNull()
    .references(() => user.id, { onDelete: 'cascade' }),
  accessToken: text('access_token'),
  refreshToken: text('refresh_token'),
  idToken: text('id_token'),
  accessTokenExpiresAt: timestamp('access_token_expires_at'),
  refreshTokenExpiresAt: timestamp('refresh_token_expires_at'),
  scope: text('scope'),
  password: text('password'),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at')
    .$onUpdate(() => /* @__PURE__ */ new Date())
    .notNull(),
});

export const verification = pgTable('verification', {
  id: text('id').primaryKey(),
  identifier: text('identifier').notNull(),
  value: text('value').notNull(),
  expiresAt: timestamp('expires_at').notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at')
    .defaultNow()
    .$onUpdate(() => /* @__PURE__ */ new Date())
    .notNull(),
});

export const subscription = pgTable('subscription', {
  id: text('id').primaryKey(),
  userId: text('user_id')
    .notNull()
    .references(() => user.id, { onDelete: 'cascade' }),
  polarSubscriptionId: text('polar_subscription_id').notNull().unique(),
  polarCustomerId: text('polar_customer_id').notNull(),
  status: text('status').notNull(), // active, canceled, past_due, etc.
  plan: text('plan').notNull(), // Free, Pro, Startup
  currentPeriodStart: timestamp('current_period_start'),
  currentPeriodEnd: timestamp('current_period_end'),
  cancelAtPeriodEnd: boolean('cancel_at_period_end').default(false),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at')
    .defaultNow()
    .$onUpdate(() => /* @__PURE__ */ new Date())
    .notNull(),
});

export const schema = { user, session, account, verification, subscription };



================================================
FILE: src/hooks/use-mobile.ts
================================================
import * as React from 'react';

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(
    undefined,
  );

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener('change', onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener('change', onChange);
  }, []);

  return !!isMobile;
}



================================================
FILE: src/hooks/use-performance.ts
================================================
'use client';

import { useEffect, useState } from 'react';

interface PerformanceMetrics {
  lcp?: number;
  fid?: number;
  cls?: number;
  fcp?: number;
  ttfb?: number;
  loadTime?: number;
}

/**
 * Tracks client-side web performance metrics on page load and provides rating helpers.
 *
 * Collects LCP, FCP, TTFB, and total load time after the page finishes loading (or immediately if already loaded),
 * stores them in `metrics`, and exposes helpers to get qualitative ratings for LCP, FCP, and TTFB.
 *
 * @returns An object containing:
 * - `metrics`: collected performance values (optional `lcp`, `fcp`, `ttfb`, `loadTime`, etc.).
 * - `isLoading`: `true` while waiting for the page load event, `false` after metrics are collected.
 * - `getRating(metric, value?)`: returns `'good'`, `'needs-improvement'`, `'poor'`, or `'unknown'` for the given metric or provided value.
 * - `getLCPRating()`, `getFCPRating()`, `getTTFBRating()`: convenience getters that return the rating for the respective metric from `metrics`.
 */
export function usePerformance() {
  const [metrics, setMetrics] = useState<PerformanceMetrics>({});
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Wait for page to load
    const handleLoad = () => {
      setIsLoading(false);

      // Collect performance metrics
      const navigation = performance.getEntriesByType(
        'navigation',
      )[0] as PerformanceNavigationTiming;
      const paint = performance.getEntriesByType('paint');
      const lcpEntries = performance.getEntriesByType(
        'largest-contentful-paint',
      );
      const lcp = lcpEntries.at(-1);

      const newMetrics: PerformanceMetrics = {};

      // Largest Contentful Paint
      if (lcp) {
        newMetrics.lcp = lcp.startTime;
      }

      // First Contentful Paint
      const fcp = paint.find(p => p.name === 'first-contentful-paint');
      if (fcp) {
        newMetrics.fcp = fcp.startTime;
      }

      // Time to First Byte
      if (navigation) {
        newMetrics.ttfb = navigation.responseStart - navigation.requestStart;
        newMetrics.loadTime = navigation.loadEventEnd - navigation.startTime;
      }

      setMetrics(newMetrics);

      // Log metrics for debugging
      console.log('Performance Metrics:', newMetrics);

      // Send to analytics (if available)
      if (typeof window !== 'undefined') {
        const gtag = (window as { gtag?: (...args: unknown[]) => void }).gtag;
        if (gtag) {
          gtag('event', 'web_vitals', {
            event_category: 'Web Vitals',
            event_label: 'LCP',
            value: Math.round(newMetrics.lcp || 0),
          });
        }
      }
    };

    if (document.readyState === 'complete') {
      handleLoad();
    } else {
      window.addEventListener('load', handleLoad);
      return () => window.removeEventListener('load', handleLoad);
    }
  }, []);

  const getRating = (metric: keyof PerformanceMetrics, value?: number) => {
    const val = value || metrics[metric];
    if (!val) return 'unknown';

    switch (metric) {
      case 'lcp':
        return val <= 2500
          ? 'good'
          : val <= 4000
            ? 'needs-improvement'
            : 'poor';
      case 'fcp':
        return val <= 1800
          ? 'good'
          : val <= 3000
            ? 'needs-improvement'
            : 'poor';
      case 'ttfb':
        return val <= 800 ? 'good' : val <= 1800 ? 'needs-improvement' : 'poor';
      default:
        return 'unknown';
    }
  };

  return {
    metrics,
    isLoading,
    getRating,
    // Helper functions for common metrics
    getLCPRating: () => getRating('lcp', metrics.lcp),
    getFCPRating: () => getRating('fcp', metrics.fcp),
    getTTFBRating: () => getRating('ttfb', metrics.ttfb),
  };
}



================================================
FILE: src/lib/arcjet.ts
================================================
import arcjet, { detectBot, shield } from '@arcjet/next';

const key = process.env.ARCJET_KEY;
if (!key) {
  throw new Error('ARCJET_KEY environment variable must be set');
}

export const aj = arcjet({
  key,
  characteristics: ['ip.src'],
  rules: [
    // Protect against common attacks
    shield({
      mode: 'LIVE',
    }),
    // Bot detection
    detectBot({
      mode: 'LIVE',
      allow: ['CATEGORY:SEARCH_ENGINE'],
    }),
  ],
});

export default aj;



================================================
FILE: src/lib/auth-client.ts
================================================
import { createAuthClient } from 'better-auth/client';
import { polarClient } from '@polar-sh/better-auth';

export const authClient = createAuthClient({
  baseURL: process.env.BETTER_AUTH_URL as string,
  plugins: [polarClient()],
});

// Available plan product IDs
export const PLAN_PRODUCT_IDS = {
  FREE: process.env.POLAR_PRODUCT_FREE!,
  PRO: process.env.POLAR_PRODUCT_PRO!,
  STARTUP: process.env.POLAR_PRODUCT_STARTUP!,
} as const;



================================================
FILE: src/lib/auth.ts
================================================
import { betterAuth } from 'better-auth';
import { polar, checkout, usage, portal } from '@polar-sh/better-auth';
import { drizzleAdapter } from 'better-auth/adapters/drizzle';
import { db } from '@/db/drizzle';
import { nextCookies } from 'better-auth/next-js';
import { schema } from '@/db/schema';
import { Resend } from 'resend';
import { Polar } from '@polar-sh/sdk';

import ForgotPasswordEmail from '@/components/forms/reset-password';
import EmailVerification from '@/components/forms/verify-email';

const resend = new Resend(process.env.RESEND_API_KEY as string);

// Polar client
const polarClient = new Polar({
  accessToken: process.env.POLAR_ACCESS_TOKEN!,
  // Use 'sandbox' if you're using the Polar Sandbox environment
  server: 'sandbox',
});

// Polar configuration
export const polarConfig = {
  accessToken: process.env.POLAR_ACCESS_TOKEN!,
  successUrl: process.env.POLAR_SUCCESS_URL!,
};

export const auth = betterAuth({
  emailVerification: {
    sendVerificationEmail: async ({ user, url }) => {
      resend.emails.send({
        from: process.env.RESEND_SENDER_EMAIL as string,
        to: user.email,
        subject: 'Verify your email address',
        react: EmailVerification({
          username: user.name,
          verificationUrl: url,
        }),
      });
    },
    sendOnSignUp: true,
    autoSignInAfterVerification: true,
  },
  socialProviders: {
    google: {
      clientId: process.env.GOOGLE_CLIENT_ID as string,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
    },
  },
  emailAndPassword: {
    enabled: true,
    sendResetPassword: async ({ user, url }) => {
      resend.emails.send({
        from: process.env.RESEND_SENDER_EMAIL as string,
        to: user.email,
        subject: 'Reset your password',
        react: ForgotPasswordEmail({
          username: user.name,
          resetUrl: url,
          userEmail: user.email,
        }),
      });
    },
    requireEmailVerification: true,
  },
  database: drizzleAdapter(db, {
    provider: 'pg',
    schema,
  }),
  plugins: [
    nextCookies(),
    polar({
      client: polarClient,
      createCustomerOnSignUp: true,
      use: [
        checkout({
          products: [
            {
              slug: 'free',
              productId: process.env.POLAR_PRODUCT_FREE as string,
            },
            {
              slug: 'pro',
              productId: process.env.POLAR_PRODUCT_PRO as string,
            },
            {
              slug: 'startup',
              productId: process.env.POLAR_PRODUCT_STARTUP as string,
            },
          ],
          successUrl: '/billing/success?checkout_id={CHECKOUT_ID}',
          authenticatedUsersOnly: true,
        }),
        portal(),
        usage(),
      ],
    }),

    /*polar({
      client: polarClient,
      createCustomerOnSignUp: true,
      enableCustomerPortal: true, //api/auth/portal
      successUrl: process.env.POLAR_SUCCESS_URL!,
      checkout: {
        enabled: true,
        products: [
          {
            slug: 'Free',
            productId: process.env.POLAR_PRODUCT_FREE as string,
          },
          {
            slug: 'Pro',
            productId: process.env.POLAR_PRODUCT_PRO as string,
          },
          {
            slug: 'Startup',
            productId: process.env.POLAR_PRODUCT_STARTUP as string,
          },
        ],
      },
      use: [
        webhooks({
          secret: process.env.POLAR_WEBHOOK_SECRET!,
        }),
      ],
    }),*/
  ],
});

// Polar client configuration
/* export const polarClientConfig = {
  accessToken: process.env.POLAR_ACCESS_TOKEN!,
};
 */



================================================
FILE: src/lib/crypto.ts
================================================
import { createCipheriv, createDecipheriv, randomBytes } from 'crypto';

const algorithm = 'aes-256-gcm';
if (!process.env.ENCRYPTION_KEY) {
  throw new Error('ENCRYPTION_KEY environment variable must be set');
}
const key = Buffer.from(process.env.ENCRYPTION_KEY, 'utf8').subarray(0, 32);

export function encrypt(text: string): string {
  const iv = randomBytes(16);
  const cipher = createCipheriv(algorithm, key, iv);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  const authTag = cipher.getAuthTag();
  return iv.toString('hex') + ':' + authTag.toString('hex') + ':' + encrypted;
}

export function decrypt(encryptedText: string): string {
  const parts = encryptedText.split(':');
  if (parts.length !== 3) {
    throw new Error('Invalid encrypted data format');
  }
  const iv = Buffer.from(parts[0], 'hex');
  const authTag = Buffer.from(parts[1], 'hex');
  const encrypted = parts[2];
  if (iv.length !== 16 || authTag.length !== 16) {
    throw new Error('Invalid IV or auth tag length');
  }
  const decipher = createDecipheriv(algorithm, key, iv);
  decipher.setAuthTag(authTag);
  try {
    let decrypted = decipher.update(encrypted, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    return decrypted;
  } catch {
    throw new Error('Decryption failed: invalid data or wrong key');
  }
}



================================================
FILE: src/lib/logger.ts
================================================
type LogLevel = 'debug' | 'info' | 'warn' | 'error';

interface LogContext {
  userId?: string;
  requestId?: string;
  ip?: string;
  userAgent?: string;
  url?: string;
  method?: string;
  [key: string]:
    | string
    | number
    | boolean
    | undefined
    | null
    | Record<string, unknown>;
}

interface LogEntry {
  timestamp: string;
  level: LogLevel;
  message: string;
  context?: LogContext;
  error?: {
    name: string;
    message: string;
    stack?: string;
  };
}

class SecureLogger {
  private isDevelopment = process.env.NODE_ENV === 'development';
  private maxContextDepth = 3;

  private sanitizeContext(context: LogContext): LogContext {
    const sanitized: LogContext = {};

    for (const [key, value] of Object.entries(context)) {
      // Skip sensitive fields
      if (this.isSensitiveField(key)) {
        sanitized[key] = '[REDACTED]';
        continue;
      }

      // Sanitize nested objects
      if (
        typeof value === 'object' &&
        value !== null &&
        this.maxContextDepth > 0
      ) {
        sanitized[key] = this.sanitizeNestedObject(
          value,
          this.maxContextDepth - 1,
        ) as Record<string, unknown>;
      } else if (typeof value === 'string' && value.length > 1000) {
        // Truncate very long strings
        sanitized[key] = value.substring(0, 1000) + '...[TRUNCATED]';
      } else {
        sanitized[key] = value;
      }
    }

    return sanitized;
  }

  private sanitizeNestedObject(obj: unknown, depth: number): unknown {
    if (depth <= 0) return '[MAX_DEPTH_EXCEEDED]';

    if (Array.isArray(obj)) {
      return obj
        .slice(0, 10)
        .map(item =>
          typeof item === 'object'
            ? this.sanitizeNestedObject(item, depth - 1)
            : item,
        );
    }

    if (typeof obj === 'object' && obj !== null) {
      const sanitized: Record<string, unknown> = {};
      for (const [key, value] of Object.entries(obj)) {
        if (this.isSensitiveField(key)) {
          sanitized[key] = '[REDACTED]';
        } else if (typeof value === 'object' && value !== null) {
          sanitized[key] = this.sanitizeNestedObject(value, depth - 1);
        } else {
          sanitized[key] = value;
        }
      }
      return sanitized;
    }

    return obj;
  }

  private isSensitiveField(key: string): boolean {
    const sensitiveFields = [
      'password',
      'token',
      'secret',
      'key',
      'authorization',
      'cookie',
      'session',
      'credit_card',
      'ssn',
      'social_security',
      'api_key',
      'access_token',
      'refresh_token',
      'private_key',
      'encryption_key',
    ];

    return sensitiveFields.some(field =>
      key.toLowerCase().includes(field.toLowerCase()),
    );
  }

  private formatLogMessage(
    level: LogLevel,
    message: string,
    context?: LogContext,
  ): string {
    const timestamp = new Date().toISOString();
    const contextStr = context
      ? ` | Context: ${JSON.stringify(this.sanitizeContext(context))}`
      : '';
    return `[${timestamp}] ${level.toUpperCase()}: ${message}${contextStr}`;
  }

  private writeLog(
    level: LogLevel,
    message: string,
    context?: LogContext,
    error?: Error,
  ): void {
    const logEntry: LogEntry = {
      timestamp: new Date().toISOString(),
      level,
      message,
      context,
    };

    if (error) {
      logEntry.error = {
        name: error.name,
        message: error.message,
        stack: this.isDevelopment ? error.stack : undefined,
      };
    }

    const formattedMessage = this.formatLogMessage(level, message, context);

    // In production, you might want to send logs to a service like DataDog, CloudWatch, etc.
    switch (level) {
      case 'debug':
        if (this.isDevelopment) {
          console.debug(
            formattedMessage,
            logEntry.error ? { error: logEntry.error } : '',
          );
        }
        break;
      case 'info':
        console.info(formattedMessage);
        break;
      case 'warn':
        console.warn(
          formattedMessage,
          logEntry.error ? { error: logEntry.error } : '',
        );
        break;
      case 'error':
        console.error(
          formattedMessage,
          logEntry.error ? { error: logEntry.error } : '',
        );
        break;
    }
  }

  debug(message: string, context?: LogContext): void {
    this.writeLog('debug', message, context);
  }

  info(message: string, context?: LogContext): void {
    this.writeLog('info', message, context);
  }

  warn(message: string, context?: LogContext, error?: Error): void {
    this.writeLog('warn', message, context, error);
  }

  error(message: string, context?: LogContext, error?: Error): void {
    this.writeLog('error', message, context, error);
  }

  // Security-specific logging methods
  logSecurityEvent(event: string, context: LogContext): void {
    this.warn(`Security Event: ${event}`, {
      ...context,
      securityEvent: true,
      timestamp: new Date().toISOString(),
    });
  }

  logAuthEvent(event: string, context: LogContext): void {
    this.info(`Auth Event: ${event}`, {
      ...context,
      authEvent: true,
      timestamp: new Date().toISOString(),
    });
  }

  logApiAccess(method: string, path: string, context: LogContext): void {
    this.info(`API Access: ${method} ${path}`, {
      ...context,
      apiAccess: true,
      timestamp: new Date().toISOString(),
    });
  }
}

// Export singleton instance
export const logger = new SecureLogger();

// Convenience functions for common logging patterns
export const logApiRequest = (
  method: string,
  path: string,
  context: LogContext = {},
) => {
  logger.logApiAccess(method, path, context);
};

export const logSecurityEvent = (event: string, context: LogContext = {}) => {
  logger.logSecurityEvent(event, context);
};

export const logAuthEvent = (event: string, context: LogContext = {}) => {
  logger.logAuthEvent(event, context);
};

export const logError = (
  message: string,
  error?: Error,
  context: LogContext = {},
) => {
  logger.error(message, context, error);
};

export const logWarn = (message: string, context: LogContext = {}) => {
  logger.warn(message, context);
};

export const logInfo = (message: string, context: LogContext = {}) => {
  logger.info(message, context);
};

export const logDebug = (message: string, context: LogContext = {}) => {
  logger.debug(message, context);
};



================================================
FILE: src/lib/plan-map.ts
================================================
// Validate required environment variables at startup
function validateEnvVar(name: string): string {
  const value = process.env[name];
  if (!value) {
    throw new Error(`Missing required environment variable: ${name}`);
  }
  return value;
}

// Define plan types for better type safety
type PlanType = 'Free' | 'Pro' | 'Startup';

// Construct the product map with validated environment variables
export const PRODUCT_MAP: Record<string, PlanType> = (() => {
  try {
    const free = validateEnvVar('POLAR_PRODUCT_FREE');
    const pro = validateEnvVar('POLAR_PRODUCT_PRO');
    const startup = validateEnvVar('POLAR_PRODUCT_STARTUP');

    return {
      [free]: 'Free',
      [pro]: 'Pro',
      [startup]: 'Startup',
    };
  } catch (error: unknown) {
    if (process.env.NODE_ENV === 'production') {
      throw error; // Fail fast in production
    }
    console.error(
      `Error constructing PRODUCT_MAP: ${error instanceof Error ? error.message : String(error)}`,
    );
    // Return a minimal map for development to allow partial functionality
    return {};
  }
})();

// Helper function to get plan name with better error handling
export function getPlanName(productId: string | undefined | null): string {
  if (!productId) {
    console.warn('No product ID provided to getPlanName');
    return 'Unknown Plan';
  }

  const planName = PRODUCT_MAP[productId];
  if (!planName) {
    console.warn(`Product ID ${productId} not found in PRODUCT_MAP`);
    console.log('Available PRODUCT_MAP keys:', Object.keys(PRODUCT_MAP));

    // Try to match by partial ID or provide fallback
    const partialMatch = Object.keys(PRODUCT_MAP).find(
      key => key.includes(productId) || productId.includes(key),
    );

    if (partialMatch) {
      console.log(
        `Found partial match: ${partialMatch} -> ${PRODUCT_MAP[partialMatch]}`,
      );
      return PRODUCT_MAP[partialMatch];
    }

    return 'Unknown Plan';
  }

  return planName;
}



================================================
FILE: src/lib/rate-limit.ts
================================================
import { NextRequest, NextResponse } from 'next/server';

// In-memory store for rate limiting (use Redis in production)
const rateLimitStore = new Map<string, { count: number; resetTime: number }>();

interface RateLimitConfig {
  windowMs: number; // Time window in milliseconds
  maxRequests: number; // Maximum requests per window
  skipSuccessfulRequests?: boolean;
}

/**
 * Creates a per-client in-memory rate-limiting middleware based on the provided configuration.
 *
 * The returned middleware identifies clients by `x-forwarded-for`, `x-real-ip`, or `anonymous`,
 * enforces a max requests quota per rolling window, increments a per-client counter for allowed
 * requests, and attaches standard rate limit headers to responses.
 *
 * @param config - Rate limit settings:
 *   - `windowMs`: duration of the rate limit window in milliseconds
 *   - `maxRequests`: maximum allowed requests per window
 *   - `skipSuccessfulRequests` (optional): configuration flag (not used by this implementation)
 * @returns A middleware function that accepts a `NextRequest` and returns a `NextResponse`. When a
 * rate limit is exceeded the middleware responds with status 429 and a JSON payload `{ error, retryAfter }`
 * and sets the headers `X-RateLimit-Limit`, `X-RateLimit-Remaining`, `X-RateLimit-Reset`, and `Retry-After`.
 */
export function createRateLimit(config: RateLimitConfig) {
  return function rateLimitMiddleware(request: NextRequest) {
    const ip =
      request.headers.get('x-forwarded-for')?.split(',')[0] ||
      request.headers.get('x-real-ip') ||
      'anonymous';
    const now = Date.now();
    const windowMs = config.windowMs;
    const maxRequests = config.maxRequests;

    // Get or create rate limit entry for this IP
    let entry = rateLimitStore.get(ip);

    if (!entry || now > entry.resetTime) {
      // Create new entry or reset existing one
      entry = {
        count: 0,
        resetTime: now + windowMs,
      };
      rateLimitStore.set(ip, entry);
    }

    // Increment counter first
    entry.count++;

    // Check if rate limit exceeded
    if (entry.count > maxRequests) {
      const resetIn = Math.ceil((entry.resetTime - now) / 1000);

      return NextResponse.json(
        {
          error: 'Too many requests',
          retryAfter: resetIn,
        },
        {
          status: 429,
          headers: {
            'X-RateLimit-Limit': maxRequests.toString(),
            'X-RateLimit-Remaining': '0',
            'X-RateLimit-Reset': entry.resetTime.toString(),
            'Retry-After': resetIn.toString(),
          },
        },
      );
    }

    // Create response with rate limit headers
    const response = NextResponse.next();
    response.headers.set('X-RateLimit-Limit', maxRequests.toString());
    response.headers.set(
      'X-RateLimit-Remaining',
      (maxRequests - entry.count).toString(),
    );
    response.headers.set('X-RateLimit-Reset', entry.resetTime.toString());

    return response;
  };
}

// Pre-configured rate limiters for different use cases
export const apiRateLimit = createRateLimit({
  windowMs: 60 * 1000, // 1 minute
  maxRequests: 100, // 100 requests per minute
});

export const authRateLimit = createRateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  maxRequests: 5, // 5 auth attempts per 15 minutes
});

export const chatRateLimit = createRateLimit({
  windowMs: 60 * 1000, // 1 minute
  maxRequests: 20, // 20 chat requests per minute
});

// Cleanup old entries periodically (simple cleanup)
setInterval(() => {
  const now = Date.now();
  for (const [ip, entry] of rateLimitStore.entries()) {
    if (now > entry.resetTime) {
      rateLimitStore.delete(ip);
    }
  }
}, 60 * 1000); // Cleanup every minute



================================================
FILE: src/lib/utils.ts
================================================
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
FILE: unit-tests/middleware.test.ts
================================================
import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'
import { NextRequest } from 'next/server'

// Mock the dependencies
vi.mock('next/server', () => ({
  NextResponse: {
    next: vi.fn(() => {
      const headers = new Headers()
      return {
        headers,
        status: 200,
        get: (name: string) => headers.get(name),
        set: (name: string, value: string) => headers.set(name, value),
      }
    }),
    redirect: vi.fn((url) => {
      const headers = new Headers([['location', url.toString()]])
      return {
        headers,
        status: 307,
        get: (name: string) => headers.get(name),
        set: (name: string, value: string) => headers.set(name, value),
      }
    }),
  },
}))

vi.mock('better-auth/cookies', () => ({
  getSessionCookie: vi.fn(),
}))

describe('middleware', () => {
  let mockGetSessionCookie: ReturnType<typeof vi.fn>

  beforeEach(async () => {
    vi.resetModules()

    // Get mocked functions
    const { getSessionCookie } = await import('better-auth/cookies')

    mockGetSessionCookie = getSessionCookie as ReturnType<typeof vi.fn>

    // Default mock implementations
    mockGetSessionCookie.mockReturnValue('session-cookie-value')
  })

  afterEach(() => {
    vi.clearAllMocks()
  })

  function createMockRequest(pathname: string = '/'): NextRequest {
    const url = `http://localhost:3000${pathname}`
    return {
      url,
      nextUrl: new URL(url),
      headers: new Headers(),
      method: 'GET',
    } as NextRequest
  }

  // Arcjet protection tests removed since middleware doesn't use Arcjet

  describe('authentication for protected routes', () => {
    it('should check session for dashboard routes', async () => {
      mockGetSessionCookie.mockReturnValue(null)

      const { middleware } = await import('../middleware')
      const request = createMockRequest('/dashboard')

      await middleware(request)

      expect(mockGetSessionCookie).toHaveBeenCalledWith(request)
    })

    it('should redirect to home when accessing dashboard without session', async () => {
      mockGetSessionCookie.mockReturnValue(null)

      const { middleware } = await import('../middleware')
      const request = createMockRequest('/dashboard')

      const response = await middleware(request)

      expect(response.status).toBe(307) // Redirect
      expect(response.headers.get('location')).toBe('http://localhost:3000/')
    })

    it('should allow dashboard access with valid session', async () => {
      mockGetSessionCookie.mockReturnValue('valid-session-cookie')

      const { middleware } = await import('../middleware')
      const request = createMockRequest('/dashboard')

      const response = await middleware(request)

      expect(response.status).not.toBe(307)
    })

    it('should allow dashboard sub-routes with session', async () => {
      mockGetSessionCookie.mockReturnValue('valid-session-cookie')

      const { middleware } = await import('../middleware')
      const request = createMockRequest('/dashboard/settings')

      const response = await middleware(request)

      expect(response.status).not.toBe(307)
    })

    it('should not check session for non-protected routes', async () => {
      const { middleware } = await import('../middleware')
      const request = createMockRequest('/')

      const response = await middleware(request)

      // Should proceed without redirect even with no session
      expect(response.status).not.toBe(307)
    })

    it('should allow public routes without session', async () => {
      mockGetSessionCookie.mockReturnValue(null)

      const { middleware } = await import('../middleware')
      const publicRoutes = ['/', '/about', '/pricing', '/contact']

      for (const route of publicRoutes) {
        const request = createMockRequest(route)
        const response = await middleware(request)
        
        expect(response.status).not.toBe(307)
      }
    })
  })

  describe('security headers', () => {
    it('should add X-Frame-Options header', async () => {
      const { middleware } = await import('../middleware')
      const request = createMockRequest('/')

      const response = await middleware(request)

      expect(response.headers.get('X-Frame-Options')).toBe('DENY')
    })

    it('should add X-Content-Type-Options header', async () => {
      const { middleware } = await import('../middleware')
      const request = createMockRequest('/')

      const response = await middleware(request)

      expect(response.headers.get('X-Content-Type-Options')).toBe('nosniff')
    })

    it('should add Referrer-Policy header', async () => {
      const { middleware } = await import('../middleware')
      const request = createMockRequest('/')

      const response = await middleware(request)

      expect(response.headers.get('Referrer-Policy')).toBe('strict-origin-when-cross-origin')
    })

    it('should add Permissions-Policy header', async () => {
      const { middleware } = await import('../middleware')
      const request = createMockRequest('/')

      const response = await middleware(request)

      const permissionsPolicy = response.headers.get('Permissions-Policy')
      expect(permissionsPolicy).toBeDefined()
      expect(permissionsPolicy).toContain('geolocation=()')
      expect(permissionsPolicy).toContain('microphone=()')
      expect(permissionsPolicy).toContain('camera=()')
    })

    it('should add all security headers to non-API responses', async () => {
       const { middleware } = await import('../middleware')
       const routes = ['/', '/about', '/dashboard']

       for (const route of routes) {
         const request = createMockRequest(route)
         const response = await middleware(request)

         expect(response.headers.get('X-Frame-Options')).toBe('DENY')
         expect(response.headers.get('X-Content-Type-Options')).toBe('nosniff')
         expect(response.headers.get('Referrer-Policy')).toBe('strict-origin-when-cross-origin')
         expect(response.headers.get('Permissions-Policy')).toBeTruthy()
       }
     })

     it('should add basic security headers to API responses', async () => {
       const { middleware } = await import('../middleware')
       const request = createMockRequest('/api/test')
       const response = await middleware(request)

       // API routes should only have basic headers, not all security headers
       expect(response.headers.get('X-Content-Type-Options')).toBe('nosniff')
       expect(response.headers.get('Referrer-Policy')).toBe('strict-origin-when-cross-origin')
       expect(response.headers.get('X-Frame-Options')).toBeNull()
       expect(response.headers.get('Permissions-Policy')).toBeNull()
     })
  })

  describe('middleware execution order', () => {
    it('should check authentication for protected routes', async () => {
      mockGetSessionCookie.mockReturnValue(null)

      const { middleware } = await import('../middleware')
      const request = createMockRequest('/dashboard')

      const response = await middleware(request)

      expect(mockGetSessionCookie).toHaveBeenCalled()
      expect(response.status).toBe(307) // Redirect for no session
    })

    it('should add security headers after authentication check', async () => {
      mockGetSessionCookie.mockReturnValue('valid-session')

      const { middleware } = await import('../middleware')
      const request = createMockRequest('/dashboard')

      const response = await middleware(request)

      expect(response.headers.get('X-Frame-Options')).toBe('DENY')
      expect(response.headers.get('X-Content-Type-Options')).toBe('nosniff')
      expect(response.headers.get('Referrer-Policy')).toBe('strict-origin-when-cross-origin')
      expect(response.headers.get('Permissions-Policy')).toBeTruthy()
    })
  })

  describe('edge cases', () => {
    it('should handle empty pathname', async () => {
      const { middleware } = await import('../middleware')
      const request = createMockRequest('')

      const response = await middleware(request)

      expect(response).toBeDefined()
    })

    it('should handle dashboard with trailing slash', async () => {
      mockGetSessionCookie.mockReturnValue(null)

      const { middleware } = await import('../middleware')
      const request = createMockRequest('/dashboard/')

      const response = await middleware(request)

      expect(response.status).toBe(307)
    })

    it('should handle case-sensitive dashboard path', async () => {
      mockGetSessionCookie.mockReturnValue(null)

      const { middleware } = await import('../middleware')
      const request = createMockRequest('/dashboard')

      const response = await middleware(request)

      expect(response.status).toBe(307)
    })

    it('should not treat /dashboards as protected', async () => {
       mockGetSessionCookie.mockReturnValue(null)

       const { middleware } = await import('../middleware')
       const request = createMockRequest('/dashboards')

       const response = await middleware(request)

       // Should not redirect since it's not /dashboard (middleware only protects /dashboard)
       expect(response.status).not.toBe(307)
       // Should proceed normally with security headers
       expect(response.headers.get('X-Frame-Options')).toBe('DENY')
     })

    it('should handle very long paths', async () => {
      const longPath = '/dashboard/' + 'a'.repeat(1000)
      mockGetSessionCookie.mockReturnValue('valid-session')

      const { middleware } = await import('../middleware')
      const request = createMockRequest(longPath)

      const response = await middleware(request)

      expect(response).toBeDefined()
    })
  })

  describe('error handling', () => {
    it('should handle getSessionCookie errors', async () => {
      mockGetSessionCookie.mockImplementation(() => {
        throw new Error('Cookie parsing error')
      })

      const { middleware } = await import('../middleware')
      const request = createMockRequest('/dashboard')

      await expect(middleware(request)).rejects.toThrow('Cookie parsing error')
    })
  })
})


================================================
FILE: unit-tests/next.config.test.ts
================================================
import { describe, it, expect } from 'vitest'
import nextConfig from '../next.config'

describe('next.config', () => {
  describe('images configuration', () => {
    it('should have remote patterns configured', () => {
      expect(nextConfig.images).toBeDefined()
      expect(nextConfig.images?.remotePatterns).toBeDefined()
      expect(Array.isArray(nextConfig.images?.remotePatterns)).toBe(true)
    })

    it('should allow images.unsplash.com', () => {
      const patterns = nextConfig.images?.remotePatterns || []
      const unsplashPattern = patterns.find(
        p => p.hostname === 'images.unsplash.com'
      )
      
      expect(unsplashPattern).toBeDefined()
      expect(unsplashPattern?.protocol).toBe('https')
    })

    it('should allow html.tailus.io with specific pathname', () => {
      const patterns = nextConfig.images?.remotePatterns || []
      const tailusPattern = patterns.find(
        p => p.hostname === 'html.tailus.io'
      )
      
      expect(tailusPattern).toBeDefined()
      expect(tailusPattern?.protocol).toBe('https')
      expect(tailusPattern?.pathname).toBe('/blocks/customers/**')
    })

    it('should allow ik.imagekit.io', () => {
      const patterns = nextConfig.images?.remotePatterns || []
      const imagekitPattern = patterns.find(
        p => p.hostname === 'ik.imagekit.io'
      )
      
      expect(imagekitPattern).toBeDefined()
      expect(imagekitPattern?.protocol).toBe('https')
    })

    it('should have modern image formats configured', () => {
      expect(nextConfig.images?.formats).toContain('image/webp')
      expect(nextConfig.images?.formats).toContain('image/avif')
    })

    it('should have appropriate device sizes', () => {
      expect(nextConfig.images?.deviceSizes).toBeDefined()
      expect(nextConfig.images?.deviceSizes).toContain(640)
      expect(nextConfig.images?.deviceSizes).toContain(750)
      expect(nextConfig.images?.deviceSizes).toContain(1080)
      expect(nextConfig.images?.deviceSizes).toContain(1920)
    })

    it('should have appropriate image sizes', () => {
      expect(nextConfig.images?.imageSizes).toBeDefined()
      expect(nextConfig.images?.imageSizes).toContain(16)
      expect(nextConfig.images?.imageSizes).toContain(32)
      expect(nextConfig.images?.imageSizes).toContain(256)
    })
  })

  describe('compression', () => {
    it('should have compression enabled', () => {
      expect(nextConfig.compress).toBe(true)
    })
  })

  describe('experimental features', () => {
    it('should have CSS optimization enabled', () => {
      expect(nextConfig.experimental?.optimizeCss).toBe(true)
    })

    it('should optimize package imports', () => {
      expect(nextConfig.experimental?.optimizePackageImports).toBeDefined()
      expect(nextConfig.experimental?.optimizePackageImports).toContain('lucide-react')
      expect(nextConfig.experimental?.optimizePackageImports).toContain('@radix-ui/react-icons')
    })
  })

  describe('security headers', () => {
    it('should define headers function', () => {
      expect(nextConfig.headers).toBeDefined()
      expect(typeof nextConfig.headers).toBe('function')
    })

    it('should return headers for all routes', async () => {
      if (nextConfig.headers) {
        const headers = await nextConfig.headers()
        expect(Array.isArray(headers)).toBe(true)
        expect(headers.length).toBeGreaterThan(0)
      }
    })

    it('should have basic security headers for all routes', async () => {
      if (nextConfig.headers) {
        const headers = await nextConfig.headers()
        const allRoutes = headers.find(h => h.source === '/(.*)')
        
        expect(allRoutes).toBeDefined()
        expect(allRoutes?.headers).toBeDefined()

        const headerKeys = allRoutes?.headers.map(h => h.key) || []
        
        expect(headerKeys).toContain('X-Frame-Options')
        expect(headerKeys).toContain('X-Content-Type-Options')
        expect(headerKeys).toContain('X-XSS-Protection')
        expect(headerKeys).toContain('Referrer-Policy')
        expect(headerKeys).toContain('Permissions-Policy')
        expect(headerKeys).toContain('Content-Security-Policy')
        expect(headerKeys).toContain('Strict-Transport-Security')
      }
    })

    it('should have correct X-Frame-Options value', async () => {
      if (nextConfig.headers) {
        const headers = await nextConfig.headers()
        const allRoutes = headers.find(h => h.source === '/(.*)')
        const xFrameOptions = allRoutes?.headers.find(h => h.key === 'X-Frame-Options')
        
        expect(xFrameOptions?.value).toBe('DENY')
      }
    })

    it('should have correct X-Content-Type-Options value', async () => {
      if (nextConfig.headers) {
        const headers = await nextConfig.headers()
        const allRoutes = headers.find(h => h.source === '/(.*)')
        const contentTypeOptions = allRoutes?.headers.find(h => h.key === 'X-Content-Type-Options')
        
        expect(contentTypeOptions?.value).toBe('nosniff')
      }
    })

    it('should have strict HSTS header', async () => {
      if (nextConfig.headers) {
        const headers = await nextConfig.headers()
        const allRoutes = headers.find(h => h.source === '/(.*)')
        const hsts = allRoutes?.headers.find(h => h.key === 'Strict-Transport-Security')
        
        expect(hsts?.value).toContain('max-age=31536000')
        expect(hsts?.value).toContain('includeSubDomains')
        expect(hsts?.value).toContain('preload')
      }
    })

    it('should have Content-Security-Policy', async () => {
      if (nextConfig.headers) {
        const headers = await nextConfig.headers()
        const allRoutes = headers.find(h => h.source === '/(.*)')
        const csp = allRoutes?.headers.find(h => h.key === 'Content-Security-Policy')
        
        expect(csp).toBeDefined()
        expect(csp?.value).toContain("default-src 'self'")
        expect(csp?.value).toContain("frame-ancestors 'none'")
      }
    })

    it('should have Permissions-Policy', async () => {
      if (nextConfig.headers) {
        const headers = await nextConfig.headers()
        const allRoutes = headers.find(h => h.source === '/(.*)')
        const permissionsPolicy = allRoutes?.headers.find(h => h.key === 'Permissions-Policy')
        
        expect(permissionsPolicy).toBeDefined()
        expect(permissionsPolicy?.value).toContain('geolocation=()')
        expect(permissionsPolicy?.value).toContain('microphone=()')
        expect(permissionsPolicy?.value).toContain('camera=()')
      }
    })

    it('should have stricter security for API routes', async () => {
      if (nextConfig.headers) {
        const headers = await nextConfig.headers()
        const apiRoutes = headers.find(h => h.source === '/api/:path*')
        
        expect(apiRoutes).toBeDefined()
        expect(apiRoutes?.headers).toBeDefined()

        const csp = apiRoutes?.headers.find(h => h.key === 'Content-Security-Policy')
        expect(csp?.value).toContain("default-src 'none'")
        expect(csp?.value).toContain("frame-ancestors 'none'")
      }
    })
  })

  describe('configuration structure', () => {
    it('should be a valid Next.js config object', () => {
      expect(typeof nextConfig).toBe('object')
      expect(nextConfig).not.toBeNull()
    })

    it('should not have syntax errors', () => {
      expect(() => {
        JSON.stringify(nextConfig, (key, value) => {
          if (typeof value === 'function') {
            return '[Function]'
          }
          return value
        })
      }).not.toThrow()
    })
  })
})


================================================
FILE: unit-tests/setup.ts
================================================
import '@testing-library/jest-dom'
import { config } from 'dotenv'
import React from 'react'
import { vi } from 'vitest'

// Load environment variables from .env file
config()

// Set test-specific environment variables
process.env.ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || 'test-key-32-chars-long-for-aes256!!!'
process.env.POLAR_PRODUCT_FREE = process.env.POLAR_PRODUCT_FREE || 'free_product_id'
process.env.POLAR_PRODUCT_PRO = process.env.POLAR_PRODUCT_PRO || 'pro_product_id'
process.env.POLAR_PRODUCT_STARTUP = process.env.POLAR_PRODUCT_STARTUP || 'startup_product_id'

// Make React available globally for tests
global.React = React

// Mock window.matchMedia for component tests
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: vi.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: vi.fn(), // deprecated
    removeListener: vi.fn(), // deprecated
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
    dispatchEvent: vi.fn(),
  })),
})


================================================
FILE: unit-tests/sw.test.ts
================================================
import { describe, it, expect, beforeEach } from 'vitest'
import fs from 'fs'
import path from 'path'

describe('service worker (sw.js)', () => {
  let swCode: string

  beforeEach(() => {
    // Read the service worker code
    swCode = fs.readFileSync(path.join(process.cwd(), 'public/sw.js'), 'utf-8')
  })

  describe('constants and configuration', () => {
    it('should define CACHE_NAME', () => {
      expect(swCode).toContain('CACHE_NAME')
      expect(swCode).toMatch(/CACHE_NAME\s*=\s*['"]nextjs-starterkit-v1['"]/)
    })

    it('should define STATIC_ASSETS array', () => {
      expect(swCode).toContain('STATIC_ASSETS')
      expect(swCode).toContain('[')
    })

    it('should include root path in static assets', () => {
      expect(swCode).toMatch(/['"]\/['"]/)
    })

    it('should include favicon in static assets', () => {
      expect(swCode).toMatch(/['"]\/favicon\.ico['"]/)
    })
  })

  describe('event listeners', () => {
    it('should register install event listener', () => {
      expect(swCode).toContain('addEventListener')
      expect(swCode).toMatch(/addEventListener\s*\(\s*['"]install['"]/)
    })

    it('should register activate event listener', () => {
      expect(swCode).toMatch(/addEventListener\s*\(\s*['"]activate['"]/)
    })

    it('should register fetch event listener', () => {
      expect(swCode).toMatch(/addEventListener\s*\(\s*['"]fetch['"]/)
    })
  })

  describe('install event', () => {
    it('should use event.waitUntil in install handler', () => {
      expect(swCode).toMatch(/event\.waitUntil/)
    })

    it('should open cache in install handler', () => {
      expect(swCode).toMatch(/caches\.open\s*\(\s*CACHE_NAME\s*\)/)
    })

    it('should add static assets to cache', () => {
      expect(swCode).toMatch(/cache\.addAll/)
    })

    it('should log cache message', () => {
      expect(swCode).toContain('Caching static assets')
    })
  })

  describe('activate event', () => {
    it('should use event.waitUntil in activate handler', () => {
      expect(swCode).toMatch(/event\.waitUntil/)
    })

    it('should get all cache keys', () => {
      expect(swCode).toMatch(/caches\.keys\s*\(\s*\)/)
    })

    it('should delete old caches', () => {
      expect(swCode).toMatch(/caches\.delete/)
    })

    it('should log deletion of old cache', () => {
      expect(swCode).toContain('Deleting old cache')
    })
  })

  describe('fetch event', () => {
    it('should comment about handling GET requests', () => {
      expect(swCode).toMatch(/Only handle GET/i)
    })

    it('should use event.respondWith for fetch handling', () => {
      expect(swCode).toMatch(/event\.respondWith/)
    })
  })

  describe('code quality', () => {
    it('should use self instead of window', () => {
      expect(swCode).toContain('self')
      expect(swCode).toMatch(/self\.addEventListener/)
    })

    it('should have ESLint disable comment for no-undef', () => {
      expect(swCode).toContain('eslint-disable no-undef')
    })

    it('should use promises (then/catch) or async/await', () => {
      const hasPromises = swCode.includes('.then(') || swCode.includes('await ')
      expect(hasPromises).toBe(true)
    })

    it('should not have syntax errors', async () => {
      // Use a proper parser that supports top-level script syntax
      const { parse } = await import('@babel/parser')
      expect(() => {
        parse(swCode, { sourceType: 'script' })
      }).not.toThrow()
    })
  })

  describe('cache management', () => {
    it('should use versioned cache name for invalidation', () => {
      expect(swCode).toMatch(/v\d+/)
    })

    it('should handle cache open operation', () => {
      expect(swCode).toMatch(/caches\.open/)
    })

    it('should handle cache match operation', () => {
      expect(swCode).toMatch(/caches\.match/)
    })

    it('should handle cache put operation', () => {
      expect(swCode).toMatch(/cache\.put/)
    })
  })

  describe('network handling', () => {
    it('should handle fetch requests', () => {
      expect(swCode).toMatch(/fetch\s*\(/)
    })

    it('should have cache-first or network-first strategy', () => {
      const hasCachesMatch = swCode.includes('caches.match')
      const hasFetch = swCode.includes('fetch(')

      expect(hasCachesMatch || hasFetch).toBe(true)
    })
  })

  describe('error handling', () => {
    it('should include error handling with catch or try-catch', () => {
      // The service worker handles errors implicitly by checking response status
      // and response type before caching
      const hasErrorHandling = swCode.includes('response.status !== 200') ||
                               swCode.includes('response.type !== \'basic\'')
      expect(hasErrorHandling).toBe(true)
    })
  })

  describe('logging', () => {
    it('should use console.log for debugging', () => {
      expect(swCode).toMatch(/console\.log/)
    })

    it('should log service worker actions', () => {
      const logMessages = swCode.match(/console\.log\s*\(/g)
      expect(logMessages).toBeTruthy()
      expect(logMessages!.length).toBeGreaterThan(0)
    })
  })

  describe('best practices', () => {
    it('should use waitUntil for async operations', () => {
      expect(swCode).toMatch(/waitUntil/)
    })

    it('should use Promise.all for batch operations', () => {
      expect(swCode).toMatch(/Promise\.all/)
    })

    it('should clean up resources in activate', () => {
      expect(swCode).toMatch(/caches\.delete/)
    })
  })

  describe('file structure', () => {
    it('should be a valid JavaScript file', () => {
      expect(swCode).toBeTruthy()
      expect(swCode.length).toBeGreaterThan(0)
    })

    it('should have proper comments', () => {
      expect(swCode).toMatch(/\/\/.*Service Worker/i)
    })

    it('should not exceed reasonable size', () => {
      // Service workers should be small and focused
      expect(swCode.length).toBeLessThan(10000)
    })
  })

  describe('cache strategies', () => {
    it('should define static assets to cache', () => {
      expect(swCode).toContain('STATIC_ASSETS')
    })

    it('should cache essential files', () => {
      const hasFavicon = swCode.includes('favicon.ico')
      const hasRoot = swCode.match(/['"]\//g)

      expect(hasFavicon || hasRoot).toBe(true)
    })
  })
})


================================================
FILE: unit-tests/components/data-table.test.ts
================================================
import { describe, it, expect } from 'vitest'
import { schema } from '@/components/data-table'

describe('data-table schema', () => {
  describe('schema validation', () => {
    it('should validate a valid data object', () => {
      const validData = {
        id: 1,
        header: 'Test Header',
        type: 'Table of Contents',
        status: 'Done',
        target: '100',
        limit: '50',
        reviewer: 'John Doe',
      }

      const result = schema.safeParse(validData)
      expect(result.success).toBe(true)
      expect(result.data).toEqual(validData)
    })

    it('should validate with different valid values', () => {
      const validData = {
        id: 42,
        header: 'Another Header',
        type: 'Executive Summary',
        status: 'In Progress',
        target: '200',
        limit: '75',
        reviewer: 'Jane Smith',
      }

      const result = schema.safeParse(validData)
      expect(result.success).toBe(true)
      expect(result.data).toEqual(validData)
    })

    it('should reject invalid id (string instead of number)', () => {
      const invalidData = {
        id: '1', // Should be number
        header: 'Test Header',
        type: 'Table of Contents',
        status: 'Done',
        target: '100',
        limit: '50',
        reviewer: 'John Doe',
      }

      const result = schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      expect(result.error?.issues).toContainEqual(
        expect.objectContaining({
          code: 'invalid_type',
          expected: 'number',
          path: ['id'],
        })
      )
    })

    it('should reject missing required fields', () => {
      const incompleteData = {
        id: 1,
        header: 'Test Header',
        // Missing type, status, target, limit, reviewer
      }

      const result = schema.safeParse(incompleteData)
      expect(result.success).toBe(false)
      expect(result.error?.issues.length).toBeGreaterThan(0)
    })

    it('should reject invalid header (number instead of string)', () => {
      const invalidData = {
        id: 1,
        header: 123, // Should be string
        type: 'Table of Contents',
        status: 'Done',
        target: '100',
        limit: '50',
        reviewer: 'John Doe',
      }

      const result = schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      expect(result.error?.issues).toContainEqual(
        expect.objectContaining({
          code: 'invalid_type',
          expected: 'string',
          path: ['header'],
        })
      )
    })

    it('should accept empty strings for string fields', () => {
      const dataWithEmptyStrings = {
        id: 1,
        header: '',
        type: '',
        status: '',
        target: '',
        limit: '',
        reviewer: '',
      }

      const result = schema.safeParse(dataWithEmptyStrings)
      expect(result.success).toBe(true)
      expect(result.data).toEqual(dataWithEmptyStrings)
    })

    it('should reject null values', () => {
      const dataWithNulls = {
        id: null,
        header: null,
        type: null,
        status: null,
        target: null,
        limit: null,
        reviewer: null,
      }

      const result = schema.safeParse(dataWithNulls)
      expect(result.success).toBe(false)
      expect(result.error?.issues.length).toBe(7) // All fields should fail
    })

    it('should reject undefined values', () => {
      const dataWithUndefined = {
        id: undefined,
        header: undefined,
        type: undefined,
        status: undefined,
        target: undefined,
        limit: undefined,
        reviewer: undefined,
      }

      const result = schema.safeParse(dataWithUndefined)
      expect(result.success).toBe(false)
      expect(result.error?.issues.length).toBe(7) // All fields should fail
    })

    it('should handle decimal numbers for id', () => {
      const dataWithDecimal = {
        id: 1.5,
        header: 'Test Header',
        type: 'Table of Contents',
        status: 'Done',
        target: '100',
        limit: '50',
        reviewer: 'John Doe',
      }

      const result = schema.safeParse(dataWithDecimal)
      expect(result.success).toBe(true)
      expect(result.data?.id).toBe(1.5)
    })

    it('should handle negative numbers for id', () => {
      const dataWithNegative = {
        id: -1,
        header: 'Test Header',
        type: 'Table of Contents',
        status: 'Done',
        target: '100',
        limit: '50',
        reviewer: 'John Doe',
      }

      const result = schema.safeParse(dataWithNegative)
      expect(result.success).toBe(true)
      expect(result.data?.id).toBe(-1)
    })

    it('should handle zero for id', () => {
      const dataWithZero = {
        id: 0,
        header: 'Test Header',
        type: 'Table of Contents',
        status: 'Done',
        target: '100',
        limit: '50',
        reviewer: 'John Doe',
      }

      const result = schema.safeParse(dataWithZero)
      expect(result.success).toBe(true)
      expect(result.data?.id).toBe(0)
    })

    it('should handle special characters in strings', () => {
      const dataWithSpecialChars = {
        id: 1,
        header: 'Header with @#$%^&*()',
        type: 'Type with éñü',
        status: 'Status with 123',
        target: 'Target with spaces',
        limit: 'Limit with - and _',
        reviewer: 'Reviewer with . and ,',
      }

      const result = schema.safeParse(dataWithSpecialChars)
      expect(result.success).toBe(true)
      expect(result.data).toEqual(dataWithSpecialChars)
    })

    it('should handle very long strings', () => {
      const longString = 'A'.repeat(10000)
      const dataWithLongStrings = {
        id: 1,
        header: longString,
        type: longString,
        status: longString,
        target: longString,
        limit: longString,
        reviewer: longString,
      }

      const result = schema.safeParse(dataWithLongStrings)
      expect(result.success).toBe(true)
      expect(result.data?.header).toBe(longString)
    })
  })

})


================================================
FILE: unit-tests/components/performance-monitor.test.tsx
================================================
import React from 'react'
import { describe, it, expect, beforeEach, vi } from 'vitest'
import { render } from '@testing-library/react'
import { PerformanceMonitor } from '@/components/performance-monitor'

// Mock the usePerformance hook
const mockUsePerformance = vi.fn()
vi.mock('@/hooks/use-performance', () => ({
  usePerformance: () => mockUsePerformance()
}))

// Mock console.log to capture logs
const consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => {})

describe('PerformanceMonitor', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  it('should render without crashing', () => {
    mockUsePerformance.mockReturnValue({
      metrics: {},
      isLoading: false,
      getLCPRating: () => 'good',
      getFCPRating: () => 'good',
      getTTFBRating: () => 'good'
    })

    render(<PerformanceMonitor />)

    // Component should render without errors (it renders null)
    expect(document.body).toBeInTheDocument()
  })

  it('should log performance metrics when LCP is available and not loading', () => {
    const mockMetrics = {
      lcp: 1500,
      fcp: 800,
      ttfb: 100,
      loadTime: 2000
    }

    mockUsePerformance.mockReturnValue({
      metrics: mockMetrics,
      isLoading: false,
      getLCPRating: () => 'good',
      getFCPRating: () => 'good',
      getTTFBRating: () => 'good'
    })

    render(<PerformanceMonitor />)

    expect(consoleSpy).toHaveBeenCalledWith('🚀 Performance Metrics:', {
      LCP: '1500.00ms (good)',
      FCP: '800.00ms (good)',
      TTFB: '100.00ms (good)',
      LoadTime: '2000.00ms'
    })
  })

  it('should not log when still loading', () => {
    mockUsePerformance.mockReturnValue({
      metrics: { lcp: 1500 },
      isLoading: true,
      getLCPRating: () => 'good',
      getFCPRating: () => 'good',
      getTTFBRating: () => 'good'
    })

    render(<PerformanceMonitor />)

    expect(consoleSpy).not.toHaveBeenCalled()
  })

  it('should not log when LCP is not available', () => {
    mockUsePerformance.mockReturnValue({
      metrics: { fcp: 800, ttfb: 100 },
      isLoading: false,
      getLCPRating: () => 'good',
      getFCPRating: () => 'good',
      getTTFBRating: () => 'good'
    })

    render(<PerformanceMonitor />)

    expect(consoleSpy).not.toHaveBeenCalled()
  })

  it('should handle missing optional metrics', () => {
    mockUsePerformance.mockReturnValue({
      metrics: { lcp: 1500 }, // Only LCP available
      isLoading: false,
      getLCPRating: () => 'good',
      getFCPRating: () => 'good',
      getTTFBRating: () => 'good'
    })

    render(<PerformanceMonitor />)

    expect(consoleSpy).toHaveBeenCalledWith('🚀 Performance Metrics:', {
      LCP: '1500.00ms (good)',
      FCP: 'Not available',
      TTFB: 'Not available',
      LoadTime: 'Not available'
    })
  })

  it('should handle zero values correctly', () => {
    mockUsePerformance.mockReturnValue({
      metrics: { lcp: 0, fcp: 0, ttfb: 0, loadTime: 0 },
      isLoading: false,
      getLCPRating: () => 'good',
      getFCPRating: () => 'good',
      getTTFBRating: () => 'good'
    })

    render(<PerformanceMonitor />)

    // When LCP is 0, the condition `!isLoading && metrics.lcp` is false, so no logging occurs
    expect(consoleSpy).not.toHaveBeenCalled()
  })

  it('should handle different rating values', () => {
    mockUsePerformance.mockReturnValue({
      metrics: { lcp: 5000, fcp: 3000, ttfb: 800 },
      isLoading: false,
      getLCPRating: () => 'poor',
      getFCPRating: () => 'needs-improvement',
      getTTFBRating: () => 'poor'
    })

    render(<PerformanceMonitor />)

    expect(consoleSpy).toHaveBeenCalledWith('🚀 Performance Metrics:', {
      LCP: '5000.00ms (poor)',
      FCP: '3000.00ms (needs-improvement)',
      TTFB: '800.00ms (poor)',
      LoadTime: 'Not available'
    })
  })
})


================================================
FILE: unit-tests/components/theme-provider.test.tsx
================================================
import React from 'react'
import { describe, it, expect } from 'vitest'
import { render, screen } from '@testing-library/react'
import { ThemeProvider } from '@/components/theme-provider'

// Mock matchMedia

describe('ThemeProvider', () => {
  it('should render children correctly', () => {
    render(
      <ThemeProvider>
        <div data-testid="child">Test Child</div>
      </ThemeProvider>
    )

    expect(screen.getByTestId('child')).toBeInTheDocument()
    expect(screen.getByText('Test Child')).toBeInTheDocument()
  })

  it('should pass through props to NextThemesProvider', () => {
    render(
      <ThemeProvider
        attribute="class"
        defaultTheme="dark"
        enableSystem
        disableTransitionOnChange
      >
        <div>Test</div>
      </ThemeProvider>
    )

    // The component should render without errors when props are passed
    expect(screen.getByText('Test')).toBeInTheDocument()
  })

  it('should handle empty children', () => {
    render(<ThemeProvider></ThemeProvider>)

    // Should render without errors even with no children
    expect(document.body).toBeInTheDocument()
  })

  it('should handle multiple children', () => {
    render(
      <ThemeProvider>
        <div>First Child</div>
        <div>Second Child</div>
        <span>Third Child</span>
      </ThemeProvider>
    )

    expect(screen.getByText('First Child')).toBeInTheDocument()
    expect(screen.getByText('Second Child')).toBeInTheDocument()
    expect(screen.getByText('Third Child')).toBeInTheDocument()
  })
})


================================================
FILE: unit-tests/db/schema.test.ts
================================================
import { describe, it, expect } from 'vitest'
import { user, session, account, verification, subscription, schema } from '@/db/schema'

describe('database schema', () => {
  describe('table definitions', () => {
    it('should export all table definitions', () => {
      expect(user).toBeDefined()
      expect(session).toBeDefined()
      expect(account).toBeDefined()
      expect(verification).toBeDefined()
      expect(subscription).toBeDefined()
    })

    it('should be functions/objects representing tables', () => {
      expect(typeof user).toBe('object')
      expect(typeof session).toBe('object')
      expect(typeof account).toBe('object')
      expect(typeof verification).toBe('object')
      expect(typeof subscription).toBe('object')
    })
  })

  describe('user table structure', () => {
    it('should have all expected columns', () => {
      const columns = Object.keys(user)
      expect(columns).toContain('id')
      expect(columns).toContain('name')
      expect(columns).toContain('email')
      expect(columns).toContain('emailVerified')
      expect(columns).toContain('image')
      expect(columns).toContain('apiKeys')
      expect(columns).toContain('provider')
      expect(columns).toContain('createdAt')
      expect(columns).toContain('updatedAt')
    })

    it('should have correct number of columns', () => {
      expect(Object.keys(user)).toHaveLength(10) // includes enableRLS
    })
  })

  describe('session table structure', () => {
    it('should have all expected columns', () => {
      const columns = Object.keys(session)
      expect(columns).toContain('id')
      expect(columns).toContain('expiresAt')
      expect(columns).toContain('token')
      expect(columns).toContain('createdAt')
      expect(columns).toContain('updatedAt')
      expect(columns).toContain('ipAddress')
      expect(columns).toContain('userAgent')
      expect(columns).toContain('userId')
    })

    it('should have correct number of columns', () => {
      expect(Object.keys(session)).toHaveLength(9)
    })
  })

  describe('account table structure', () => {
    it('should have all expected columns', () => {
      const columns = Object.keys(account)
      expect(columns).toContain('id')
      expect(columns).toContain('accountId')
      expect(columns).toContain('providerId')
      expect(columns).toContain('userId')
      expect(columns).toContain('accessToken')
      expect(columns).toContain('refreshToken')
      expect(columns).toContain('idToken')
      expect(columns).toContain('accessTokenExpiresAt')
      expect(columns).toContain('refreshTokenExpiresAt')
      expect(columns).toContain('scope')
      expect(columns).toContain('password')
      expect(columns).toContain('createdAt')
      expect(columns).toContain('updatedAt')
    })

    it('should have correct number of columns', () => {
      expect(Object.keys(account)).toHaveLength(14)
    })
  })

  describe('verification table structure', () => {
    it('should have all expected columns', () => {
      const columns = Object.keys(verification)
      expect(columns).toContain('id')
      expect(columns).toContain('identifier')
      expect(columns).toContain('value')
      expect(columns).toContain('expiresAt')
      expect(columns).toContain('createdAt')
      expect(columns).toContain('updatedAt')
    })

    it('should have correct number of columns', () => {
      expect(Object.keys(verification)).toHaveLength(7)
    })
  })

  describe('subscription table structure', () => {
    it('should have all expected columns', () => {
      const columns = Object.keys(subscription)
      expect(columns).toContain('id')
      expect(columns).toContain('userId')
      expect(columns).toContain('polarSubscriptionId')
      expect(columns).toContain('polarCustomerId')
      expect(columns).toContain('status')
      expect(columns).toContain('plan')
      expect(columns).toContain('currentPeriodStart')
      expect(columns).toContain('currentPeriodEnd')
      expect(columns).toContain('cancelAtPeriodEnd')
      expect(columns).toContain('createdAt')
      expect(columns).toContain('updatedAt')
    })

    it('should have correct number of columns', () => {
      expect(Object.keys(subscription)).toHaveLength(12)
    })
  })

  describe('schema export', () => {
    it('should export all tables in schema object', () => {
      expect(schema).toHaveProperty('user')
      expect(schema).toHaveProperty('session')
      expect(schema).toHaveProperty('account')
      expect(schema).toHaveProperty('verification')
      expect(schema).toHaveProperty('subscription')
    })

    it('should have exactly 5 tables', () => {
      expect(Object.keys(schema)).toHaveLength(5)
    })

    it('should reference the correct table instances', () => {
      expect(schema.user).toBe(user)
      expect(schema.session).toBe(session)
      expect(schema.account).toBe(account)
      expect(schema.verification).toBe(verification)
      expect(schema.subscription).toBe(subscription)
    })
  })
})


================================================
FILE: unit-tests/hooks/use-mobile.test.ts
================================================
import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'
import { renderHook, act } from '@testing-library/react'
import { useIsMobile } from '@/hooks/use-mobile'

describe('use-mobile', () => {
  let mockMatchMedia: ReturnType<typeof vi.fn>
  let originalMatchMedia: typeof window.matchMedia

  beforeEach(() => {
    // Mock window.innerWidth
    Object.defineProperty(window, 'innerWidth', {
      writable: true,
      configurable: true,
      value: 1024,
    })

    // Mock matchMedia
    mockMatchMedia = vi.fn()
    originalMatchMedia = window.matchMedia
    window.matchMedia = mockMatchMedia
  })

  afterEach(() => {
    // Restore original matchMedia
    window.matchMedia = originalMatchMedia
    vi.restoreAllMocks()
  })

  describe('useIsMobile', () => {
    it('should return false for desktop width (1024px)', () => {
      // Mock matchMedia to return false for max-width: 767px
      mockMatchMedia.mockReturnValue({
        matches: false,
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
      })

      const { result } = renderHook(() => useIsMobile())

      expect(result.current).toBe(false)
    })

    it('should return true for mobile width (767px)', () => {
      // Set window width to mobile (767px is below breakpoint)
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 767,
      })

      // Mock matchMedia to return true for max-width: 767px
      mockMatchMedia.mockReturnValue({
        matches: true,
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
      })

      const { result } = renderHook(() => useIsMobile())

      expect(result.current).toBe(true)
    })

    it('should return true for small mobile width (375px)', () => {
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 375,
      })

      mockMatchMedia.mockReturnValue({
        matches: true,
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
      })

      const { result } = renderHook(() => useIsMobile())

      expect(result.current).toBe(true)
    })

    it('should update when window resizes', () => {
      const addEventListener = vi.fn()
      const removeEventListener = vi.fn()

      // Initially desktop
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 1024,
      })

      mockMatchMedia.mockReturnValue({
        matches: false, // Initially desktop
        addEventListener,
        removeEventListener,
      })

      const { result } = renderHook(() => useIsMobile())

      expect(result.current).toBe(false)

      // Simulate resize to mobile
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 767,
      })

      // Simulate resize event
      const changeCallback = addEventListener.mock.calls[0][1]
      act(() => {
        // Mock the media query change to mobile
        changeCallback({ matches: true })
      })

      expect(result.current).toBe(true)
    })

    it('should clean up event listeners on unmount', () => {
      const addEventListener = vi.fn()
      const removeEventListener = vi.fn()

      mockMatchMedia.mockReturnValue({
        matches: false,
        addEventListener,
        removeEventListener,
      })

      const { unmount } = renderHook(() => useIsMobile())

      expect(addEventListener).toHaveBeenCalledWith('change', expect.any(Function))

      unmount()

      expect(removeEventListener).toHaveBeenCalledWith('change', expect.any(Function))
    })

    it('should handle edge case at breakpoint (767px)', () => {
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 767,
      })

      mockMatchMedia.mockReturnValue({
        matches: true, // max-width: 767px should match
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
      })

      const { result } = renderHook(() => useIsMobile())

      expect(result.current).toBe(true)
    })

    it('should handle edge case just above breakpoint (768px)', () => {
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 768,
      })

      mockMatchMedia.mockReturnValue({
        matches: false, // max-width: 767px should not match
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
      })

      const { result } = renderHook(() => useIsMobile())

      expect(result.current).toBe(false)
    })
  })
})


================================================
FILE: unit-tests/hooks/use-performance.test.ts
================================================
import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'
import { renderHook, waitFor } from '@testing-library/react'
import { usePerformance } from '@/hooks/use-performance'

describe('use-performance', () => {
  let mockPerformance: {
    getEntriesByType: ReturnType<typeof vi.fn>
  }
  let originalReadyState: string
  let mockGtag: ReturnType<typeof vi.fn>
  let originalPerformance: typeof globalThis.performance
  let originalGtag: unknown

  beforeEach(() => {
    // Capture originals
    originalPerformance = global.performance
    originalGtag = (window as { gtag?: unknown }).gtag

    // Mock performance API
    mockPerformance = {
      getEntriesByType: vi.fn(),
    }
    Object.defineProperty(global, 'performance', {
      writable: true,
      configurable: true,
      value: mockPerformance,
    })

    // Save original document.readyState
    originalReadyState = document.readyState

    // Mock gtag
    mockGtag = vi.fn()
    Object.defineProperty(window, 'gtag', {
      writable: true,
      configurable: true,
      value: mockGtag,
    })
  })

  afterEach(() => {
    vi.restoreAllMocks()
    Object.defineProperty(document, 'readyState', {
      writable: true,
      configurable: true,
      value: originalReadyState,
    })
    // Restore originals
    Object.defineProperty(global, 'performance', {
      writable: true,
      configurable: true,
      value: originalPerformance,
    })
    Object.defineProperty(window, 'gtag', {
      writable: true,
      configurable: true,
      value: originalGtag,
    })
  })

  describe('usePerformance', () => {
    beforeEach(() => {
      // Reset mock for each test
      mockPerformance.getEntriesByType.mockReturnValue([])
    })

    it('should initialize with loading state', () => {
      // Set document to loading state to ensure hook starts with loading
      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'loading',
      })

      const { result } = renderHook(() => usePerformance())

      expect(result.current.isLoading).toBe(true)
      expect(result.current.metrics).toEqual({})
    })

    it('should collect LCP metric when available', async () => {
      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 200,
            loadEventStart: 1000,
            loadEventEnd: 1100,
          }]
        }
        if (type === 'paint') {
          return [{ name: 'first-contentful-paint', startTime: 500 }]
        }
        if (type === 'largest-contentful-paint') {
          return [{ startTime: 1500 }]
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.metrics.lcp).toBe(1500)
    })

    it('should collect FCP metric when available', async () => {
      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 200,
            loadEventStart: 1000,
            loadEventEnd: 1100,
          }]
        }
        if (type === 'paint') {
          return [{ name: 'first-contentful-paint', startTime: 800 }]
        }
        if (type === 'largest-contentful-paint') {
          return []
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.metrics.fcp).toBe(800)
    })

    it('should calculate TTFB from navigation timing', async () => {
      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 250,
            loadEventStart: 1000,
            loadEventEnd: 1100,
          }]
        }
        if (type === 'paint') {
          return []
        }
        if (type === 'largest-contentful-paint') {
          return []
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.metrics.ttfb).toBe(150) // 250 - 100
    })

    it('should calculate load time from navigation timing', async () => {
      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 200,
            loadEventStart: 1000,
            loadEventEnd: 1200,
            startTime: 1000, // Add startTime for loadTime calculation
          }]
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.metrics.loadTime).toBe(200) // 1200 - 1000
    })

    it('should handle missing metrics gracefully', async () => {
      mockPerformance.getEntriesByType.mockReturnValue([])

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.metrics).toEqual({})
    })

    it('should wait for load event if document not ready', async () => {
      let loadHandler: EventListenerOrEventListenerObject | null = null

      vi.spyOn(window, 'addEventListener')
        .mockImplementation((event: string, handler: EventListenerOrEventListenerObject) => {
          if (event === 'load') {
            loadHandler = handler
          }
        })

      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 200,
            loadEventStart: 1000,
            loadEventEnd: 1100,
          }]
        }
        if (type === 'paint') {
          return [{ name: 'first-contentful-paint', startTime: 500 }]
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'loading',
      })

      const { result } = renderHook(() => usePerformance())

      expect(result.current.isLoading).toBe(true)

      // Trigger the load event
      if (loadHandler && typeof loadHandler === 'function') {
        (loadHandler as () => void)()
      }

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.metrics.fcp).toBe(500)
    })
  })

  describe('getRating', () => {
    it('should rate LCP correctly', async () => {
      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'largest-contentful-paint') {
          return [{ startTime: 2000 }]
        }
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 200,
            loadEventStart: 1000,
            loadEventEnd: 1100,
          }]
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.getLCPRating()).toBe('good') // 2000ms is good
    })

    it('should rate LCP as needs-improvement', async () => {
      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'largest-contentful-paint') {
          return [{ startTime: 3000 }]
        }
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 200,
            loadEventStart: 1000,
            loadEventEnd: 1100,
          }]
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.getLCPRating()).toBe('needs-improvement') // 3000ms
    })

    it('should rate LCP as poor', async () => {
      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'largest-contentful-paint') {
          return [{ startTime: 5000 }]
        }
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 200,
            loadEventStart: 1000,
            loadEventEnd: 1100,
          }]
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.getLCPRating()).toBe('poor') // 5000ms
    })

    it('should rate FCP correctly', async () => {
      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'paint') {
          return [{ name: 'first-contentful-paint', startTime: 1500 }]
        }
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 200,
            loadEventStart: 1000,
            loadEventEnd: 1100,
          }]
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.getFCPRating()).toBe('good')
    })

    it('should rate TTFB correctly', async () => {
      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 700,
            loadEventStart: 1000,
            loadEventEnd: 1100,
          }]
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.getTTFBRating()).toBe('good') // 600ms
    })

    it('should return unknown rating when metric not available', () => {
      // Ensure performance API returns empty arrays
      mockPerformance.getEntriesByType.mockReturnValue([])

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      expect(result.current.getRating('lcp')).toBe('unknown')
      expect(result.current.getLCPRating()).toBe('unknown')
    })
  })

  describe('analytics integration', () => {
    it('should send metrics to gtag when available', async () => {
      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'largest-contentful-paint') {
          return [{ startTime: 2000 }]
        }
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 200,
            loadEventStart: 1000,
            loadEventEnd: 1100,
          }]
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      renderHook(() => usePerformance())

      await waitFor(() => {
        expect(mockGtag).toHaveBeenCalled()
      })

      expect(mockGtag).toHaveBeenCalledWith('event', 'web_vitals', {
        event_category: 'Web Vitals',
        event_label: 'LCP',
        value: 2000,
      })
    })

    it('should not crash if gtag is not available', async () => {
      Object.defineProperty(window, 'gtag', {
        writable: true,
        configurable: true,
        value: undefined,
      })

      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'largest-contentful-paint') {
          return [{ startTime: 2000 }]
        }
        if (type === 'navigation') {
          return [{
            requestStart: 100,
            responseStart: 200,
            loadEventStart: 1000,
            loadEventEnd: 1100,
          }]
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      expect(() => {
        renderHook(() => usePerformance())
      }).not.toThrow()
    })
  })

  describe('edge cases', () => {
    it('should handle boundary values for LCP rating', () => {
      // Mock empty performance API since we're testing static values
      mockPerformance.getEntriesByType.mockReturnValue([])

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      expect(result.current.getRating('lcp', 2500)).toBe('good')
      expect(result.current.getRating('lcp', 2501)).toBe('needs-improvement')
      expect(result.current.getRating('lcp', 4000)).toBe('needs-improvement')
      expect(result.current.getRating('lcp', 4001)).toBe('poor')
    })

    it('should handle boundary values for FCP rating', () => {
      // Mock empty performance API since we're testing static values
      mockPerformance.getEntriesByType.mockReturnValue([])

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      expect(result.current.getRating('fcp', 1800)).toBe('good')
      expect(result.current.getRating('fcp', 1801)).toBe('needs-improvement')
      expect(result.current.getRating('fcp', 3000)).toBe('needs-improvement')
      expect(result.current.getRating('fcp', 3001)).toBe('poor')
    })

    it('should handle boundary values for TTFB rating', () => {
      // Mock empty performance API since we're testing static values
      mockPerformance.getEntriesByType.mockReturnValue([])

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      expect(result.current.getRating('ttfb', 800)).toBe('good')
      expect(result.current.getRating('ttfb', 801)).toBe('needs-improvement')
      expect(result.current.getRating('ttfb', 1800)).toBe('needs-improvement')
      expect(result.current.getRating('ttfb', 1801)).toBe('poor')
    })

    it('should handle zero values', async () => {
      mockPerformance.getEntriesByType.mockImplementation((type: string) => {
        if (type === 'navigation') {
          return [{
            requestStart: 0,
            responseStart: 0,
            loadEventStart: 1000,
            loadEventEnd: 1200,
            startTime: 1000, // Add startTime for loadTime calculation
          }]
        }
        return []
      })

      Object.defineProperty(document, 'readyState', {
        writable: true,
        configurable: true,
        value: 'complete',
      })

      const { result } = renderHook(() => usePerformance())

      await waitFor(() => {
        expect(result.current.isLoading).toBe(false)
      })

      expect(result.current.metrics.ttfb).toBe(0)
      expect(result.current.metrics.loadTime).toBe(200) // 1200 - 1000
    })
  })
})


================================================
FILE: unit-tests/integration/api-chat.test.ts
================================================
import { describe, it, expect, beforeEach, vi, Mock } from 'vitest';
import { POST } from '../../src/app/api/chat/route';

// Mock external dependencies
vi.mock('@/lib/auth');
vi.mock('@/db/drizzle');
vi.mock('@/lib/crypto');
vi.mock('@/lib/arcjet');
vi.mock('@/lib/logger');
vi.mock('ai');
vi.mock('@ai-sdk/openai');
vi.mock('@openrouter/ai-sdk-provider');
vi.mock('next/headers');

// Import after mocking to get the mocked versions
import { auth } from '../../src/lib/auth';
import { db } from '../../src/db/drizzle';
import { decrypt } from '../../src/lib/crypto';
import { aj } from '../../src/lib/arcjet';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const mockAuth = vi.mocked(auth) as any;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const mockDb = vi.mocked(db) as any;
const mockDecrypt = vi.mocked(decrypt);
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const mockAj = vi.mocked(aj) as any;

// Mock AI SDK
vi.mock('ai', () => ({
  streamText: vi.fn(() => ({
    toUIMessageStreamResponse: vi.fn(() => new Response('stream')),
  })),
}));

vi.mock('@ai-sdk/openai', () => ({
  createOpenAI: vi.fn(() => vi.fn()),
}));

vi.mock('@openrouter/ai-sdk-provider', () => ({
  createOpenRouter: vi.fn(() => vi.fn()),
}));

vi.mock('next/headers', () => ({
  cookies: vi.fn(() => ({
    get: vi.fn(() => null),
  })),
}));

describe('/api/chat', () => {
  const mockUser = {
    id: 'user-123',
    name: 'Test User',
    email: 'test@example.com',
    emailVerified: true,
    image: null,
    apiKeys: 'encrypted-api-key',
    provider: 'openai',
    createdAt: new Date(),
    updatedAt: new Date(),
  };

  const mockSession = {
    user: { id: 'user-123' },
    session: { id: 'session-123' },
  };

  let limitMock: Mock<() => Promise<typeof mockUser[]>>;

  beforeEach(() => {
    vi.clearAllMocks();

    // Setup default mocks
    mockAj.protect.mockResolvedValue({
      isDenied: () => false,
      isAllowed: () => true,
      id: 'test-id',
      ttl: 60,
      results: [],
      ip: '127.0.0.1'
    } as any); // eslint-disable-line @typescript-eslint/no-explicit-any
    mockAuth.api.getSession.mockResolvedValue(mockSession as { user: { id: string }; session: { id: string } });
    // Create a mockable limit function
    limitMock = vi.fn().mockResolvedValue([mockUser]);
    mockDb.select.mockReturnValue({
      from: vi.fn().mockReturnValue({
        where: vi.fn().mockReturnValue({
          limit: limitMock
        })
      })
    } as any); // eslint-disable-line @typescript-eslint/no-explicit-any
    mockDecrypt.mockReturnValue('decrypted-api-key');
  });

  describe('Authentication', () => {
    it('should return 401 for unauthenticated requests', async () => {
      mockAuth.api.getSession.mockResolvedValue(null);

      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({ messages: [{ role: 'user', content: 'Hello' }] }),
      });

      const response = await POST(request);
      expect(response.status).toBe(401);

      const data = await response.json();
      expect(data.error).toBe('Unauthorized');
    });

    it('should return 404 for non-existent user', async () => {
      limitMock.mockResolvedValue([]);

      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({ messages: [{ role: 'user', content: 'Hello' }] }),
      });

      const response = await POST(request);
      expect(response.status).toBe(404);

      const data = await response.json();
      expect(data.error).toBe('User not found');
    });
  });

  describe('API Key Validation', () => {
    it('should return 400 for missing API keys', async () => {
      limitMock.mockResolvedValue([{
        ...mockUser,
        apiKeys: null,
        provider: null,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      }] as any);

      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({ messages: [{ role: 'user', content: 'Hello' }] }),
      });

      const response = await POST(request);
      expect(response.status).toBe(400);

      const data = await response.json();
      expect(data.error).toBe('API key not configured');
    });

    it('should return 500 for API key decryption failure', async () => {
      mockDecrypt.mockImplementation(() => {
        throw new Error('Decryption failed');
      });

      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({ messages: [{ role: 'user', content: 'Hello' }] }),
      });

      const response = await POST(request);
      expect(response.status).toBe(500);

      const data = await response.json();
      expect(data.error).toBe('Failed to decrypt API key');
    });
  });

  describe('Request Validation', () => {
    it('should return 400 for invalid JSON', async () => {
      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: 'invalid-json',
      });

      const response = await POST(request);
      expect(response.status).toBe(400);

      const data = await response.json();
      expect(data.error).toBe('Invalid JSON in request body');
    });

    it('should return 400 for invalid message format', async () => {
      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({
          messages: [
            {
              role: 'user',
              // Missing content and text
            },
          ],
        }),
      });

      const response = await POST(request);
      expect(response.status).toBe(400);

      const data = await response.json();
      expect(data.error).toBe('Invalid request format');
      expect(data.details).toBeDefined();
    });

    it('should return 400 for too many messages', async () => {
      const messages = Array(101).fill({ role: 'user', content: 'Hello' });

      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({ messages }),
      });

      const response = await POST(request);
      expect(response.status).toBe(400);

      const data = await response.json();
      expect(data.error).toBe('Invalid request format');
    });
  });

  describe('Provider Handling', () => {
    it('should handle OpenAI provider correctly', async () => {
      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({
          messages: [{ role: 'user', content: 'Hello' }],
          model: 'gpt-4',
        }),
      });

      const response = await POST(request);
      expect(response.status).toBe(200);
    });

    it('should handle OpenRouter provider correctly', async () => {
      limitMock.mockResolvedValue([{
        ...mockUser,
        provider: 'openrouter',
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      }] as any);

      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({
          messages: [{ role: 'user', content: 'Hello' }],
        }),
      });

      const response = await POST(request);
      expect(response.status).toBe(200);
    });

    it('should return 400 for unsupported provider', async () => {
      limitMock.mockResolvedValue([{
        ...mockUser,
        provider: 'unsupported',
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      }] as any);

      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({
          messages: [{ role: 'user', content: 'Hello' }],
        }),
      });

      const response = await POST(request);
      expect(response.status).toBe(400);

      const data = await response.json();
      expect(data.error).toBe('Unsupported provider');
    });
  });

  describe('Model Selection', () => {
    it('should use model from request body', async () => {
      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({
          messages: [{ role: 'user', content: 'Hello' }],
          model: 'gpt-4',
        }),
      });

      const response = await POST(request);
      expect(response.status).toBe(200);
    });

    it('should fallback to default model when none specified', async () => {
      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({
          messages: [{ role: 'user', content: 'Hello' }],
        }),
      });

      const response = await POST(request);
      expect(response.status).toBe(200);
    });
  });

  describe('Arcjet Protection', () => {
    it('should return 403 for denied requests', async () => {
      mockAj.protect.mockResolvedValue({ isDenied: () => true, id: 'test-id', ttl: 60, results: [], ip: '127.0.0.1' } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({ messages: [{ role: 'user', content: 'Hello' }] }),
      });

      const response = await POST(request);
      expect(response.status).toBe(403);

      const data = await response.json();
      expect(data.error).toBe('Access denied');
    });
  });

  describe('Error Handling', () => {
    it('should return 500 for unexpected errors', async () => {
      mockAuth.api.getSession.mockImplementation(() => {
        throw new Error('Unexpected error');
      });

      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({ messages: [{ role: 'user', content: 'Hello' }] }),
      });

      const response = await POST(request);
      expect(response.status).toBe(500);

      const data = await response.json();
      expect(data.error).toBe('An error occurred while processing your request');
      expect(data.code).toBe('INTERNAL_ERROR');
    });
  });

  describe('Successful Requests', () => {
    it('should return 200 for valid chat requests', async () => {
      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({
          messages: [
            { role: 'user', content: 'Hello' },
            { role: 'assistant', content: 'Hi there!' },
          ],
        }),
      });

      const response = await POST(request);
      expect(response.status).toBe(200);
    });

    it('should handle messages with text field instead of content', async () => {
      const request = new Request('http://localhost:3000/api/chat', {
        method: 'POST',
        body: JSON.stringify({
          messages: [
            { role: 'user', text: 'Hello' },
            { role: 'assistant', text: 'Hi there!' },
          ],
        }),
      });

      const response = await POST(request);
      expect(response.status).toBe(200);
    });
  });
});


================================================
FILE: unit-tests/integration/api-user-keys.test.ts
================================================
import { describe, it, expect, beforeEach, vi } from 'vitest';
import { GET, POST } from '../../src/app/api/user/api-keys/route';

// Mock external dependencies
vi.mock('@/lib/auth');
vi.mock('@/db/drizzle');
vi.mock('@/lib/crypto');
vi.mock('@/lib/arcjet');
vi.mock('@/lib/logger');

// Import after mocking
import { auth } from '../../src/lib/auth';
import { db } from '../../src/db/drizzle';
import { encrypt, decrypt } from '../../src/lib/crypto';
import { aj } from '../../src/lib/arcjet';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const mockAuth = vi.mocked(auth) as any;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const mockDb = vi.mocked(db) as any;
const mockEncrypt = vi.mocked(encrypt);
const mockDecrypt = vi.mocked(decrypt);
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const mockAj = vi.mocked(aj) as any;

describe('/api/user/api-keys', () => {
  const mockUser = {
    id: 'user-123',
    name: 'Test User',
    email: 'test@example.com',
    emailVerified: true,
    image: null,
    apiKeys: 'encrypted-api-key',
    provider: 'openai',
    createdAt: new Date(),
    updatedAt: new Date(),
  };

  const mockSession = {
    user: { id: 'user-123' },
    session: { id: 'session-123' },
  };

  beforeEach(() => {
    vi.clearAllMocks();

    // Setup default mocks
    mockAj.protect.mockResolvedValue({
      isDenied: () => false,
      isAllowed: () => true,
      id: 'test-id',
      ttl: 60,
      results: [],
      ip: '127.0.0.1'
    } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

    mockAuth.api.getSession.mockResolvedValue(mockSession as { user: { id: string }; session: { id: string } });

    // Mock database query chain
    const mockQuery = {
      from: vi.fn().mockReturnThis(),
      where: vi.fn().mockReturnThis(),
      limit: vi.fn().mockResolvedValue([mockUser])
    };
    mockDb.select.mockReturnValue(mockQuery as any); // eslint-disable-line @typescript-eslint/no-explicit-any

    mockDecrypt.mockReturnValue('decrypted-api-key');
  });

  describe('GET /api/user/api-keys', () => {
    it('should return 401 for unauthenticated requests', async () => {
      mockAuth.api.getSession.mockResolvedValue(null);

      const request = new Request('http://localhost:3000/api/user/api-keys');
      const response = await GET(request);

      expect(response.status).toBe(401);
      const data = await response.json();
      expect(data.error).toBe('Unauthorized');
    });

    it('should return 404 for non-existent user', async () => {
      const mockQuery = {
        from: vi.fn().mockReturnThis(),
        where: vi.fn().mockReturnThis(),
        limit: vi.fn().mockResolvedValue([])
      };
      mockDb.select.mockReturnValue(mockQuery as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const request = new Request('http://localhost:3000/api/user/api-keys');
      const response = await GET(request);

      expect(response.status).toBe(404);
      const data = await response.json();
      expect(data.error).toBe('User not found');
    });

    it('should return provider and null apiKey when decryption fails', async () => {
      mockDecrypt.mockImplementation(() => {
        throw new Error('Decryption failed');
      });

      const request = new Request('http://localhost:3000/api/user/api-keys');
      const response = await GET(request);

      expect(response.status).toBe(200);
      const data = await response.json();
      expect(data.provider).toBe('openai');
      expect(data.apiKey).toBeNull();
    });

    it('should return provider and decrypted apiKey on success', async () => {
      const request = new Request('http://localhost:3000/api/user/api-keys');
      const response = await GET(request);

      expect(response.status).toBe(200);
      const data = await response.json();
      expect(data.provider).toBe('openai');
      expect(data.apiKey).toBe('decrypted-api-key');
    });

    it('should return 403 for denied Arcjet requests', async () => {
      mockAj.protect.mockResolvedValue({
        isDenied: () => true,
        isAllowed: () => false,
        id: 'test-id',
        ttl: 60,
        results: [],
        ip: '127.0.0.1'
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const request = new Request('http://localhost:3000/api/user/api-keys');
      const response = await GET(request);

      expect(response.status).toBe(403);
      const data = await response.json();
      expect(data.error).toBe('Access denied');
    });
  });

  describe('POST /api/user/api-keys', () => {
    beforeEach(() => {
      // Mock database update chain
      const mockUpdateQuery = {
        set: vi.fn().mockReturnThis(),
        where: vi.fn().mockResolvedValue({ rowCount: 1 })
      };
      mockDb.update.mockReturnValue(mockUpdateQuery as any); // eslint-disable-line @typescript-eslint/no-explicit-any
    });

    it('should return 401 for unauthenticated requests', async () => {
      mockAuth.api.getSession.mockResolvedValue(null);

      const request = new Request('http://localhost:3000/api/user/api-keys', {
        method: 'POST',
        body: JSON.stringify({ provider: 'openai', apiKey: 'test-key' }),
      });

      const response = await POST(request);
      expect(response.status).toBe(401);

      const data = await response.json();
      expect(data.error).toBe('Unauthorized');
    });

    it('should clear API keys when empty values are provided', async () => {
      const request = new Request('http://localhost:3000/api/user/api-keys', {
        method: 'POST',
        body: JSON.stringify({ provider: '', apiKey: '' }),
      });

      const response = await POST(request);
      expect(response.status).toBe(200);

      const data = await response.json();
      expect(data.success).toBe(true);

      // Verify the update was called with null values
      expect(mockDb.update).toHaveBeenCalledWith(expect.anything());
    });

    it('should return 400 for missing required fields', async () => {
      const request = new Request('http://localhost:3000/api/user/api-keys', {
        method: 'POST',
        body: JSON.stringify({ provider: 'openai' }), // Missing apiKey
      });

      const response = await POST(request);
      expect(response.status).toBe(400);

      const data = await response.json();
      expect(data.error).toBe('Missing required fields');
    });

    it('should return 400 for invalid provider', async () => {
      const request = new Request('http://localhost:3000/api/user/api-keys', {
        method: 'POST',
        body: JSON.stringify({
          provider: 'invalid-provider',
          apiKey: 'test-key-12345678901234567890'
        }),
      });

      const response = await POST(request);
      expect(response.status).toBe(400);

      const data = await response.json();
      expect(data.error).toBe('Invalid provider. Must be "openai" or "openrouter"');
    });

    it('should return 400 for invalid API key format', async () => {
      const request = new Request('http://localhost:3000/api/user/api-keys', {
        method: 'POST',
        body: JSON.stringify({
          provider: 'openai',
          apiKey: 'short' // Too short
        }),
      });

      const response = await POST(request);
      expect(response.status).toBe(400);

      const data = await response.json();
      expect(data.error).toBe('Invalid API key format');
    });

    it('should successfully update API keys for valid input', async () => {
      mockEncrypt.mockReturnValue('encrypted-key');

      const request = new Request('http://localhost:3000/api/user/api-keys', {
        method: 'POST',
        body: JSON.stringify({
          provider: 'openai',
          apiKey: 'test-key-12345678901234567890'
        }),
      });

      const response = await POST(request);
      expect(response.status).toBe(200);

      const data = await response.json();
      expect(data.success).toBe(true);

      // Verify encryption was called
      expect(mockEncrypt).toHaveBeenCalledWith('test-key-12345678901234567890');
    });

    it('should return 403 for denied Arcjet requests', async () => {
      mockAj.protect.mockResolvedValue({
        isDenied: () => true,
        isAllowed: () => false,
        id: 'test-id',
        ttl: 60,
        results: [],
        ip: '127.0.0.1'
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const request = new Request('http://localhost:3000/api/user/api-keys', {
        method: 'POST',
        body: JSON.stringify({ provider: 'openai', apiKey: 'test-key' }),
      });

      const response = await POST(request);
      expect(response.status).toBe(403);

      const data = await response.json();
      expect(data.error).toBe('Access denied');
    });

    it('should handle and log unexpected errors', async () => {
      mockAuth.api.getSession.mockImplementation(() => {
        throw new Error('Database connection failed');
      });

      const request = new Request('http://localhost:3000/api/user/api-keys', {
        method: 'POST',
        body: JSON.stringify({ provider: 'openai', apiKey: 'test-key' }),
      });

      const response = await POST(request);
      expect(response.status).toBe(500);

      const data = await response.json();
      expect(data.error).toBe('An error occurred while updating API keys');
      expect(data.code).toBe('INTERNAL_ERROR');
    });
  });
});


================================================
FILE: unit-tests/integration/database-operations.test.ts
================================================
import { describe, it, expect, beforeEach, vi } from 'vitest';
import { eq, and } from 'drizzle-orm';
import { db } from '@/db/drizzle';
import {
  user,
  session,
  account,
  verification,
  subscription,
} from '../../src/db/schema';

// Mock the database
vi.mock('@/db/drizzle');

const mockDb = vi.mocked(db);

describe('Database Operations Integration Tests', () => {
  const testUser = {
    id: 'user-123',
    name: 'Test User',
    email: 'test@example.com',
    emailVerified: false,
    image: null,
    apiKeys: null,
    provider: null,
    createdAt: new Date(),
    updatedAt: new Date(),
  };

  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('User Operations', () => {
    it('should create a new user', async () => {
      const mockInsert = vi.fn().mockResolvedValue({ rows: [testUser] });
      mockDb.insert.mockReturnValue({
        values: vi.fn().mockReturnValue({
          returning: vi.fn().mockReturnValue(mockInsert),
        }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb.insert(user).values(testUser).returning();

      expect(mockDb.insert).toHaveBeenCalledWith(user);
      expect(result).toBeDefined();
    });

    it('should retrieve user by ID', async () => {
      const mockQuery = {
        from: vi.fn().mockReturnThis(),
        where: vi.fn().mockReturnThis(),
        limit: vi.fn().mockResolvedValue([testUser]),
      };
      mockDb.select.mockReturnValue(mockQuery as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .select()
        .from(user)
        .where(eq(user.id, 'user-123'))
        .limit(1);

      expect(mockDb.select).toHaveBeenCalled();
      expect(result).toEqual([testUser]);
    });

    it('should retrieve user by email', async () => {
      const mockQuery = {
        from: vi.fn().mockReturnThis(),
        where: vi.fn().mockReturnThis(),
        limit: vi.fn().mockResolvedValue([testUser]),
      };
      mockDb.select.mockReturnValue(mockQuery as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .select()
        .from(user)
        .where(eq(user.email, 'test@example.com'))
        .limit(1);

      expect(result).toEqual([testUser]);
    });

    it('should update user API keys and provider', async () => {
      mockDb.update.mockReturnValue({
        set: vi.fn().mockReturnValue({
          where: vi.fn().mockResolvedValue({ rowCount: 1 }),
        }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .update(user)
        .set({
          provider: 'openai',
          apiKeys: 'encrypted-key',
        })
        .where(eq(user.id, 'user-123'));

      expect(mockDb.update).toHaveBeenCalledWith(user);
      expect(result).toBeDefined();
    });

    it('should delete user and cascade to related tables', async () => {
      mockDb.delete.mockReturnValue({
        where: vi.fn().mockResolvedValue({ rowCount: 1 }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb.delete(user).where(eq(user.id, 'user-123'));

      expect(mockDb.delete).toHaveBeenCalledWith(user);
      expect(result).toBeDefined();
    });
  });

  describe('Session Operations', () => {
    const testSession = {
      id: 'session-123',
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours from now
      token: 'session-token',
      createdAt: new Date(),
      updatedAt: new Date(),
      ipAddress: '192.168.1.1',
      userAgent: 'test-agent',
      userId: 'user-123',
    };

    it('should create a new session', async () => {
      const mockInsert = vi.fn().mockResolvedValue({ rows: [testSession] });
      mockDb.insert.mockReturnValue({
        values: vi.fn().mockReturnValue({
          returning: vi.fn().mockReturnValue(mockInsert),
        }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .insert(session)
        .values(testSession)
        .returning();

      expect(mockDb.insert).toHaveBeenCalledWith(session);
      expect(result).toBeDefined();
    });

    it('should retrieve session by token', async () => {
      const mockQuery = {
        from: vi.fn().mockReturnThis(),
        where: vi.fn().mockReturnThis(),
        limit: vi.fn().mockResolvedValue([testSession]),
      };
      mockDb.select.mockReturnValue(mockQuery as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .select()
        .from(session)
        .where(eq(session.token, 'session-token'))
        .limit(1);

      expect(result).toEqual([testSession]);
    });

    it('should update session expiration', async () => {
      mockDb.update.mockReturnValue({
        set: vi.fn().mockReturnValue({
          where: vi.fn().mockResolvedValue({ rowCount: 1 }),
        }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const newExpiresAt = new Date(Date.now() + 48 * 60 * 60 * 1000);

      const result = await mockDb
        .update(session)
        .set({ expiresAt: newExpiresAt })
        .where(eq(session.id, 'session-123'));

      expect(mockDb.update).toHaveBeenCalledWith(session);
      expect(result).toBeDefined();
    });

    it('should delete expired sessions', async () => {
      mockDb.delete.mockReturnValue({
        where: vi.fn().mockResolvedValue({ rowCount: 5 }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const expiredDate = new Date(Date.now() - 24 * 60 * 60 * 1000);

      const result = await mockDb
        .delete(session)
        .where(eq(session.expiresAt, expiredDate));

      expect(mockDb.delete).toHaveBeenCalledWith(session);
      expect(result).toBeDefined();
    });
  });

  describe('Account Operations', () => {
    const testAccount = {
      id: 'account-123',
      accountId: 'oauth-account-123',
      providerId: 'google',
      userId: 'user-123',
      accessToken: 'access-token',
      refreshToken: 'refresh-token',
      idToken: 'id-token',
      accessTokenExpiresAt: new Date(Date.now() + 60 * 60 * 1000),
      refreshTokenExpiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
      scope: 'openid email profile',
      password: null,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    it('should create OAuth account', async () => {
      const mockInsert = vi.fn().mockResolvedValue({ rows: [testAccount] });
      mockDb.insert.mockReturnValue({
        values: vi.fn().mockReturnValue({
          returning: vi.fn().mockReturnValue(mockInsert),
        }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .insert(account)
        .values(testAccount)
        .returning();

      expect(mockDb.insert).toHaveBeenCalledWith(account);
      expect(result).toBeDefined();
    });

    it('should retrieve accounts by user ID', async () => {
      const mockQuery = {
        from: vi.fn().mockReturnThis(),
        where: vi.fn().mockReturnThis(),
        orderBy: vi.fn().mockResolvedValue([testAccount]),
      };
      mockDb.select.mockReturnValue(mockQuery as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .select()
        .from(account)
        .where(eq(account.userId, 'user-123'))
        .orderBy(account.createdAt);

      expect(result).toEqual([testAccount]);
    });

    it('should update account tokens', async () => {
      mockDb.update.mockReturnValue({
        set: vi.fn().mockReturnValue({
          where: vi.fn().mockResolvedValue({ rowCount: 1 }),
        }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const newAccessToken = 'new-access-token';

      const result = await mockDb
        .update(account)
        .set({
          accessToken: newAccessToken,
          updatedAt: new Date(),
        })
        .where(eq(account.id, 'account-123'));

      expect(mockDb.update).toHaveBeenCalledWith(account);
      expect(result).toBeDefined();
    });
  });

  describe('Verification Operations', () => {
    const testVerification = {
      id: 'verification-123',
      identifier: 'test@example.com',
      value: 'verification-token',
      expiresAt: new Date(Date.now() + 60 * 60 * 1000), // 1 hour from now
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    it('should create email verification token', async () => {
      const mockInsert = vi
        .fn()
        .mockResolvedValue({ rows: [testVerification] });
      mockDb.insert.mockReturnValue({
        values: vi.fn().mockReturnValue({
          returning: vi.fn().mockReturnValue(mockInsert),
        }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .insert(verification)
        .values(testVerification)
        .returning();

      expect(mockDb.insert).toHaveBeenCalledWith(verification);
      expect(result).toBeDefined();
    });

    it('should retrieve verification by identifier and value', async () => {
      const mockQuery = {
        from: vi.fn().mockReturnThis(),
        where: vi.fn().mockReturnThis(),
        limit: vi.fn().mockResolvedValue([testVerification]),
      };
      mockDb.select.mockReturnValue(mockQuery as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .select()
        .from(verification)
        .where(
          and(
            eq(verification.identifier, 'test@example.com'),
            eq(verification.value, 'verification-token'),
          ),
        )
        .limit(1);

      expect(result).toEqual([testVerification]);
    });

    it('should delete expired verifications', async () => {
      mockDb.delete.mockReturnValue({
        where: vi.fn().mockResolvedValue({ rowCount: 3 }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const expiredDate = new Date(Date.now() - 60 * 60 * 1000);

      const result = await mockDb
        .delete(verification)
        .where(eq(verification.expiresAt, expiredDate));

      expect(mockDb.delete).toHaveBeenCalledWith(verification);
      expect(result).toBeDefined();
    });
  });

  describe('Subscription Operations', () => {
    const testSubscription = {
      id: 'subscription-123',
      userId: 'user-123',
      polarSubscriptionId: 'polar-sub-123',
      polarCustomerId: 'polar-cust-123',
      status: 'active',
      plan: 'Pro',
      currentPeriodStart: new Date(),
      currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
      cancelAtPeriodEnd: false,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    it('should create subscription', async () => {
      const mockInsert = vi
        .fn()
        .mockResolvedValue({ rows: [testSubscription] });
      mockDb.insert.mockReturnValue({
        values: vi.fn().mockReturnValue({
          returning: vi.fn().mockReturnValue(mockInsert),
        }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .insert(subscription)
        .values(testSubscription)
        .returning();

      expect(mockDb.insert).toHaveBeenCalledWith(subscription);
      expect(result).toBeDefined();
    });

    it('should retrieve user subscriptions', async () => {
      const mockQuery = {
        from: vi.fn().mockReturnThis(),
        where: vi.fn().mockReturnThis(),
        orderBy: vi.fn().mockResolvedValue([testSubscription]),
      };
      mockDb.select.mockReturnValue(mockQuery as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .select()
        .from(subscription)
        .where(eq(subscription.userId, 'user-123'))
        .orderBy(subscription.createdAt);

      expect(result).toEqual([testSubscription]);
    });

    it('should update subscription status', async () => {
      mockDb.update.mockReturnValue({
        set: vi.fn().mockReturnValue({
          where: vi.fn().mockResolvedValue({ rowCount: 1 }),
        }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      const result = await mockDb
        .update(subscription)
        .set({
          status: 'canceled',
          cancelAtPeriodEnd: true,
          updatedAt: new Date(),
        })
        .where(eq(subscription.id, 'subscription-123'));

      expect(mockDb.update).toHaveBeenCalledWith(subscription);
      expect(result).toBeDefined();
    });
  });

  describe('Transaction Safety', () => {
    it('should handle transaction rollback on error', async () => {
      // Mock insert for the transaction
      const mockInsert = vi.fn().mockResolvedValue({ rows: [testUser] });
      mockDb.insert.mockReturnValue({
        values: vi.fn().mockReturnValue({
          returning: vi.fn().mockReturnValue(mockInsert),
        }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      // Mock a transaction that fails partway through
      mockDb.transaction = vi.fn().mockImplementation(async callback => {
        await callback(mockDb);
      });

      await expect(
        mockDb.transaction(async tx => {
          await tx.insert(user).values(testUser);
          throw new Error('Transaction failed');
        }),
      ).rejects.toThrow('Transaction failed');
    });

    it('should complete successful transactions', async () => {
      // Mock insert for the transaction
      const mockInsert = vi.fn().mockResolvedValue({ rows: [testUser] });
      mockDb.insert.mockReturnValue({
        values: vi.fn().mockReturnValue({
          returning: vi.fn().mockReturnValue(mockInsert),
        }),
      } as any); // eslint-disable-line @typescript-eslint/no-explicit-any

      mockDb.transaction = vi.fn().mockImplementation(async callback => {
        return await callback(mockDb);
      });

      const result = await mockDb.transaction(async tx => {
        await tx.insert(user).values(testUser);
        return { success: true };
      });

      expect(result).toEqual({ success: true });
    });
  });
});



================================================
FILE: unit-tests/integration/error-scenarios.test.ts
================================================
import { describe, it, expect, beforeEach, vi, type Mocked } from 'vitest';
import type { auth } from '../../src/lib/auth';
import type { db } from '../../src/db/drizzle';
import type { aj } from '../../src/lib/arcjet';
import type { ArcjetDecision } from '@arcjet/next';

// Mock external dependencies
vi.mock('../../src/lib/auth', () => ({
  auth: {
    api: {
      getSession: vi.fn(),
    },
  },
}));

vi.mock('../../src/db/drizzle', () => ({
  db: {
    select: vi.fn(),
    insert: vi.fn(),
    update: vi.fn(),
    delete: vi.fn(),
  },
}));

vi.mock('../../src/lib/crypto', () => ({
  decrypt: vi.fn(),
  encrypt: vi.fn(),
}));

vi.mock('../../src/lib/arcjet', () => ({
  aj: {
    protect: vi.fn(),
  },
}));

vi.mock('../../src/lib/logger', () => ({
  logApiRequest: vi.fn(),
  logError: vi.fn(),
}));

type MockDrizzleQuery = {
  from: ReturnType<typeof vi.fn>;
  where: ReturnType<typeof vi.fn>;
  limit: ReturnType<typeof vi.fn>;
  execute: ReturnType<typeof vi.fn>;
};

describe('Error Scenario Integration Tests', () => {
  let mockAuth: Mocked<typeof auth>;
  let mockDb: Mocked<typeof db>;
  let mockAj: Mocked<typeof aj>;

  beforeEach(async () => {
    vi.clearAllMocks();

    // Get mocked modules
    const authModule = await import('@/lib/auth');
    const dbModule = await import('@/db/drizzle');
    const ajModule = await import('@/lib/arcjet');

    mockAuth = vi.mocked(authModule.auth);
    mockDb = vi.mocked(dbModule.db);
    mockAj = vi.mocked(ajModule.aj);
  });

  describe('Network Failures', () => {
    it('should handle database connection failures', async () => {
      const { db } = await import('@/db/drizzle');
      const mockDb = vi.mocked(db);

      // Mock database connection failure
      const mockQuery: MockDrizzleQuery = {
        from: vi.fn().mockReturnThis(),
        where: vi.fn().mockReturnThis(),
        limit: vi.fn().mockReturnThis(),
        execute: vi.fn().mockRejectedValue(new Error('Connection timeout'))
      };
      (mockDb.select as unknown as ReturnType<typeof vi.fn>).mockReturnValue(mockQuery);

      await expect(
        mockQuery.execute()
      ).rejects.toThrow('Connection timeout');
    });

    it('should handle external API failures', async () => {
      // Mock fetch failure for external APIs
      const originalFetch = global.fetch;
      global.fetch = vi.fn().mockRejectedValue(new Error('Network error'));

      await expect(fetch('https://api.openai.com/v1/chat/completions')).rejects.toThrow('Network error');

      // Restore fetch
      global.fetch = originalFetch;
    });

    it('should handle timeout errors', async () => {
      // Mock a slow operation that times out
      const slowOperation = () => new Promise((_, reject) =>
        setTimeout(() => reject(new Error('Operation timeout')), 100)
      );

      await expect(slowOperation()).rejects.toThrow('Operation timeout');
    });
  });

  describe('Authentication Errors', () => {
    it('should handle expired sessions', async () => {
      (mockAuth.api.getSession as unknown as ReturnType<typeof vi.fn>).mockResolvedValue(null);

      const session = await mockAuth.api.getSession({ headers: new Headers() });
      expect(session).toBeNull();
    });

    it('should handle malformed auth tokens', async () => {
      (mockAuth.api.getSession as unknown as ReturnType<typeof vi.fn>).mockRejectedValue(new Error('Invalid token format'));

      await expect(
        mockAuth.api.getSession({ headers: new Headers() })
      ).rejects.toThrow('Invalid token format');
    });

    it('should handle missing authentication headers', async () => {
      // Mock missing or invalid headers
      (mockAuth.api.getSession as unknown as ReturnType<typeof vi.fn>).mockResolvedValue(null);

      const session = await mockAuth.api.getSession({
        headers: new Headers(),
        query: { disableCookieCache: true }
      });

      expect(session).toBeNull();
    });
  });

  describe('Data Validation Errors', () => {
    it('should handle invalid email formats', () => {
      const invalidEmails = [
        'not-an-email',
        '@example.com',
        'user@',
        'user@example',
      ];

      invalidEmails.forEach(email => {
        expect(() => {
          // Basic email validation regex
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(email)) {
            throw new Error(`Invalid email: ${email}`);
          }
        }).toThrow();
      });
    });

    it('should handle invalid API key formats', () => {
      const invalidKeys = [
        '', // Empty
        'short', // Too short
      ];

      invalidKeys.forEach(key => {
        expect(() => {
          if (key.length < 20) {
            throw new Error(`Invalid API key length: ${key.length}`);
          }
        }).toThrow();
      });
    });

    it('should handle malformed JSON payloads', () => {
      const malformedJSON = [
        '{invalid json}',
        '{"email": "test@example.com",}', // Trailing comma
        '{email: "test@example.com"}', // Missing quotes
        '{"email": "test@example.com"', // Missing closing brace
      ];

      malformedJSON.forEach(json => {
        expect(() => {
          JSON.parse(json);
        }).toThrow();
      });
    });
  });

  describe('Rate Limiting Errors', () => {
    it('should handle rate limit exceeded', async () => {
      mockAj.protect.mockResolvedValue({
        isDenied: () => true,
        reason: { type: 'RATE_LIMIT' },
        id: 'test-id',
        ttl: 60,
        results: [],
        ip: '127.0.0.1'
      } as unknown as ArcjetDecision);

      const decision = await mockAj.protect(new Request('http://localhost'));
      expect(decision.isDenied()).toBe(true);
    });

    it('should handle concurrent request limits', async () => {
      // Simulate multiple rapid requests
      const requests = Array(10).fill(null).map(() =>
        mockAj.protect(new Request('http://localhost'))
      );

      const results = await Promise.allSettled(requests);

      // Some requests should be rate limited
      const deniedResults = results.filter(result =>
        result.status === 'fulfilled' &&
        (result.value as { isDenied?: () => boolean }).isDenied?.() === true
      );

      expect(deniedResults.length).toBeGreaterThanOrEqual(0);
    });
  });

  describe('Resource Exhaustion', () => {
    it('should handle memory pressure', () => {
      // Simulate memory-intensive operation
      const largeArray = Array(1000000).fill('x');

      expect(() => {
        const processed = largeArray.map(item => item.toUpperCase());
        // Just check that the operation completes without throwing
        expect(processed.length).toBe(1000000);
      }).not.toThrow();
    });

    it('should handle large payload processing', () => {
      const largePayload = 'x'.repeat(100000);

      expect(() => {
        const processed = largePayload.substring(0, 50000);
        // Just check that the operation completes without throwing
        expect(processed.length).toBe(50000);
      }).not.toThrow();
    });
  });

  describe('Cascading Failures', () => {
    it('should handle database failure affecting multiple operations', async () => {
      const dbError = new Error('Database connection lost');

      // Mock all database operations to fail
      (mockDb.select as unknown as ReturnType<typeof vi.fn>).mockImplementation(() => {
        throw dbError;
      });
      (mockDb.insert as unknown as ReturnType<typeof vi.fn>).mockImplementation(() => {
        throw dbError;
      });
      (mockDb.update as unknown as ReturnType<typeof vi.fn>).mockImplementation(() => {
        throw dbError;
      });

      // All operations should fail with the same error
      expect(() => mockDb.select()).toThrow('Database connection lost');
      expect(() => (mockDb.insert as unknown as () => void)()).toThrow('Database connection lost');
      expect(() => (mockDb.update as unknown as () => void)()).toThrow('Database connection lost');
    });

    it('should handle partial service degradation', async () => {
      // Auth works but database fails
      (mockAuth.api.getSession as unknown as ReturnType<typeof vi.fn>).mockResolvedValue({ user: { id: '123' } } as { user?: { id: string } });
      (mockDb.select as unknown as ReturnType<typeof vi.fn>).mockImplementation(() => {
        throw new Error('Database unavailable');
      });

      const session = await mockAuth.api.getSession({ headers: new Headers() });
      expect(session?.user?.id).toBe('123');

      expect(() => mockDb.select()).toThrow('Database unavailable');
    });
  });

  describe('Recovery Mechanisms', () => {
    it('should handle graceful degradation', () => {
      // Test fallback behavior when primary service fails
      const primaryService = () => {
        throw new Error('Primary service unavailable');
      };

      const fallbackService = () => 'fallback result';

      let result;
      try {
        result = primaryService();
      } catch {
        result = fallbackService();
      }

      expect(result).toBe('fallback result');
    });

    it('should implement circuit breaker pattern', () => {
      let failureCount = 0;
      const maxFailures = 3;

      const unreliableService = () => {
        failureCount++;
        if (failureCount <= maxFailures) {
          throw new Error('Service temporarily unavailable');
        }
        return 'Service recovered';
      };

      // First few calls fail
      expect(() => unreliableService()).toThrow();
      expect(() => unreliableService()).toThrow();
      expect(() => unreliableService()).toThrow();

      // After max failures, service recovers
      const result = unreliableService();
      expect(result).toBe('Service recovered');
    });

    it('should handle retry logic with exponential backoff', async () => {
      let attempts = 0;
      const maxAttempts = 3;

      const unreliableOperation = async () => {
        attempts++;
        if (attempts < maxAttempts) {
          throw new Error(`Attempt ${attempts} failed`);
        }
        return 'Success after retries';
      };

      // Implement simple retry logic
      let result;
      for (let i = 0; i < maxAttempts; i++) {
        try {
          result = await unreliableOperation();
          break;
        } catch (error) {
          if (i === maxAttempts - 1) throw error;
          // Wait before retry (simplified)
          await new Promise(resolve => setTimeout(resolve, 10));
        }
      }

      expect(result).toBe('Success after retries');
      expect(attempts).toBe(maxAttempts);
    });
  });

  describe('Security Error Scenarios', () => {
    it('should handle SQL injection attempts', () => {
      const maliciousInputs = [
        "'; DROP TABLE users; --",
        "' OR '1'='1",
        "admin'--",
        "'; UPDATE users SET password='hacked'; --",
      ];

      maliciousInputs.forEach(input => {
        // Basic check for suspicious patterns
        const hasSqlKeywords = /\b(DROP|UPDATE|DELETE|INSERT|UNION|SELECT)\b/i.test(input);
        const hasCommentSyntax = /--|\/\*|\*\//.test(input);

        if (hasSqlKeywords || hasCommentSyntax) {
          expect(() => {
            throw new Error(`Potential SQL injection detected: ${input}`);
          }).toThrow();
        }
      });
    });

    it('should handle XSS attempts', () => {
      const maliciousInputs = [
        '<script>alert("xss")</script>',
        'javascript:alert("xss")',
        '<img src="x" onerror="alert(1)">',
        '"><script>alert("xss")</script>',
      ];

      maliciousInputs.forEach(input => {
        // Basic check for script tags and event handlers
        const hasScriptTags = /<script|javascript:|on\w+\s*=/i.test(input);

        if (hasScriptTags) {
          expect(() => {
            throw new Error(`Potential XSS detected: ${input}`);
          }).toThrow();
        }
      });
    });

    it('should handle path traversal attempts', () => {
      const maliciousPaths = [
        '../../../etc/passwd',
        '..\\..\\..\\windows\\system32',
        '%2e%2e%2f%2e%2e%2f',
        '..%252f..%252f..%252f',
      ];

      maliciousPaths.forEach(path => {
        // Check for directory traversal patterns
        const hasTraversal = /(\.\.[/\\])|(%2e%2e)|(\.\.%252f)/i.test(path);

        if (hasTraversal) {
          expect(() => {
            throw new Error(`Potential path traversal detected: ${path}`);
          }).toThrow();
        }
      });
    });
  });
});


================================================
FILE: unit-tests/integration/components/login-form.test.tsx
================================================
import { describe, it, expect, beforeEach, vi } from 'vitest';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import { LoginForm } from '@/components/forms/login-form';
import { authClient } from '@/lib/auth-client';
import { signIn } from '../../../server/users';

// Mock external dependencies
vi.mock('@/lib/auth-client', () => ({
  authClient: {
    signIn: {
      social: vi.fn(),
    },
  },
}));

vi.mock('../../../server/users', () => ({
  signIn: vi.fn(),
}));

vi.mock('next/navigation', () => ({
  useRouter: vi.fn(() => ({
    push: vi.fn(),
    back: vi.fn(),
    forward: vi.fn(),
    refresh: vi.fn(),
    replace: vi.fn(),
    prefetch: vi.fn(),
  })),
}));

vi.mock('sonner', () => ({
  toast: {
    success: vi.fn(),
    error: vi.fn(),
  },
}));

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const mockAuthClient = vi.mocked(authClient) as any;
const mockSignIn = vi.mocked(signIn);

describe('LoginForm Integration Tests', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  const renderLoginForm = () => {
    return render(<LoginForm />);
  };

  describe('Form Rendering', () => {
    it('should render all form elements correctly', () => {
      renderLoginForm();

      expect(screen.getByText('Welcome back')).toBeInTheDocument();
      expect(
        screen.getByText('Login with your Google account'),
      ).toBeInTheDocument();
      expect(
        screen.getByRole('button', { name: /login with google/i }),
      ).toBeInTheDocument();
      expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
      expect(screen.getByLabelText(/password/i)).toBeInTheDocument();
      expect(screen.getByRole('button', { name: 'Login' })).toBeInTheDocument();
      expect(screen.getByText(/don't have an account/i)).toBeInTheDocument();
    });

    it('should render password field as type password', () => {
      renderLoginForm();

      const passwordInput = screen.getByLabelText(/password/i);
      expect(passwordInput).toHaveAttribute('type', 'password');
    });

    it('should render forgot password link', () => {
      renderLoginForm();

      const forgotPasswordLink = screen.getByText(/forgot your password/i);
      expect(forgotPasswordLink).toBeInTheDocument();
      expect(forgotPasswordLink).toHaveAttribute('href', '/forgot-password');
    });
  });

  describe('Form Validation', () => {
    it('should show validation error for invalid email', async () => {
      renderLoginForm();

      const emailInput = screen.getByLabelText(/email/i);
      const submitButton = screen.getByRole('button', { name: 'Login' });

      fireEvent.change(emailInput, { target: { value: 'invalid-email' } });
      fireEvent.click(submitButton);

      await waitFor(() => {
        expect(screen.getByText(/invalid email/i)).toBeInTheDocument();
      });
    });

    it('should show validation error for short password', async () => {
      renderLoginForm();

      const emailInput = screen.getByLabelText(/email/i);
      const passwordInput = screen.getByLabelText(/password/i);
      const submitButton = screen.getByRole('button', { name: 'Login' });

      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
      fireEvent.change(passwordInput, { target: { value: '123' } });
      fireEvent.click(submitButton);

      await waitFor(() => {
        expect(
          screen.getByText(/password must be at least 8 characters long/i),
        ).toBeInTheDocument();
      });
    });

    it('should not show validation errors for valid inputs', async () => {
      renderLoginForm();

      const emailInput = screen.getByLabelText(/email/i);
      const passwordInput = screen.getByLabelText(/password/i);

      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
      fireEvent.change(passwordInput, { target: { value: 'validpassword' } });

      // Wait a bit to ensure no validation errors appear
      await waitFor(() => {
        expect(screen.queryByText(/invalid email/i)).not.toBeInTheDocument();
        expect(
          screen.queryByText(/password must be at least 8 characters long/i),
        ).not.toBeInTheDocument();
      });
    });
  });

  describe('Form Submission', () => {
    it('should call signIn with correct credentials on valid submission', async () => {
      mockSignIn.mockResolvedValue({
        success: true,
        message: 'Login successful',
      });

      renderLoginForm();

      const emailInput = screen.getByLabelText(/email/i);
      const passwordInput = screen.getByLabelText(/password/i);
      const submitButton = screen.getByRole('button', { name: 'Login' });

      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
      fireEvent.change(passwordInput, { target: { value: 'validpassword' } });
      fireEvent.click(submitButton);

      await waitFor(() => {
        expect(mockSignIn).toHaveBeenCalledWith(
          'test@example.com',
          'validpassword',
        );
      });
    });

    it('should show success toast and redirect on successful login', async () => {
      const mockPush = vi.fn();
      const { useRouter } = await import('next/navigation');
      vi.mocked(useRouter).mockReturnValue({
        push: mockPush,
        back: vi.fn(),
        forward: vi.fn(),
        refresh: vi.fn(),
        replace: vi.fn(),
        prefetch: vi.fn(),
      });

      mockSignIn.mockResolvedValue({
        success: true,
        message: 'Login successful',
      });

      renderLoginForm();

      const emailInput = screen.getByLabelText(/email/i);
      const passwordInput = screen.getByLabelText(/password/i);

      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
      fireEvent.change(passwordInput, { target: { value: 'validpassword' } });
      const form = screen.getByTestId('login-form');
      fireEvent.submit(form);

      await waitFor(() => {
        expect(mockPush).toHaveBeenCalledWith('/dashboard');
      });
    });

    it('should show error toast on failed login', async () => {
      mockSignIn.mockResolvedValue({
        success: false,
        message: 'Invalid credentials',
      });

      renderLoginForm();

      const emailInput = screen.getByLabelText(/email/i);
      const passwordInput = screen.getByLabelText(/password/i);
      const submitButton = screen.getByRole('button', { name: 'Login' });

      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
      fireEvent.change(passwordInput, { target: { value: 'wrongpassword' } });
      fireEvent.click(submitButton);

      await waitFor(() => {
        // Toast messages are handled by sonner, so we can't easily test them
        // but we can verify the signIn function was called
        expect(mockSignIn).toHaveBeenCalledWith(
          'test@example.com',
          'wrongpassword',
        );
      });
    });

    it('should show loading state during submission', async () => {
      // Mock a delayed response
      mockSignIn.mockImplementation(
        () =>
          new Promise(resolve =>
            setTimeout(
              () => resolve({ success: true, message: 'Success' }),
              100,
            ),
          ),
      );

      renderLoginForm();

      const emailInput = screen.getByLabelText(/email/i);
      const passwordInput = screen.getByLabelText(/password/i);
      const submitButton = screen.getByRole('button', { name: 'Login' });

      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
      fireEvent.change(passwordInput, { target: { value: 'validpassword' } });
      fireEvent.click(submitButton);

      // Wait for loading state to appear
      await waitFor(() => {
        expect(screen.getByLabelText(/signing in/i)).toBeInTheDocument();
      });

      // Wait for the request to complete
      await waitFor(
        () => {
          expect(
            screen.queryByLabelText(/signing in/i),
          ).not.toBeInTheDocument();
        },
        { timeout: 200 },
      );
    });
  });

  describe('Google OAuth Integration', () => {
    it('should call Google sign-in when Google button is clicked', async () => {
      mockAuthClient.signIn.social.mockResolvedValue({
        data: { user: { id: '123' } },
        error: null,
      } as { data: { user: { id: string } }; error: null });

      renderLoginForm();

      const googleButton = screen.getByRole('button', {
        name: /login with google/i,
      });
      fireEvent.click(googleButton);

      expect(mockAuthClient.signIn.social).toHaveBeenCalledWith({
        provider: 'google',
        callbackURL: '/dashboard',
      });
    });

    it('should handle Google sign-in errors gracefully', async () => {
      mockAuthClient.signIn.social.mockResolvedValue({
        data: null,
        error: { message: 'OAuth failed' },
      } as { data: null; error: { message: string } });

      renderLoginForm();

      const googleButton = screen.getByRole('button', {
        name: /login with google/i,
      });
      fireEvent.click(googleButton);

      // The component doesn't handle errors explicitly, but the call should still be made
      expect(mockAuthClient.signIn.social).toHaveBeenCalledWith({
        provider: 'google',
        callbackURL: '/dashboard',
      });
    });
  });

  describe('Navigation Links', () => {
    it('should render signup link', () => {
      renderLoginForm();

      const signupLink = screen.getByText(/sign up/i);
      expect(signupLink).toBeInTheDocument();
      expect(signupLink.closest('a')).toHaveAttribute('href', '/signup');
    });

    it('should render home page link', () => {
      renderLoginForm();

      const homeLink = screen.getByText(/home page/i);
      expect(homeLink).toBeInTheDocument();
      expect(homeLink.closest('a')).toHaveAttribute('href', '/');
    });
  });

  describe('Accessibility', () => {
    it('should have proper form labels', () => {
      renderLoginForm();

      const emailInput = screen.getByLabelText(/email/i);
      const passwordInput = screen.getByLabelText(/password/i);

      expect(emailInput).toBeInTheDocument();
      expect(passwordInput).toBeInTheDocument();
    });

    it('should have proper button roles', () => {
      renderLoginForm();

      const googleButton = screen.getByRole('button', {
        name: /login with google/i,
      });
      const submitButton = screen.getByRole('button', { name: 'Login' });

      expect(googleButton).toBeInTheDocument();
      expect(submitButton).toBeInTheDocument();
    });

    it('should support keyboard navigation', async () => {
      renderLoginForm();

      const emailInput = screen.getByLabelText(/email/i);

      // Check that email input is focusable
      emailInput.focus();
      expect(emailInput).toHaveFocus();
    });
  });

  describe('Error Handling', () => {
    it('should handle signIn function throwing an error', async () => {
      mockSignIn.mockRejectedValue(new Error('Network error'));

      renderLoginForm();

      const emailInput = screen.getByLabelText(/email/i);
      const passwordInput = screen.getByLabelText(/password/i);
      const submitButton = screen.getByRole('button', { name: 'Login' });

      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
      fireEvent.change(passwordInput, { target: { value: 'validpassword' } });
      fireEvent.click(submitButton);

      // Should not crash and should handle the error gracefully
      await waitFor(() => {
        expect(mockSignIn).toHaveBeenCalled();
      });
    });

    it('should handle malformed response from signIn', async () => {
      mockSignIn.mockResolvedValue({ success: false, message: 'Error' } as {
        success: boolean;
        message: string;
      });

      renderLoginForm();

      const emailInput = screen.getByLabelText(/email/i);
      const passwordInput = screen.getByLabelText(/password/i);
      const submitButton = screen.getByRole('button', { name: 'Login' });

      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });
      fireEvent.change(passwordInput, { target: { value: 'validpassword' } });
      fireEvent.click(submitButton);

      await waitFor(() => {
        expect(mockSignIn).toHaveBeenCalled();
      });
    });
  });
});



================================================
FILE: unit-tests/integration/components/theme-provider.test.tsx
================================================
import { describe, it, expect, beforeEach, vi } from 'vitest';
import { render, screen, act } from '@testing-library/react';
import { ThemeProvider } from '@/components/theme-provider';

// Mock next-themes
vi.mock('next-themes', () => ({
  ThemeProvider: ({ children, ...props }: { children: React.ReactNode; [key: string]: unknown }) => (
    <div data-testid="theme-provider" {...props}>
      {children}
    </div>
  ),
}));

describe('ThemeProvider Integration Tests', () => {
  const TestComponent = () => (
    <div>
      <span data-testid="theme-text">Current theme content</span>
      <button onClick={() => document.documentElement.classList.toggle('dark')}>
        Toggle Theme
      </button>
    </div>
  );

  beforeEach(() => {
    vi.clearAllMocks();
    // Reset document classes
    document.documentElement.className = '';
  });

  describe('Theme Provider Initialization', () => {
    it('should render children correctly', () => {
      render(
        <ThemeProvider>
          <TestComponent />
        </ThemeProvider>
      );

      expect(screen.getByTestId('theme-provider')).toBeInTheDocument();
      expect(screen.getByTestId('theme-text')).toBeInTheDocument();
      expect(screen.getByText('Toggle Theme')).toBeInTheDocument();
    });

    it('should apply default theme attributes', () => {
      render(
        <ThemeProvider>
          <TestComponent />
        </ThemeProvider>
      );

      const provider = screen.getByTestId('theme-provider');
      expect(provider).toHaveAttribute('data-testid', 'theme-provider');
    });

    it('should handle theme switching', () => {
      render(
        <ThemeProvider>
          <TestComponent />
        </ThemeProvider>
      );

      const toggleButton = screen.getByText('Toggle Theme');

      act(() => {
        toggleButton.click();
      });

      // The theme provider should handle the theme switching logic
      expect(document.documentElement.classList.contains('dark')).toBe(true);
    });
  });

  describe('Theme Persistence', () => {
    it('should maintain theme state across re-renders', () => {
      const { rerender } = render(
        <ThemeProvider>
          <TestComponent />
        </ThemeProvider>
      );

      const toggleButton = screen.getByText('Toggle Theme');

      // Apply dark theme
      act(() => {
        toggleButton.click();
      });

      expect(document.documentElement.classList.contains('dark')).toBe(true);

      // Re-render the component
      rerender(
        <ThemeProvider>
          <TestComponent />
        </ThemeProvider>
      );

      // Theme should still be applied
      expect(document.documentElement.classList.contains('dark')).toBe(true);
    });
  });

  describe('Error Handling', () => {
    it('should handle missing theme provider gracefully', () => {
      // Test without ThemeProvider wrapper
      expect(() => {
        render(<TestComponent />);
      }).not.toThrow();
    });

    it('should handle theme provider errors', () => {
      // Mock console.error to avoid noise in tests
      const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});

      // This should not throw even if there are internal errors
      expect(() => {
        render(
          <ThemeProvider>
            <TestComponent />
          </ThemeProvider>
        );
      }).not.toThrow();

      consoleSpy.mockRestore();
    });
  });
});


================================================
FILE: unit-tests/lib/arcjet.test.ts
================================================
import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'

// Mock the arcjet module before importing our module
vi.mock('@arcjet/next', () => ({
  default: vi.fn(() => ({
    protect: vi.fn()
  })),
  detectBot: vi.fn(() => ({})),
  shield: vi.fn(() => ({}))
}))

describe('arcjet', () => {
  let originalArcjetKey: string | undefined

  beforeEach(() => {
    // Save original ARCJET_KEY
    originalArcjetKey = process.env.ARCJET_KEY

    // Clear the module cache to ensure fresh imports
    vi.resetModules()
  })

  afterEach(() => {
    // Restore original ARCJET_KEY
    if (originalArcjetKey !== undefined) {
      process.env.ARCJET_KEY = originalArcjetKey
    } else {
      delete process.env.ARCJET_KEY
    }
  })

  describe('initialization', () => {
    it('should throw error when ARCJET_KEY is not set', async () => {
      delete process.env.ARCJET_KEY

      await expect(async () => {
        await import('@/lib/arcjet')
      }).rejects.toThrow('ARCJET_KEY environment variable must be set')
    }, 30000) // Increase timeout significantly for this test

    it('should initialize with valid ARCJET_KEY', async () => {
      process.env.ARCJET_KEY = 'dummy-arcjet-key'

      const { aj } = await import('@/lib/arcjet')

      expect(aj).toBeDefined()
      expect(typeof aj.protect).toBe('function')
    })

    it('should export default instance', async () => {
      process.env.ARCJET_KEY = 'dummy-arcjet-key'

      const module = await import('@/lib/arcjet')

      expect(module.default).toBeDefined()
      expect(module.default).toBe(module.aj)
    })
  })

  describe('configuration', () => {
    it('should have ip.src as characteristic', async () => {
      process.env.ARCJET_KEY = 'dummy-arcjet-key'

      // This is a smoke test - in a real scenario, you'd inspect the configuration
      const { aj } = await import('@/lib/arcjet')
      expect(aj).toBeDefined()
    })
  })

  describe('error handling', () => {
    it('should handle empty ARCJET_KEY', async () => {
      process.env.ARCJET_KEY = ''

      await expect(async () => {
        await import('@/lib/arcjet')
      }).rejects.toThrow('ARCJET_KEY environment variable must be set')
    })

    it('should handle whitespace-only ARCJET_KEY', async () => {
      process.env.ARCJET_KEY = '   '

      // Arcjet might accept this, but it would likely fail at runtime
      // This test documents the behavior
      const { aj } = await import('@/lib/arcjet')
      expect(aj).toBeDefined()
    })
  })

  describe('integration with environment', () => {
    it('should use environment variable key', async () => {
      const testKey = 'dummy-arcjet-key'
      process.env.ARCJET_KEY = testKey

      // The key should be used internally by arcjet
      const { aj } = await import('@/lib/arcjet')
      expect(aj).toBeDefined()
    })

    it('should work with different key formats', async () => {
      const keys = [
        'sk-test-123',
        'live_key_456',
        'test_key_with_underscores_789',
        'simple-key',
      ]

      for (const key of keys) {
        process.env.ARCJET_KEY = key
        vi.resetModules()

        const { aj } = await import('@/lib/arcjet')
        expect(aj).toBeDefined()
      }
    })
  })
})


================================================
FILE: unit-tests/lib/auth-client.test.ts
================================================
import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'

// Import the module to test
import { authClient, PLAN_PRODUCT_IDS } from '@/lib/auth-client'

describe('auth-client', () => {
  let originalEnv: NodeJS.ProcessEnv

  beforeEach(() => {
    originalEnv = { ...process.env }
    // Mock environment variables
    process.env.BETTER_AUTH_URL = 'http://localhost:3000'
    process.env.POLAR_PRODUCT_FREE = 'free_product_id'
    process.env.POLAR_PRODUCT_PRO = 'pro_product_id'
    process.env.POLAR_PRODUCT_STARTUP = 'startup_product_id'
  })

  afterEach(() => {
    process.env = originalEnv
    vi.clearAllMocks()
  })

  describe('authClient', () => {
    it('should create auth client with correct configuration', () => {
      expect(authClient).toBeDefined()
      // The authClient is a factory function that returns a client instance
      expect(typeof authClient).toBe('function')
      // Test that calling it returns an object with auth methods
      const clientInstance = authClient
      expect(typeof clientInstance).toBe('function')
    })

    it('should handle missing BETTER_AUTH_URL gracefully', () => {
      delete process.env.BETTER_AUTH_URL

      // Should not throw during import, but may fail at runtime
      expect(authClient).toBeDefined()
    })

    it('should configure Polar plugin', () => {
      // The client should be configured with Polar plugin
      expect(authClient).toBeDefined()
    })
  })

  describe('PLAN_PRODUCT_IDS', () => {
    it('should export all plan product IDs', () => {
      expect(PLAN_PRODUCT_IDS).toBeDefined()
      expect(PLAN_PRODUCT_IDS).toHaveProperty('FREE')
      expect(PLAN_PRODUCT_IDS).toHaveProperty('PRO')
      expect(PLAN_PRODUCT_IDS).toHaveProperty('STARTUP')
    })

    it('should get FREE plan ID from environment', () => {
      // The module uses actual .env values, so we test that it's a valid UUID string
      expect(PLAN_PRODUCT_IDS.FREE).toBeDefined()
      expect(typeof PLAN_PRODUCT_IDS.FREE).toBe('string')
      expect(PLAN_PRODUCT_IDS.FREE.length).toBeGreaterThan(0)
    })

    it('should get PRO plan ID from environment', () => {
      expect(PLAN_PRODUCT_IDS.PRO).toBeDefined()
      expect(typeof PLAN_PRODUCT_IDS.PRO).toBe('string')
      expect(PLAN_PRODUCT_IDS.PRO.length).toBeGreaterThan(0)
    })

    it('should get STARTUP plan ID from environment', () => {
      expect(PLAN_PRODUCT_IDS.STARTUP).toBeDefined()
      expect(typeof PLAN_PRODUCT_IDS.STARTUP).toBe('string')
      expect(PLAN_PRODUCT_IDS.STARTUP.length).toBeGreaterThan(0)
    })

    it('should handle missing environment variables', () => {
      delete process.env.POLAR_PRODUCT_FREE
      delete process.env.POLAR_PRODUCT_PRO
      delete process.env.POLAR_PRODUCT_STARTUP

      // Since the module was already imported, we need to test the current state
      // In a real scenario, these would be undefined if env vars are missing
      expect(typeof PLAN_PRODUCT_IDS.FREE).toBe('string')
      expect(typeof PLAN_PRODUCT_IDS.PRO).toBe('string')
      expect(typeof PLAN_PRODUCT_IDS.STARTUP).toBe('string')
    })

    it('should handle empty environment variables', () => {
      // Test that the current values are valid strings (from .env file)
      expect(typeof PLAN_PRODUCT_IDS.FREE).toBe('string')
      expect(typeof PLAN_PRODUCT_IDS.PRO).toBe('string')
      expect(typeof PLAN_PRODUCT_IDS.STARTUP).toBe('string')
    })
  })

  describe('integration', () => {
    it('should maintain referential stability', () => {
      const client1 = authClient
      const client2 = authClient

      expect(client1).toBe(client2)
    })

    it('should work with different environment configurations', () => {
      // Test that the current configuration is working
      expect(authClient).toBeDefined()
      expect(PLAN_PRODUCT_IDS.FREE).toBeDefined()
      expect(PLAN_PRODUCT_IDS.PRO).toBeDefined()
      expect(PLAN_PRODUCT_IDS.STARTUP).toBeDefined()
    })
  })
})


================================================
FILE: unit-tests/lib/crypto.test.ts
================================================
import { describe, it, expect } from 'vitest'
import { encrypt, decrypt } from '@/lib/crypto'

describe('crypto', () => {
  describe('encrypt', () => {
    it('should encrypt a string', () => {
      const text = 'hello world'
      const encrypted = encrypt(text)

      expect(encrypted).toBeDefined()
      expect(typeof encrypted).toBe('string')
      expect(encrypted.length).toBeGreaterThan(text.length)
      // Should contain the separator
      expect(encrypted).toContain(':')
    })

    it('should produce different outputs for different inputs', () => {
      const text1 = 'hello'
      const text2 = 'world'

      const encrypted1 = encrypt(text1)
      const encrypted2 = encrypt(text2)

      expect(encrypted1).not.toBe(encrypted2)
    })

    it('should produce different outputs for the same input (due to random IV)', () => {
      const text = 'hello world'

      const encrypted1 = encrypt(text)
      const encrypted2 = encrypt(text)

      expect(encrypted1).not.toBe(encrypted2)
    })

    it('should handle empty strings', () => {
      const text = ''
      const encrypted = encrypt(text)

      expect(encrypted).toBeDefined()
      expect(typeof encrypted).toBe('string')
    })

    it('should handle special characters', () => {
      const text = 'hello@world.com!#$%^&*()'
      const encrypted = encrypt(text)

      expect(encrypted).toBeDefined()
      expect(typeof encrypted).toBe('string')
    })
  })

  describe('decrypt', () => {
    it('should decrypt an encrypted string', () => {
      const originalText = 'hello world'
      const encrypted = encrypt(originalText)
      const decrypted = decrypt(encrypted)

      expect(decrypted).toBe(originalText)
    })

    it('should handle empty strings', () => {
      const originalText = ''
      const encrypted = encrypt(originalText)
      const decrypted = decrypt(encrypted)

      expect(decrypted).toBe(originalText)
    })

    it('should handle special characters', () => {
      const originalText = 'hello@world.com!#$%^&*()'
      const encrypted = encrypt(originalText)
      const decrypted = decrypt(encrypted)

      expect(decrypted).toBe(originalText)
    })

    it('should handle long strings', () => {
      const originalText = 'A'.repeat(1000)
      const encrypted = encrypt(originalText)
      const decrypted = decrypt(encrypted)

      expect(decrypted).toBe(originalText)
    })

    it('should throw an error for invalid encrypted data', () => {
      expect(() => decrypt('invalid')).toThrow()
      expect(() => decrypt('invalid:invalid:invalid')).toThrow()
      expect(() => decrypt('')).toThrow()
    })

    it('should throw an error for tampered encrypted data', () => {
      const originalText = 'hello world'
      const encrypted = encrypt(originalText)
      // Tamper with the auth tag (second part) which should cause authentication to fail
      const parts = encrypted.split(':')
      if (parts.length === 3 && parts[1].length > 0) {
        // Change the first character of the auth tag
        parts[1] = '0' + parts[1].slice(1)
        const tampered = parts.join(':')
        expect(() => decrypt(tampered)).toThrow()
      } else {
        // Fallback: just test with obviously invalid data
        expect(() => decrypt('invalid')).toThrow()
      }
    })
  })

  describe('encrypt/decrypt roundtrip', () => {
    it('should maintain data integrity through multiple encrypt/decrypt cycles', () => {
      const originalText = 'test data for multiple cycles'

      let current = originalText
      for (let i = 0; i < 3; i++) {
        current = decrypt(encrypt(current))
        expect(current).toBe(originalText)
      }
    })

    it('should work with JSON data', () => {
      const data = { user: 'john', age: 30, active: true }
      const jsonString = JSON.stringify(data)

      const encrypted = encrypt(jsonString)
      const decrypted = decrypt(encrypted)
      const parsed = JSON.parse(decrypted)

      expect(parsed).toEqual(data)
    })
  })
})


================================================
FILE: unit-tests/lib/logger.test.ts
================================================
import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'
import {
  logger,
  logApiRequest,
  logSecurityEvent,
  logAuthEvent,
  logError,
  logWarn,
  logInfo,
  logDebug,
} from '@/lib/logger'

describe('logger', () => {
  let consoleDebugSpy: ReturnType<typeof vi.spyOn>
  let consoleInfoSpy: ReturnType<typeof vi.spyOn>
  let consoleWarnSpy: ReturnType<typeof vi.spyOn>
  let consoleErrorSpy: ReturnType<typeof vi.spyOn>

  beforeEach(() => {
    // Spy on console methods
    consoleDebugSpy = vi.spyOn(console, 'debug').mockImplementation(() => {})
    consoleInfoSpy = vi.spyOn(console, 'info').mockImplementation(() => {})
    consoleWarnSpy = vi.spyOn(console, 'warn').mockImplementation(() => {})
    consoleErrorSpy = vi.spyOn(console, 'error').mockImplementation(() => {})

    // Set NODE_ENV to test
    vi.stubEnv('NODE_ENV', 'test')
  })

  afterEach(() => {
    vi.restoreAllMocks()
    vi.unstubAllEnvs()
  })

  describe('debug', () => {
    it('should include context in debug logs', () => {
      // Debug logging is disabled in test environment (NODE_ENV=test)
      // In a real development environment, this would work
      logger.debug('Test debug', { userId: 'user123', requestId: 'req456' })

      // Since we're in test environment, debug logging is disabled
      expect(consoleDebugSpy).not.toHaveBeenCalled()
    })
  })

  describe('info', () => {
    it('should log info messages', () => {
      logger.info('Test info message')

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('INFO')
      expect(logOutput).toContain('Test info message')
    })

    it('should include context in info logs', () => {
      logger.info('User action', { userId: 'user123', action: 'login' })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('userId')
      expect(logOutput).toContain('action')
    })

    it('should include timestamp in info logs', () => {
      logger.info('Test message')

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      // Check for ISO 8601 timestamp format
      expect(logOutput).toMatch(/\[\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z\]/)
    })
  })

  describe('warn', () => {
    it('should log warning messages', () => {
      logger.warn('Test warning')

      expect(consoleWarnSpy).toHaveBeenCalled()
      const logOutput = consoleWarnSpy.mock.calls[0][0]
      expect(logOutput).toContain('WARN')
      expect(logOutput).toContain('Test warning')
    })

    it('should include error details in warnings', () => {
      const error = new Error('Test error')
      logger.warn('Warning with error', { userId: 'user123' }, error)

      expect(consoleWarnSpy).toHaveBeenCalled()
      const logOutput = consoleWarnSpy.mock.calls[0][0]
      expect(logOutput).toContain('WARN')
      expect(logOutput).toContain('Warning with error')
    })
  })

  describe('error', () => {
    it('should log error messages', () => {
      logger.error('Test error')

      expect(consoleErrorSpy).toHaveBeenCalled()
      const logOutput = consoleErrorSpy.mock.calls[0][0]
      expect(logOutput).toContain('ERROR')
      expect(logOutput).toContain('Test error')
    })

    it('should include error details', () => {
      const error = new Error('Detailed error')
      error.stack = 'Error stack trace'
      
      logger.error('Error occurred', {}, error)

      expect(consoleErrorSpy).toHaveBeenCalled()
      const errorArg = consoleErrorSpy.mock.calls[0][1]
      expect(errorArg).toBeDefined()
      expect(errorArg).toHaveProperty('error')
    })

    it('should include stack trace in development', () => {
      vi.stubEnv('NODE_ENV', 'development')
      const error = new Error('Test error')
      error.stack = 'Test stack trace'

      logger.error('Error with stack', {}, error)

      expect(consoleErrorSpy).toHaveBeenCalled()
      const errorArg = consoleErrorSpy.mock.calls[0][1] as { error: { stack: string } }
      expect(errorArg.error).toHaveProperty('stack')
    })

    it('should not include stack trace in production', () => {
      vi.stubEnv('NODE_ENV', 'production')
      const error = new Error('Test error')
      error.stack = 'Test stack trace'

      logger.error('Error without stack', {}, error)

      expect(consoleErrorSpy).toHaveBeenCalled()
      const errorArg = consoleErrorSpy.mock.calls[0][1] as { error: { stack?: string } }
      // In production, stack traces should not be included
      expect(errorArg.error?.stack).toBeUndefined()
    })
  })

  describe('sensitive data sanitization', () => {
    it('should redact password fields', () => {
      logger.info('User login', {
        username: 'testuser',
        password: 'secret123',
      })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('[REDACTED]')
      expect(logOutput).not.toContain('secret123')
    })

    it('should redact token fields', () => {
      logger.info('API call', {
        endpoint: '/api/users',
        access_token: 'bearer_token_12345',
      })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('[REDACTED]')
      expect(logOutput).not.toContain('bearer_token_12345')
    })

    it('should redact api_key fields', () => {
      logger.info('Config loaded', {
        api_key: 'test_api_key',
        service: 'openai',
      })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('[REDACTED]')
      expect(logOutput).not.toContain('sk-1234567890abcdef')
    })

    it('should redact authorization headers', () => {
      logger.info('HTTP request', {
        method: 'GET',
        authorization: 'Bearer secret_token',
      })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('[REDACTED]')
      expect(logOutput).not.toContain('secret_token')
    })

    it('should redact cookie values', () => {
      logger.info('Request', {
        cookie: 'session=abc123; token=xyz789',
      })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('[REDACTED]')
      expect(logOutput).not.toContain('abc123')
    })

    it('should redact secret fields', () => {
      logger.info('Environment', {
        secret: 'my_secret_value',
        public_key: 'not_redacted',
      })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('[REDACTED]')
      expect(logOutput).not.toContain('my_secret_value')
    })

    it('should handle case-insensitive sensitive field names', () => {
      logger.info('Mixed case', {
        PASSWORD: 'secret1',
        Token: 'secret2',
        API_KEY: 'secret3',
      })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).not.toContain('secret1')
      expect(logOutput).not.toContain('secret2')
      expect(logOutput).not.toContain('secret3')
    })
  })

  describe('nested object sanitization', () => {
    it('should sanitize nested objects', () => {
      logger.info('Nested context', {
        user: {
          id: 'user123',
          password: 'secret',
          profile: {
            name: 'John',
            api_key: 'key123',
          },
        },
      })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('user123')
      expect(logOutput).toContain('John')
      expect(logOutput).not.toContain('secret')
      expect(logOutput).not.toContain('key123')
    })

    it('should limit nested object depth', () => {
      const deeplyNested = {
        level1: {
          level2: {
            level3: {
              level4: {
                level5: 'too deep',
              },
            },
          },
        },
      }

      logger.info('Deep nesting', deeplyNested)

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('[MAX_DEPTH_EXCEEDED]')
    })

    it('should sanitize arrays within objects', () => {
      logger.info('Array context', {
        users: [
          { id: '1', password: 'secret1' },
          { id: '2', token: 'secret2' },
        ],
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } as any)

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('id')
      expect(logOutput).not.toContain('secret1')
      expect(logOutput).not.toContain('secret2')
    })

    it('should limit array size', () => {
      const largeArray = Array(20).fill({ value: 'item' })

      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      logger.info('Large array', { items: largeArray } as any)

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0] as string
      // Arrays should be limited to 10 items
      const matches = (logOutput.match(/"value":"item"/g) || []).length
      expect(matches).toBeLessThanOrEqual(10)
    })
  })

  describe('string truncation', () => {
    it('should truncate very long strings', () => {
      const longString = 'A'.repeat(2000)

      logger.info('Long string', { data: longString })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('[TRUNCATED]')
      expect(logOutput).not.toContain('A'.repeat(1500))
    })

    it('should not truncate short strings', () => {
      const shortString = 'Short message'

      logger.info('Short string', { data: shortString })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain(shortString)
      expect(logOutput).not.toContain('[TRUNCATED]')
    })
  })

  describe('specialized logging methods', () => {
    describe('logSecurityEvent', () => {
      it('should log security events with proper flags', () => {
        logger.logSecurityEvent('Suspicious login attempt', {
          userId: 'user123',
          ip: '192.168.1.1',
        })

        expect(consoleWarnSpy).toHaveBeenCalled()
        const logOutput = consoleWarnSpy.mock.calls[0][0]
        expect(logOutput).toContain('Security Event')
        expect(logOutput).toContain('Suspicious login attempt')
        expect(logOutput).toContain('securityEvent')
        expect(logOutput).toContain('user123')
      })

      it('should include timestamp in security events', () => {
        logger.logSecurityEvent('Rate limit exceeded', { ip: '1.2.3.4' })

        expect(consoleWarnSpy).toHaveBeenCalled()
        const logOutput = consoleWarnSpy.mock.calls[0][0]
        expect(logOutput).toContain('timestamp')
      })
    })

    describe('logAuthEvent', () => {
      it('should log authentication events', () => {
        logger.logAuthEvent('User login', {
          userId: 'user123',
          method: 'oauth',
        })

        expect(consoleInfoSpy).toHaveBeenCalled()
        const logOutput = consoleInfoSpy.mock.calls[0][0]
        expect(logOutput).toContain('Auth Event')
        expect(logOutput).toContain('User login')
        expect(logOutput).toContain('authEvent')
      })
    })

    describe('logApiAccess', () => {
      it('should log API access', () => {
        logger.logApiAccess('POST', '/api/users', {
          userId: 'user123',
          ip: '192.168.1.1',
        })

        expect(consoleInfoSpy).toHaveBeenCalled()
        const logOutput = consoleInfoSpy.mock.calls[0][0]
        expect(logOutput).toContain('API Access')
        expect(logOutput).toContain('POST /api/users')
        expect(logOutput).toContain('apiAccess')
      })
    })
  })

  describe('convenience functions', () => {
    it('logApiRequest should call logApiAccess', () => {
      logApiRequest('GET', '/api/data', { userId: 'user123' })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('API Access')
      expect(logOutput).toContain('GET /api/data')
    })

    it('logSecurityEvent convenience function should work', () => {
      logSecurityEvent('CSRF detected', { ip: '1.2.3.4' })

      expect(consoleWarnSpy).toHaveBeenCalled()
      const logOutput = consoleWarnSpy.mock.calls[0][0]
      expect(logOutput).toContain('Security Event')
    })

    it('logAuthEvent convenience function should work', () => {
      logAuthEvent('Password reset', { email: 'test@example.com' })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('Auth Event')
    })

    it('logError convenience function should work', () => {
      const error = new Error('Test error')
      logError('Operation failed', error, { operation: 'test' })

      expect(consoleErrorSpy).toHaveBeenCalled()
      const logOutput = consoleErrorSpy.mock.calls[0][0]
      expect(logOutput).toContain('ERROR')
      expect(logOutput).toContain('Operation failed')
    })

    it('logWarn convenience function should work', () => {
      logWarn('Low disk space', { available: '10GB' })

      expect(consoleWarnSpy).toHaveBeenCalled()
      const logOutput = consoleWarnSpy.mock.calls[0][0]
      expect(logOutput).toContain('WARN')
    })

    it('logInfo convenience function should work', () => {
      logInfo('Service started', { port: 3000 })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('INFO')
    })

    it('logDebug convenience function should work in development', () => {
      vi.stubEnv('NODE_ENV', 'development')
      logDebug('Debug info', { variable: 'value' })

      // Debug logging is disabled in test environment, even when NODE_ENV=development
      // This is expected behavior since the logger checks NODE_ENV at module load time
      expect(consoleDebugSpy).not.toHaveBeenCalled()
    })
  })

  describe('edge cases', () => {
    it('should handle null context', () => {
      expect(() => {
        logger.info('Null context', null as unknown as undefined)
      }).not.toThrow()
    })

    it('should handle undefined context', () => {
      expect(() => {
        logger.info('Undefined context')
      }).not.toThrow()
    })

    it('should handle empty context', () => {
      logger.info('Empty context', {})

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('INFO')
    })

    it('should handle circular references gracefully', () => {
      const circular: { self?: unknown } = {}
      circular.self = circular

      expect(() => {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        logger.info('Circular reference', circular as any)
      }).not.toThrow()
    })

    it('should handle special characters in messages', () => {
      logger.info('Special chars: \n\t\r"\'\\')

      expect(consoleInfoSpy).toHaveBeenCalled()
    })

    it('should handle numeric values in context', () => {
      logger.info('Numeric context', {
        count: 42,
        percentage: 75.5,
        zero: 0,
      })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('42')
      expect(logOutput).toContain('75.5')
    })

    it('should handle boolean values in context', () => {
      logger.info('Boolean context', {
        isActive: true,
        isDisabled: false,
      })

      expect(consoleInfoSpy).toHaveBeenCalled()
      const logOutput = consoleInfoSpy.mock.calls[0][0]
      expect(logOutput).toContain('true')
      expect(logOutput).toContain('false')
    })

    it('should handle Date objects', () => {
      const date = new Date('2024-01-01T00:00:00.000Z')

      expect(() => {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        logger.info('Date context', { timestamp: date } as any)
      }).not.toThrow()
    })
  })

  describe('performance', () => {
    it('should handle high-frequency logging', () => {
      const startTime = Date.now()
      
      for (let i = 0; i < 1000; i++) {
        logger.info(`Message ${i}`, { index: i })
      }
      
      const duration = Date.now() - startTime
      expect(consoleInfoSpy).toHaveBeenCalledTimes(1000)
      // Logging 1000 messages should take less than 1 second
      expect(duration).toBeLessThan(1000)
    })

    it('should handle large context objects efficiently', () => {
      const largeContext = {
        data: Array(100).fill(null).map((_, i) => ({
          id: i,
          name: `Item ${i}`,
          value: Math.random(),
        })),
      }

      const startTime = Date.now()
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      logger.info('Large context', largeContext as any)
      const duration = Date.now() - startTime

      expect(consoleInfoSpy).toHaveBeenCalled()
      // Should complete quickly even with large context
      expect(duration).toBeLessThan(100)
    })
  })
})


================================================
FILE: unit-tests/lib/plan-map.test.ts
================================================
import { describe, it, expect } from 'vitest'
import { getPlanName } from '@/lib/plan-map'

describe('plan-map', () => {
  describe('getPlanName', () => {
    it('should return correct plan name for valid product ID', () => {
      expect(process.env.POLAR_PRODUCT_FREE).toBeDefined()
      expect(process.env.POLAR_PRODUCT_PRO).toBeDefined()
      expect(process.env.POLAR_PRODUCT_STARTUP).toBeDefined()
      expect(getPlanName(process.env.POLAR_PRODUCT_FREE!)).toBe('Free')
      expect(getPlanName(process.env.POLAR_PRODUCT_PRO!)).toBe('Pro')
      expect(getPlanName(process.env.POLAR_PRODUCT_STARTUP!)).toBe('Startup')
    })

    it('should return "Unknown Plan" for null product ID', () => {
      expect(getPlanName(null)).toBe('Unknown Plan')
    })

    it('should return "Unknown Plan" for undefined product ID', () => {
      expect(getPlanName(undefined)).toBe('Unknown Plan')
    })

    it('should return "Unknown Plan" for empty string product ID', () => {
      expect(getPlanName('')).toBe('Unknown Plan')
    })

    it('should return "Unknown Plan" for non-existent product ID', () => {
      expect(getPlanName('non_existent_id')).toBe('Unknown Plan')
    })

    it('should handle partial matches', () => {
      // Test partial matching logic using actual product IDs
      expect(process.env.POLAR_PRODUCT_FREE).toBeDefined()
      expect(process.env.POLAR_PRODUCT_PRO).toBeDefined()
      const freeId = process.env.POLAR_PRODUCT_FREE!
      const proId = process.env.POLAR_PRODUCT_PRO!
      expect(getPlanName(freeId.substring(0, 10))).toBe('Free') // partial match
      expect(getPlanName(proId.substring(0, 5))).toBe('Pro') // partial match
    })

    it('should handle case sensitivity', () => {
      expect(process.env.POLAR_PRODUCT_FREE).toBeDefined()
      const freeId = process.env.POLAR_PRODUCT_FREE!
      expect(getPlanName(freeId.toUpperCase())).toBe('Unknown Plan') // case sensitive
      expect(getPlanName(freeId)).toBe('Free') // exact match
    })
  })
})


================================================
FILE: unit-tests/lib/rate-limit.test.ts
================================================
import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'
import { NextRequest } from 'next/server'
import {
  createRateLimit,
  apiRateLimit,
  authRateLimit,
  chatRateLimit,
} from '@/lib/rate-limit'

// Helper to create a mock NextRequest
function createMockRequest(ip: string = '192.168.1.1'): NextRequest {
  const headers = new Headers()
  headers.set('x-forwarded-for', ip)

  return {
    headers,
    url: 'http://localhost:3000/api/test',
    method: 'GET',
    nextUrl: new URL('http://localhost:3000/api/test'),
  } as NextRequest
}

describe('rate-limit', () => {
  beforeEach(() => {
    vi.useFakeTimers()
  })

  afterEach(() => {
    vi.useRealTimers()
    vi.restoreAllMocks()
  })

  describe('createRateLimit', () => {
    it('should allow requests within limit', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 5,
      })

      const request = createMockRequest('1.2.3.4')

      for (let i = 0; i < 5; i++) {
        const response = rateLimiter(request)
        expect(response.status).not.toBe(429)
        expect(response.headers.get('X-RateLimit-Limit')).toBe('5')
      }
    })

    it('should block requests exceeding limit', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 3,
      })

      const request = createMockRequest('1.2.3.5')

      // First 3 requests should succeed
      for (let i = 0; i < 3; i++) {
        const response = rateLimiter(request)
        expect(response.status).not.toBe(429)
      }

      // 4th request should be rate limited
      const blockedResponse = rateLimiter(request)
      expect(blockedResponse.status).toBe(429)
    })

    it('should include rate limit headers in successful responses', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 10,
      })

      const request = createMockRequest()
      const response = rateLimiter(request)

      expect(response.headers.get('X-RateLimit-Limit')).toBe('10')
      expect(response.headers.get('X-RateLimit-Remaining')).toBe('9')
      expect(response.headers.get('X-RateLimit-Reset')).toBeTruthy()
    })

    it('should include retry-after header in blocked responses', async () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 2,
      })

      const request = createMockRequest('1.2.3.6')

      // Consume the limit
      rateLimiter(request)
      rateLimiter(request)

      // Should be blocked
      const blockedResponse = rateLimiter(request)
      expect(blockedResponse.status).toBe(429)
      expect(blockedResponse.headers.get('Retry-After')).toBeTruthy()
      expect(blockedResponse.headers.get('X-RateLimit-Remaining')).toBe('0')

      const body = await blockedResponse.json()
      expect(body).toHaveProperty('error', 'Too many requests')
      expect(body).toHaveProperty('retryAfter')
    })

    it('should reset counter after window expires', () => {
      const windowMs = 60000
      const rateLimiter = createRateLimit({
        windowMs,
        maxRequests: 2,
      })

      const request = createMockRequest('1.2.3.7')

      // Use up the limit
      rateLimiter(request)
      rateLimiter(request)

      // Should be blocked
      const blockedResponse = rateLimiter(request)
      expect(blockedResponse.status).toBe(429)

      // Advance time past the window
      vi.advanceTimersByTime(windowMs + 1000)

      // Should allow requests again
      const newResponse = rateLimiter(request)
      expect(newResponse.status).not.toBe(429)
    })

    it('should track different IPs independently', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 2,
      })

      const request1 = createMockRequest('1.2.3.8')
      const request2 = createMockRequest('9.8.7.6')

      // IP1 uses its limit
      rateLimiter(request1)
      rateLimiter(request1)

      // IP1 should be blocked
      const blocked1 = rateLimiter(request1)
      expect(blocked1.status).toBe(429)

      // IP2 should still be allowed
      const allowed2 = rateLimiter(request2)
      expect(allowed2.status).not.toBe(429)
    })

    it('should handle x-real-ip header when x-forwarded-for is not present', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 2,
      })

      const headers = new Headers()
      headers.set('x-real-ip', '10.0.0.1')

      const request = {
        headers,
        url: 'http://localhost:3000/api/test',
        method: 'GET',
        nextUrl: new URL('http://localhost:3000/api/test'),
      } as NextRequest

      rateLimiter(request)
      const response = rateLimiter(request)

      expect(response.status).not.toBe(429)
      expect(response.headers.get('X-RateLimit-Remaining')).toBe('0')
    })

    it('should use "anonymous" for requests without IP headers', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 2,
      })

      const headers = new Headers()
      const request = {
        headers,
        url: 'http://localhost:3000/api/test',
        method: 'GET',
        nextUrl: new URL('http://localhost:3000/api/test'),
      } as NextRequest

      rateLimiter(request)
      rateLimiter(request)

      const response = rateLimiter(request)
      expect(response.status).toBe(429)
    })

    it('should handle x-forwarded-for with multiple IPs (use first)', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 2,
      })

      const headers = new Headers()
      headers.set('x-forwarded-for', '1.2.3.4, 5.6.7.8, 9.10.11.12')

      const request = {
        headers,
        url: 'http://localhost:3000/api/test',
        method: 'GET',
        nextUrl: new URL('http://localhost:3000/api/test'),
      } as NextRequest

      rateLimiter(request)
      rateLimiter(request)

      // Should be rate limited for the first IP
      const response = rateLimiter(request)
      expect(response.status).toBe(429)
    })

    it('should decrement remaining count correctly', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 5,
      })

      const request = createMockRequest('1.2.3.9')

      for (let i = 0; i < 5; i++) {
        const response = rateLimiter(request)
        const remaining = parseInt(response.headers.get('X-RateLimit-Remaining') || '0')
        expect(remaining).toBe(4 - i)
      }
    })
  })

  describe('pre-configured rate limiters', () => {
    describe('apiRateLimit', () => {
      it('should have correct configuration (100 requests per minute)', () => {
        const request = createMockRequest('unique-test-ip-100')

        // Make 100 requests
        for (let i = 0; i < 100; i++) {
          const response = apiRateLimit(request)
          expect(response.status).not.toBe(429)
        }

        // 101st request should be blocked
        const blockedResponse = apiRateLimit(request)
        expect(blockedResponse.status).toBe(429)
      })

      it('should reset after 1 minute', () => {
        const request = createMockRequest('10.0.0.2')

        // Consume limit
        for (let i = 0; i < 100; i++) {
          apiRateLimit(request)
        }

        const blocked = apiRateLimit(request)
        expect(blocked.status).toBe(429)

        // Advance time by 61 seconds
        vi.advanceTimersByTime(61000)

        // Should allow requests again
        const allowed = apiRateLimit(request)
        expect(allowed.status).not.toBe(429)
      })
    })

    describe('authRateLimit', () => {
      it('should have stricter limits (5 requests per 15 minutes)', () => {
        const request = createMockRequest('10.0.1.1')

        // Make 5 requests
        for (let i = 0; i < 5; i++) {
          const response = authRateLimit(request)
          expect(response.status).not.toBe(429)
        }

        // 6th request should be blocked
        const blockedResponse = authRateLimit(request)
        expect(blockedResponse.status).toBe(429)
      })

      it('should have 15-minute window', () => {
        const request = createMockRequest('10.0.1.2')

        // Consume limit
        for (let i = 0; i < 5; i++) {
          authRateLimit(request)
        }

        const blocked = authRateLimit(request)
        expect(blocked.status).toBe(429)

        // Advance time by 16 minutes
        vi.advanceTimersByTime(16 * 60 * 1000)

        // Should allow requests again
        const allowed = authRateLimit(request)
        expect(allowed.status).not.toBe(429)
      })
    })

    describe('chatRateLimit', () => {
      it('should allow 20 requests per minute', () => {
        const request = createMockRequest('10.0.2.1')

        // Make 20 requests
        for (let i = 0; i < 20; i++) {
          const response = chatRateLimit(request)
          expect(response.status).not.toBe(429)
        }

        // 21st request should be blocked
        const blockedResponse = chatRateLimit(request)
        expect(blockedResponse.status).toBe(429)
      })
    })
  })

  describe('edge cases', () => {
    it('should handle rapid successive requests', () => {
      const rateLimiter = createRateLimit({
        windowMs: 1000,
        maxRequests: 10,
      })

      const request = createMockRequest('10.0.3.1')
      const results = []

      for (let i = 0; i < 15; i++) {
        const response = rateLimiter(request)
        results.push(response.status)
      }

      const successCount = results.filter(status => status !== 429).length
      const blockedCount = results.filter(status => status === 429).length

      expect(successCount).toBe(10)
      expect(blockedCount).toBe(5)
    })

    it('should handle concurrent requests from same IP', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 5,
      })

      const request = createMockRequest('10.0.3.2')
      const responses = []

      // Simulate concurrent requests
      for (let i = 0; i < 10; i++) {
        responses.push(rateLimiter(request))
      }

      const allowedCount = responses.filter(r => r.status !== 429).length
      expect(allowedCount).toBe(5)
    })

    it('should handle very short windows', () => {
      const rateLimiter = createRateLimit({
        windowMs: 100, // 100ms window
        maxRequests: 2,
      })

      const request = createMockRequest('10.0.3.3')

      rateLimiter(request)
      rateLimiter(request)

      const blocked = rateLimiter(request)
      expect(blocked.status).toBe(429)

      // Advance past the short window
      vi.advanceTimersByTime(150)

      const allowed = rateLimiter(request)
      expect(allowed.status).not.toBe(429)
    })

    it('should handle very high limits', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 10000,
      })

      const request = createMockRequest('10.0.3.4')

      // Make many requests
      for (let i = 0; i < 100; i++) {
        const response = rateLimiter(request)
        expect(response.status).not.toBe(429)
      }
    })

    it('should handle limit of 1', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 1,
      })

      const request = createMockRequest('10.0.3.5')

      const first = rateLimiter(request)
      expect(first.status).not.toBe(429)

      const second = rateLimiter(request)
      expect(second.status).toBe(429)
    })
  })

  describe('header values', () => {
    it('should provide accurate reset time', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 5,
      })

      const request = createMockRequest('10.0.4.1')
      const now = Date.now()

      const response = rateLimiter(request)
      const resetTime = parseInt(response.headers.get('X-RateLimit-Reset') || '0')

      expect(resetTime).toBeGreaterThanOrEqual(now)
      expect(resetTime).toBeLessThanOrEqual(now + 60000)
    })

    it('should update remaining count in headers', () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 3,
      })

      const request = createMockRequest('10.0.4.2')

      const responses = [
        rateLimiter(request),
        rateLimiter(request),
        rateLimiter(request),
      ]

      expect(responses[0].headers.get('X-RateLimit-Remaining')).toBe('2')
      expect(responses[1].headers.get('X-RateLimit-Remaining')).toBe('1')
      expect(responses[2].headers.get('X-RateLimit-Remaining')).toBe('0')
    })
  })

  describe('response body', () => {
    it('should return proper error structure when rate limited', async () => {
      const rateLimiter = createRateLimit({
        windowMs: 60000,
        maxRequests: 1,
      })

      const request = createMockRequest('10.0.5.1')

      rateLimiter(request) // Use up the limit
      const blockedResponse = rateLimiter(request)

      const body = await blockedResponse.json()

      expect(body).toHaveProperty('error')
      expect(body.error).toBe('Too many requests')
      expect(body).toHaveProperty('retryAfter')
      expect(typeof body.retryAfter).toBe('number')
      expect(body.retryAfter).toBeGreaterThan(0)
    })

    it('should calculate retryAfter correctly', async () => {
      const windowMs = 60000
      const rateLimiter = createRateLimit({
        windowMs,
        maxRequests: 1,
      })

      const request = createMockRequest('10.0.5.2')

      rateLimiter(request)

      // Advance time a bit
      vi.advanceTimersByTime(10000)

      const blockedResponse = rateLimiter(request)
      const body = await blockedResponse.json()

      // retryAfter should be approximately 50 seconds (60 - 10)
      expect(body.retryAfter).toBeGreaterThan(45)
      expect(body.retryAfter).toBeLessThanOrEqual(51)
    })
  })
})


================================================
FILE: unit-tests/lib/utils.test.ts
================================================
import { describe, it, expect } from 'vitest'
import { cn } from '@/lib/utils'

describe('utils', () => {
  describe('cn', () => {
    it('should merge class names correctly', () => {
      expect(cn('class1', 'class2')).toBe('class1 class2')
    })

    it('should handle undefined and null values', () => {
      expect(cn('class1', undefined, null, 'class2')).toBe('class1 class2')
    })

    it('should handle empty strings', () => {
      expect(cn('class1', '', 'class2')).toBe('class1 class2')
    })

    it('should handle falsy values', () => {
      expect(cn('class1', false, 0, '', 'class2')).toBe('class1 class2')
    })

    it('should merge Tailwind classes correctly', () => {
      expect(cn('px-2', 'px-4')).toBe('px-4') // Last one wins
      expect(cn('text-red-500', 'text-blue-500')).toBe('text-blue-500')
    })

    it('should handle conditional classes', () => {
      const isActive = true
      const isDisabled = false

      expect(cn(
        'base-class',
        isActive && 'active-class',
        isDisabled && 'disabled-class'
      )).toBe('base-class active-class')
    })

    it('should handle array inputs', () => {
      expect(cn(['class1', 'class2'], 'class3')).toBe('class1 class2 class3')
    })

    it('should handle object inputs', () => {
      expect(cn({ 'class1': true, 'class2': false }, 'class3')).toBe('class1 class3')
    })

    it('should handle complex combinations', () => {
      expect(cn(
        'base',
        ['conditional1', 'conditional2'],
        { 'object-class': true, 'false-class': false },
        undefined,
        'final-class'
      )).toBe('base conditional1 conditional2 object-class final-class')
    })

    it('should return empty string for no valid inputs', () => {
      expect(cn()).toBe('')
      expect(cn(undefined, null, false, '')).toBe('')
    })

    it('should handle single class name', () => {
      expect(cn('single-class')).toBe('single-class')
    })
  })
})


================================================
FILE: unit-tests/performance/data-table-performance.test.tsx
================================================
import { describe, it, expect, beforeEach, vi } from 'vitest';
import { render, screen } from '@testing-library/react';
import { DataTable } from '../../src/components/data-table';

// Mock data for performance testing
const generateMockData = (count: number) => {
  return Array.from({ length: count }, (_, index) => ({
    id: index,
    header: `Item ${index}`,
    type: `user${index}@example.com`,
    status: index % 2 === 0 ? 'active' : 'inactive',
    target: Math.floor(Math.random() * 1000).toString(),
    limit: Math.floor(Math.random() * 100).toString(),
    reviewer: `Reviewer ${index}`,
  }));
};

describe('DataTable Performance Tests', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('Large Dataset Rendering', () => {
    it('should render 1000 rows within performance budget', () => {
      const startTime = performance.now();

      const mockData = generateMockData(1000);

      render(
        <DataTable
          data={mockData}

        />
      );

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Performance budget: should render within reasonable time for test environment
      expect(renderTime).toBeLessThan(5000);
      // With pagination, only first 10 items are visible
      expect(screen.getByText('Item 0')).toBeInTheDocument();
      expect(screen.getByText('Item 9')).toBeInTheDocument();
    });

    it('should render 5000 rows within performance budget', () => {
      const startTime = performance.now();

      const mockData = generateMockData(5000);

      render(
        <DataTable
          data={mockData}

        />
      );

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Performance budget: should render within reasonable time for test environment
      expect(renderTime).toBeLessThan(5000);
      expect(screen.getByText('Item 0')).toBeInTheDocument();
      // Note: Only first 10 items are visible due to pagination
      expect(screen.getByText('Item 9')).toBeInTheDocument();
    });

    it('should handle 10000 rows with virtualization', () => {
      const startTime = performance.now();

      const mockData = generateMockData(10000);

      render(
        <DataTable
          data={mockData}

        />
      );

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Performance budget: should render within reasonable time for test environment
      expect(renderTime).toBeLessThan(5000);
      // With virtualization, items may not be immediately visible, just check that component renders
      expect(screen.getByText('Header')).toBeInTheDocument();
    });
  });

  describe('Memory Usage', () => {
    it('should not leak memory with frequent re-renders', { timeout: 10000 }, () => {
      const mockData = generateMockData(100);
      // const mockColumns = [
      //   { accessorKey: 'name', header: 'Name' },
      //   { accessorKey: 'email', header: 'Email' },
      // ];

      // Perform multiple re-renders with smaller dataset
      for (let i = 0; i < 3; i++) {
        const { unmount } = render(
          <DataTable
            data={mockData}

          />
        );

        // Force re-render by updating data reference
        unmount();
      }

      // If we get here without memory issues, the test passes
      expect(true).toBe(true);
    });

    it('should handle large column counts efficiently', () => {
      const startTime = performance.now();

      const mockData = generateMockData(100);

      render(
        <DataTable
          data={mockData}

        />
      );

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Should handle many columns within reasonable time for test environment
      expect(renderTime).toBeLessThan(4000);
    });
  });

  describe('Sorting Performance', () => {
    it('should sort large datasets quickly', () => {
      const mockData = generateMockData(5000);
      // const mockColumns = [
      //   { accessorKey: 'name', header: 'Name' },
      //   { accessorKey: 'value', header: 'Value' },
      // ];

      const startTime = performance.now();

      render(<DataTable data={mockData} />);

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Sorting should be handled efficiently in test environment
      expect(renderTime).toBeLessThan(6000);
    });

    it('should handle multiple concurrent sorts', () => {
      const mockData = generateMockData(1000);
      // const mockColumns = [
      //   { accessorKey: 'name', header: 'Name' },
      //   { accessorKey: 'email', header: 'Email' },
      //   { accessorKey: 'value', header: 'Value' },
      // ];

      const startTime = performance.now();

      render(<DataTable data={mockData} />);

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Multiple columns should not significantly impact performance in test environment
      expect(renderTime).toBeLessThan(3000);
    });
  });

  describe('Filtering Performance', () => {
    it('should filter large datasets efficiently', () => {
      const mockData = generateMockData(2000);
      // const mockColumns = [
      //   { accessorKey: 'name', header: 'Name' },
      //   { accessorKey: 'status', header: 'Status' },
      // ];

      const startTime = performance.now();

      render(<DataTable data={mockData} />);

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Filtering should be performant in test environment
      expect(renderTime).toBeLessThan(4000);
    });

    it('should handle complex filter combinations', () => {
      const mockData = generateMockData(1000);

      const startTime = performance.now();

      render(
        <DataTable
          data={mockData}

        />
      );

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Complex filtering should still be performant in test environment
      expect(renderTime).toBeLessThan(3000);
    });
  });

  describe('Pagination Performance', () => {
    it('should handle paginated large datasets efficiently', () => {
      const mockData = generateMockData(10000);
      // const mockColumns = [
      //   { accessorKey: 'name', header: 'Name' },
      //   { accessorKey: 'email', header: 'Email' },
      // ];

      const startTime = performance.now();

      render(
        <DataTable
          data={mockData}

        />
      );

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Pagination should help performance with large datasets in test environment
      expect(renderTime).toBeLessThan(6000);
    });

    it('should handle page size changes quickly', () => {
      const mockData = generateMockData(5000);
      // const mockColumns = [
      //   { accessorKey: 'name', header: 'Name' },
      //   { accessorKey: 'value', header: 'Value' },
      // ];

      const startTime = performance.now();

      render(
        <DataTable
          data={mockData}

        />
      );

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Page size changes should be fast in test environment
      expect(renderTime).toBeLessThan(5000);
    });
  });

  describe('Search Performance', () => {
    it('should search through large datasets quickly', () => {
      const mockData = generateMockData(3000);
      // const mockColumns = [
      //   { accessorKey: 'name', header: 'Name' },
      //   { accessorKey: 'email', header: 'Email' },
      // ];

      const startTime = performance.now();

      render(
        <DataTable
          data={mockData}

        />
      );

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Search functionality should be performant in test environment
      expect(renderTime).toBeLessThan(6000);
    });

    it('should handle real-time search efficiently', () => {
      const mockData = generateMockData(2000);
      // const mockColumns = [
      //   { accessorKey: 'name', header: 'Name' },
      //   { accessorKey: 'email', header: 'Email' },
      // ];

      const startTime = performance.now();

      render(
        <DataTable
          data={mockData}

        />
      );

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Real-time search should not cause performance issues in test environment
      expect(renderTime).toBeLessThan(4000);
    });
  });

  describe('Stress Tests', () => {
    it('should handle extreme data loads', { timeout: 15000 }, () => {
      const mockData = generateMockData(50000);
      // const mockColumns = [
      //   { accessorKey: 'name', header: 'Name' },
      //   { accessorKey: 'email', header: 'Email' },
      //   { accessorKey: 'status', header: 'Status' },
      // ];

      const startTime = performance.now();

      render(
        <DataTable
          data={mockData}

        />
      );

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Should handle extreme loads within reasonable time for test environment
      expect(renderTime).toBeLessThan(15000);
    });

    it('should maintain responsiveness during heavy operations', () => {
      const mockData = generateMockData(10000);

      const startTime = performance.now();

      render(
        <DataTable
          data={mockData}

        />
      );

      const endTime = performance.now();
      const renderTime = endTime - startTime;

      // Should remain responsive even with many columns and rows in test environment
      expect(renderTime).toBeLessThan(8000);
    });
  });
});


================================================
FILE: unit-tests/performance/general-performance.test.ts
================================================
import { describe, it, expect, beforeEach, vi } from 'vitest';

// Performance testing utilities
const measurePerformance = (operation: () => void): number => {
  const startTime = performance.now();
  operation();
  const endTime = performance.now();
  return endTime - startTime;
};

const generateLargeDataset = (size: number) => {
  return Array.from({ length: size }, (_, index) => ({
    id: index,
    name: `Item ${index}`,
    description: `Description for item ${index}`,
    value: Math.floor(Math.random() * 1000),
    category: `Category ${index % 10}`,
    status: index % 2 === 0 ? 'active' : 'inactive',
    timestamp: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000),
  }));
};

describe('General Performance Tests', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('Large Dataset Operations', () => {
    it('should handle array operations on large datasets efficiently', () => {
      const dataset = generateLargeDataset(10000);

      const operation = () => {
        // Test filtering performance
        const filtered = dataset.filter(item => item.value > 500);

        // Test mapping performance
        const mapped = filtered.map(item => ({
          ...item,
          displayName: `${item.name} (${item.category})`
        }));

        // Test sorting performance
        return mapped.sort((a, b) => b.value - a.value);
      };

      const executionTime = measurePerformance(operation);

      // Should complete within reasonable time
      expect(executionTime).toBeLessThan(200);
    });

    it('should handle object property access efficiently', () => {
      const dataset = generateLargeDataset(5000);

      const operation = () => {
        const result = dataset.map(item => ({
          id: item.id,
          name: item.name,
          category: item.category,
          status: item.status,
        }));

        return result;
      };

      const executionTime = measurePerformance(operation);
      expect(executionTime).toBeLessThan(100);
    });

    it('should handle string operations efficiently', () => {
      const dataset = generateLargeDataset(2000);

      const operation = () => {
        const result = dataset.map(item => {
          const upperName = item.name.toUpperCase();
          const category = item.category.toLowerCase();
          const combined = `${upperName}_${category}_${item.id}`;

          return {
            original: item.name,
            processed: combined,
            length: combined.length,
          };
        });

        return result;
      };

      const executionTime = measurePerformance(operation);
      expect(executionTime).toBeLessThan(100);
    });
  });

  describe('Memory Management', () => {
    it('should not cause memory leaks with repeated operations', () => {
      const initialMemory = (performance as { memory?: { usedJSHeapSize: number } }).memory?.usedJSHeapSize || 0;

      // Perform repeated operations
      for (let i = 0; i < 100; i++) {
        const dataset = generateLargeDataset(1000);
        const filtered = dataset.filter(item => item.value > 500);
        filtered.sort((a, b) => a.name.localeCompare(b.name));
      }

      const finalMemory = (performance as { memory?: { usedJSHeapSize: number } }).memory?.usedJSHeapSize || 0;
      const memoryIncrease = finalMemory - initialMemory;

      // Memory increase should be reasonable (less than 50MB)
      if (finalMemory > 0) {
        expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024);
      }
    });

    it('should handle large object creation efficiently', () => {
      const operation = () => {
        const largeObject = {
          data: generateLargeDataset(5000),
          metadata: {
            created: new Date(),
            version: '1.0.0',
            settings: {
              theme: 'dark',
              language: 'en',
              features: Array.from({ length: 100 }, (_, i) => `feature_${i}`)
            }
          },
          computed: {
            totalItems: 5000,
            categories: 10,
            averageValue: 500,
          }
        };

        return largeObject;
      };

      const executionTime = measurePerformance(operation);
      expect(executionTime).toBeLessThan(200);
    });
  });

  describe('Algorithm Performance', () => {
    it('should handle search operations efficiently', () => {
      const dataset = generateLargeDataset(10000);

      const operation = () => {
        const searchTerm = 'Item 5000';
        const results = [];

        for (const item of dataset) {
          if (item.name.includes(searchTerm)) {
            results.push(item);
          }
        }

        return results;
      };

      const executionTime = measurePerformance(operation);
      expect(executionTime).toBeLessThan(100);
    });

    it('should handle sorting operations efficiently', () => {
      const dataset = generateLargeDataset(5000);

      const operation = () => {
        // Test different sorting approaches
        const sortByName = [...dataset].sort((a, b) => a.name.localeCompare(b.name));
        const sortByValue = [...dataset].sort((a, b) => b.value - a.value);
        const sortByDate = [...dataset].sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());

        return { sortByName, sortByValue, sortByDate };
      };

      const executionTime = measurePerformance(operation);
      expect(executionTime).toBeLessThan(400);
    });

    it('should handle grouping operations efficiently', () => {
      const dataset = generateLargeDataset(3000);

      const operation = () => {
        const grouped = dataset.reduce((acc, item) => {
          const category = item.category;
          if (!acc[category]) {
            acc[category] = [];
          }
          acc[category].push(item);
          return acc;
        }, {} as Record<string, typeof dataset>);

        return grouped;
      };

      const executionTime = measurePerformance(operation);
      expect(executionTime).toBeLessThan(100);
    });
  });

  describe('Async Operations Performance', () => {
    it('should handle concurrent operations efficiently', async () => {
      const datasets = Array.from({ length: 5 }, () => generateLargeDataset(1000));

      const operation = async () => {
        const promises = datasets.map(async (dataset) => {
          return new Promise(resolve => {
            setTimeout(() => {
              const filtered = dataset.filter(item => item.value > 500);
              resolve(filtered.length);
            }, 10);
          });
        });

        const results = await Promise.all(promises);
        return results;
      };

      const startTime = performance.now();
      await operation();
      const endTime = performance.now();

      expect(endTime - startTime).toBeLessThan(200);
    });

    it('should handle sequential async operations', async () => {
      const operation = async () => {
        const results = [];

        for (let i = 0; i < 10; i++) {
          await new Promise(resolve => setTimeout(resolve, 5));
          const dataset = generateLargeDataset(500);
          const filtered = dataset.filter(item => item.value > 250);
          results.push(filtered.length);
        }

        return results;
      };

      const startTime = performance.now();
      const results = await operation();
      const endTime = performance.now();

      expect(endTime - startTime).toBeLessThan(600);
      expect(results).toHaveLength(10);
    });
  });

  describe('Stress Testing', () => {
    it('should handle extreme computational loads', () => {
      const operation = () => {
        let result = 0;

        // Heavy computational loop
        for (let i = 0; i < 100000; i++) {
          result += Math.sqrt(i) * Math.sin(i);
        }

        return result;
      };

      const executionTime = measurePerformance(operation);
      expect(executionTime).toBeLessThan(1000);
    });

    it('should handle large scale data transformations', () => {
      const operation = () => {
        const matrix = Array.from({ length: 100 }, () =>
          Array.from({ length: 100 }, () => Math.floor(Math.random() * 100))
        );

        // Matrix operations
        const transposed = matrix[0].map((_, colIndex) =>
          matrix.map(row => row[colIndex])
        );

        const flattened = matrix.flat();
        const sum = flattened.reduce((acc, val) => acc + val, 0);
        const average = sum / flattened.length;

        return { transposed, sum, average };
      };

      const executionTime = measurePerformance(operation);
      expect(executionTime).toBeLessThan(200);
    });

    it('should handle recursive operations efficiently', () => {
      const fibonacci = (n: number): number => {
        if (n <= 1) return n;
        return fibonacci(n - 1) + fibonacci(n - 2);
      };

      const operation = () => {
        const results = [];
        for (let i = 0; i < 20; i++) {
          results.push(fibonacci(i));
        }
        return results;
      };

      const executionTime = measurePerformance(operation);
      expect(executionTime).toBeLessThan(100);
    });
  });

  describe('Performance Benchmarks', () => {
    it('should establish baseline performance metrics', () => {
      const benchmarks = {
        smallDataset: () => generateLargeDataset(100),
        mediumDataset: () => generateLargeDataset(1000),
        largeDataset: () => generateLargeDataset(5000),
      };

      const results = Object.entries(benchmarks).map(([name, fn]) => {
        const executionTime = measurePerformance(fn);
        return { name, executionTime };
      });

      // All benchmarks should complete within reasonable time
      results.forEach(({ executionTime }) => {
        expect(executionTime).toBeLessThan(200);
      });
    });

    it('should track performance regression indicators', () => {
      const dataset = generateLargeDataset(2000);

      const operations = [
        () => dataset.filter(item => item.value > 500),
        () => dataset.map(item => item.name.toUpperCase()),
        () => dataset.sort((a, b) => a.name.localeCompare(b.name)),
        () => dataset.reduce((acc, item) => acc + item.value, 0),
      ];

      const results = operations.map(operation => measurePerformance(operation));

      // All operations should be fast
      results.forEach(executionTime => {
        expect(executionTime).toBeLessThan(100);
      });
    });
  });
});


================================================
FILE: .github/workflows/ci.yml
================================================
name: CI

on:
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Install dependencies
        run: npm ci

      - name: Run type check
        env:
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          BETTER_AUTH_SECRET: dummy-secret-for-ci
          BETTER_AUTH_URL: http://localhost:3000
          GOOGLE_CLIENT_ID: dummy-client-id
          GOOGLE_CLIENT_SECRET: dummy-client-secret
          POLAR_ACCESS_TOKEN: dummy-token
          POLAR_SUCCESS_URL: http://localhost:3000/success
          POLAR_PRODUCT_FREE: dummy-free-id
          POLAR_PRODUCT_PRO: dummy-pro-id
          POLAR_PRODUCT_STARTUP: dummy-startup-id
          RESEND_API_KEY: dummy-resend-key
          RESEND_SENDER_EMAIL: test@example.com
          OPENAI_API_KEY: dummy-openai-key
          ENCRYPTION_KEY: dummy-32-char-encryption-key!!!
        run: npm run type-check

      - name: Run linter
        run: npm run lint

      - name: Run tests
        env:
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          BETTER_AUTH_SECRET: dummy-secret-for-ci
          BETTER_AUTH_URL: http://localhost:3000
          GOOGLE_CLIENT_ID: dummy-client-id
          GOOGLE_CLIENT_SECRET: dummy-client-secret
          POLAR_ACCESS_TOKEN: dummy-token
          POLAR_SUCCESS_URL: http://localhost:3000/success
          POLAR_PRODUCT_FREE: dummy-free-id
          POLAR_PRODUCT_PRO: dummy-pro-id
          POLAR_PRODUCT_STARTUP: dummy-startup-id
          RESEND_API_KEY: dummy-resend-key
          RESEND_SENDER_EMAIL: test@example.com
          OPENAI_API_KEY: dummy-openai-key
          ENCRYPTION_KEY: dummy-32-char-encryption-key!!!
        run: npm run test:run

      - name: Build project
        env:
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          BETTER_AUTH_SECRET: dummy-secret-for-ci
          BETTER_AUTH_URL: http://localhost:3000
          GOOGLE_CLIENT_ID: dummy-client-id
          GOOGLE_CLIENT_SECRET: dummy-client-secret
          POLAR_ACCESS_TOKEN: dummy-token
          POLAR_SUCCESS_URL: http://localhost:3000/success
          POLAR_PRODUCT_FREE: dummy-free-id
          POLAR_PRODUCT_PRO: dummy-pro-id
          POLAR_PRODUCT_STARTUP: dummy-startup-id
          RESEND_API_KEY: dummy-resend-key
          RESEND_SENDER_EMAIL: test@example.com
          OPENAI_API_KEY: dummy-openai-key
          ENCRYPTION_KEY: dummy-32-char-encryption-key!!!
        run: npm run build



================================================
FILE: .husky/commit-msg
================================================
#!/usr/bin/env sh
set -e

npx commitlint --edit "$1"


================================================
FILE: .husky/pre-commit
================================================
npx lint-staged



================================================
FILE: .husky/pre-push
================================================
npm run lint && npm run type-check && npm run test:run && npm run build
#npm run test:run &&



================================================
FILE: .husky/prepare-commit-msg
================================================


# Generate commit message automatically using custom script
if ! COMMIT_MSG=$(node generate-commit-msg.js 2>&1); then
  echo "Warning: Failed to generate commit message: $COMMIT_MSG" >&2
  exit 0
fi

if [ -n "$COMMIT_MSG" ]; then
  echo "$COMMIT_MSG" > "$1"
else
  echo "Warning: No commit message generated (no staged changes?)" >&2
fi

exit 0

